Переменные
Переменные являются одной из основных составляющих языка - они предоставляют возможность чтения из и записи в память.

* Переменные

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Посмотреть видео]]
- Если вам нужна финансовая помощь - заполните нашу [[https://www.ardanlabs.com/scholarship/][заявку на стипендию]]

Переменные являются одной из основных составляющих языка - они используются для чтения из и записи в память.
В Go доступ к памяти безопасен по типу. Это означает, что компилятор строго контролирует типы данных
и не позволяет использовать переменные за пределами области их объявления.

** Обзор кода

- *Пример* *1*: Пример программы, демонстрирующей, как объявлять переменные.

.play variables/example1.go

** Встроенные Типы Данных
Типы данных обеспечивают целостность и читаемость, задавая два вопроса:

- Какой объем памяти выделить? (например, 1, 2, 4, 8 байтов)
- Что эта память представляет? (например, int, uint, bool, ...)

Типы могут быть конкретными по точности, такими как int32 или int64:

- uint8 представляет беззнаковое целое число размером 1 байт
- int32 представляет знаковое целое число размером 4 байта

Когда вы объявляете тип данных без указания точности (uint, int), размер выделяемой памяти
зависит от архитектуры компьютера на котором происходит сборка программы:

- 32-битная архитектура: int представляет знаковое целое число с выделением 4 байтов памяти
- 64-битная архитектура: int представляет знаковое целое число с выделением 8 байтов памяти

** Размер слова

Размер слова представляет собой количество памяти, выделяемой для хранения целых чисел
и указателей для заданной архитектуры. Например:

- 32-битная архитектура: размер слова составляет 4 байта памяти
- 64-битная архитектура: размер слова составляет 8 байтов памяти

Это важно, потому что в Go есть внутренние структуры данных (карты, каналы, срезы,
интерфейсы и функции), которые хранят целые числа и указатели. Размер этих структур
будет зависеть от архитектуры компьютера, используемого при компиляции программы.

В Go количество памяти выделенной для значения типа int, указателя или слова
всегда будет одинаковым на одной и той же архитектуре.

** Концепция Нулевого Значения
Каждая переменная, которую вы создаете в Go, инициализируется как минимум до состояния
нулевого значения если вы не задаёте значение при создании. Нулевое значение - означает установку
каждого бита в каждом байте в ноль.

Это делается для обеспечения целостности данных и это не бесплатно. Пропустить электроны
через машину и сбросить эти биты занимает время, но всегда следует отдавать предпочтение целостности
над производительностью.

    Тип                             Нулевое Значение
    Булево                          false
    Целое                           0
    Число с плавающей запятой       0
    Комплексное                     0i
    Строка                          "" (пустая строка)
    Указатель                       nil

** Объявление и Инициализация
Ключевое слово `var` можно использовать для объявления переменных в состоянии нулевого значения для всех типов.

    var a int
    var b string
    var c float64
    var d bool

    fmt.Printf("var a int \t %T [%v]\n", a, a)
    fmt.Printf("var b string \t %T [%v]\n", b, b)
    fmt.Printf("var c float64 \t %T [%v]\n", c, c)
    fmt.Printf("var d bool \t %T [%v]\n\n", d, d)

Вывод:

    var a int    	int [0]
    var b string 	string []
    var c float64	float64 [0]
    var d bool   	bool [false]

Строки представляют собой набор UTF8 символов, но на самом деле являются просто набором байтов.

Строка - это внутренняя двухсловная структура данных в Go:

- Первое слово представляет собой указатель на массив байтов
- Второе слово представляет собой длину или количество байтов в массиве
- Если строка установлена в состояние нулевого значения, то первое слово равно `nil` и
второе слово равно 0.

С помощью оператора короткого объявления переменной вы можете одновременно объявить, создать и
инициализировать значение.

    aa := 10       // int [10]
    bb := "hello"  // string [hello]
    cc := 3.14159  // float64 [3.14159]
    dd := true     // bool [true]

    fmt.Printf("aa := 10 \t %T [%v]\n", aa, aa)
    fmt.Printf("bb := \"hello\" \t %T [%v]\n", bb, bb)
    fmt.Printf("cc := 3.14159 \t %T [%v]\n", cc, cc)
    fmt.Printf("dd := true \t %T [%v]\n\n", dd, dd)

Вывод:

    aa := 10         int [10]
    bb := "hello"    string [hello]
    cc := 3.14159    float64 [3.14159]
    dd := true       bool [true]

** Преобразование вместо Приведения

В Go нет приведения типов, есть преобразование. Вместо того чтобы отображать набор байтов
в другом представлении, байты будут скопированы в новое место в памяти для дальнейшей работы.

    aaa := int32(10)
    fmt.Printf("aaa := int32(10) %T [%v]\n", aaa, aaa)

Вывод:
    aaa := int32(10) int32 [10]

В стандартной библиотеке Go есть пакет под названием `unsafe`, который может быть использован для
фактического приведения типов. Вам следует по возможности избегать этого и быть честным с самим собой,
почему вы рассматриваете его использование. Преобразование предоставляет наивысший уровень
целостности для таких операций.

** Заметки

- Целью всех программ и всех их частей является преобразование данных из одной формы в другую.
- Код большей частью выделяет память, читает и пишет в неё.
- Понимание типов данных — ключ к пониманию и написанию хорошего кода.
- Если вы не понимаете данные, вы не понимаете задачу.
- Понимая данные, вы лучше понимаете задачу.
- При объявлении переменных в состояние нулевого значения, используйте ключевое слово var.
- При объявлении и инициализации переменных, используйте оператор короткого объявления переменной.

** Дополнительное чтение

- [[http://golang.org/ref/spec#Boolean_types][Встроенные Типы]]
- [[https://golang.org/doc/effective_go.html#variables][Переменные]]
- [[https://www.ardanlabs.com/blog/2013/08/gustavos-ieee-754-brain-teaser.html][Загадка Густаво по IEEE-754]] - Уильям Кеннеди
- [[https://www.youtube.com/watch?v=sFUSP8Au_PE][Что в имени]]
- [[http://arcanesentiment.blogspot.com/2015/01/a-brief-history-of-type.html][Краткая история "типа"]] - Arcane Sentiment

* Упражнения

Используйте шаблон в качестве отправной точки для выполнения упражнений.  Здесь представлен возможный вариант решения.

** Упражнение 1

*Часть* *A:* Объявите три переменные, которые инициализированы в состоянии нулевого значения и
три с литеральным значением. Объявите переменные типа string, int и bool. Отобразите значения этих переменных.

*Часть* *B:* Объявите новую переменную типа float32 и инициализируйте переменную,
преобразовав литеральное значение Pi (3.14).

.play variables/exercise1.go
.play variables/answer1.go
