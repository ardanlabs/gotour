Структурные типы
Вы можете объявить дженерик, используя  struct.

* Generics - Struct Types

Вы можете объявить дженерик, используя  `struct`.

** Видео

Посмотрите лекцию о дженериках, в которой я рассказываю обо всех
примерах в этом разделе.

.html generics-video.html

** Обзор кода

- *Пример* *1*: Связный список

.play generics/struct-types/example1.go

** Объяснения

Что, если вы хотите объявить свой  дженерик, используя  `struct`?

    type node[T any] struct {
        Data T
        next *node[T]
        prev *node[T]
    }

Этот `struct`  представляет узел в связанном списке. Каждый узел
содержит отдельный фрагмент данных, который хранится и управляется списком. Используя
квадратные скобки мы показываем, что тип T - это дженерик, который будет определен во
время компиляции. Использование ограничения `any` говорит, что нет никаких ограничений на преобразование T.

После объявления типа `T` поле `Data`  будет определён как поле типа `T`, определено позже. Поля `next` и `prev` должны указывать на узел того же
типа. Это указатели на следующий и предыдущий узел в связном списке,
соответственно. Чтобы установить эту связь, поля объявляются как указатели на узел
который привязан к типу T с помощью квадратных скобок.

    type list[T any] struct {
        first *node[T]
        last *node[T]
    }

Второй  `struct` называется `list` и представляет коллекцию узлов путем
указывая на первый и последний узел в списке. Эти поля должны указывать на узел
некоторого типа T, как и поля `next` и `prev` из структуры `node`.

И снова идентификатор T определяется как дженерик (будет определен позже)
и может быть заменен на "любой" конкретный тип. Затем первое и последнее поле
объявляются как указатели на узел некоторого типа T с использованием синтаксиса квадратных скобок.

    func (l *list[T]) add(data T) *node[T] {
        n := node[T]{
            Data: data,
            prev: l.last,
        }
        
        if l.first == nil {
            l.first = &n
            l.last = &n
            return &n
        }

        l.last.next = &n
        l.last = &n
        
        return &n
    }

Это реализация метода `add` для  `list`. Формальное объявление общего типа
списка (как в случае с функциями), поскольку метод привязывается к списку через
приемник. Приемник метода `add` объявляется как указатель на список некоторого типа T, а
возврат объявляется как указатель на узел того же типа T.

Код после построения узла всегда будет одним и тем же, независимо от того.
какой тип данных хранится в списке, поскольку это всего лишь манипуляции с указателями.
Только построение нового узла зависит от типа данных, которые будут
управляться. Благодаря дженерикам построение узла может быть привязано к типу T
который будет подставлен позже во время компиляции.

Без дженериков весь этот метод пришлось бы дублировать, поскольку
конструкция узла должна быть жестко привязана к известному, объявленному типу до
компиляции. Поскольку объем кода (для всей реализации списка), который
необходимо изменять для различных типов данных, возможность объявить узел
и список для управления данными некоторого типа T снижает затраты на дублирование кода и
сопровождения.

    type user struct {
        name string
    }
    
    func main() {
        // Store values of type user into the list.
        var lv list[user]
        n1 := lv.add(user{"bill"})
        n2 := lv.add(user{"ale"})
        fmt.Println(n1.Data, n2.Data)
        
        // Store pointers of type user into the list.
        var lp list[*user]
        n3 := lp.add(&user{"bill"})
        n4 := lp.add(&user{"ale"})
        fmt.Println(n3.Data, n4.Data)
    }

Output:

    {bill} {ale}
    &{bill} &{ale}

Вот небольшое приложение. Объявляется тип с именем `user`, а затем строится список
до состояния нулевого значения для управления значениями типа `user`. Второй список
строится в состоянии нулевого значения, и этот список управляет указателями на значения
типа `user`. Единственное различие между этими двумя списками заключается в том, что один из них управляет значениями типа `user`, а другой - указателями на тип `user`.

Поскольку тип `user` явно указывается при построении типа списка, метод `add`
в свою очередь принимает значения типа `user`. Поскольку указатель типа user явно задан при построении списочного типа, метод `add` принимает указатели типа user.

В выводе программы видно, что поле `Data` для узлов  списков
соответствуют семантике данных, использованной при построении.

* Упражнения

Используйте шаблон в качестве отправной точки для выполнения упражнений. Приведены возможные решения.

** Упражнение 1

Объявите дженерик с именем `stack`, который использует структуру с единственным
полем `data`, объявленным как фрагмент некоторого типа T. Объявите метод
`push`, который принимает значение некоторого типа T и добавляет это значение к
срезу. Объявите метод `pop`, который возвращает последнее значение
некоторого типа T, которое было добавлено к срезу, и ошибку. Затем напишите функцию `main`
которая использует эти методы.

.play generics/struct-types/exercise1.go 
.play generics/struct-types/answer1.go
