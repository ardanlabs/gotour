Функции
Функции являются центральной частью языка и используются для группировки и организации нашего кода в отдельные функциональные элементы.

* Функции

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Посмотреть видео]]
- Если вам нужна финансовая помощь - заполните нашу [[https://www.ardanlabs.com/scholarship/][заявку на стипендию]]

Функции являются центральной частью языка и используются для группировки и организации
нашего кода в отдельные функциональные элементы. Они могут использоваться
для предоставления API к созданным нами пакетам и являются основным компонентом
конкуретности.

Функции в Go играют центральную роль в структурировании кода и способствуют созданию чистого,
поддерживаемого и эффективного программного обеспечения. Понимание того, как объявлять, определять
и использовать функции, является критическим для написания эффективных программ на Go.

** Обзор кода

- *Пример* *1:* Возврат нескольких значений
- *Пример* *2:* Пустой идентификатор
- *Пример* *3:* Повторное объявление
- *Пример* *4:* Анонимные функции/Замыкания
- *Пример* *5:* Восстановление после паники

.play functions/example1.go
.play functions/example2.go
.play functions/example3.go
.play functions/example4.go
.play functions/example5.go

Функции являются фундаментальным строительным блоком программ и используются для инкапсуляции
и организации кода с целью лучшей модульности и повторного использования. Функции представляют
собой блоки кода, выполняющие определенную задачу или набор связанных задач. Вот обзор функций в Go:

** Объявление Функции

Для объявления функции в Go используется ключевое слово `func`, за которым следует
имя функции, список параметров, заключенных в скобки, и необязательный
тип возвращаемого значения. Общий синтаксис выглядит следующим образом:

   func имяФункции(параметр1 тип, параметр2 тип, ...) тип_возвращаемого_значения {
       // Тело функции
   }

Например:

   func add(x int, y int) int {
       return x + y
   }

** Параметры и Возвращаемые Значения

Функции могут принимать ноль или более параметров, которые представляют собой значения,
передаваемые в функцию при ее вызове. Каждый параметр состоит из имени и типа. В
приведенном выше примере, `add` принимает два целочисленных параметра, `x` и `y`.

Когда функция не имеeт возвращаемого значения, его тип можно опустить.
Ключевое слово `return` используется для указания возвращаемого значения.
В приведенном выше примере, `add` возвращает целое число.

Go позволяет функциям возвращать несколько значений. Это полезно в случаях,
когда необходимо вернуть более одного результата из функции. Например:

   func divide(x, y float64) (float64, error) {
       if y == 0 {
           return 0, errors.New("деление на ноль")
       }
       return x / y, nil
   }

В этом примере функция `divide` возвращает как результат с плавающей точкой,
так и ошибку (если происходит деление на ноль).

В Go можно указывать имена для возвращаемых значений в сигнатуре функции.
Имена возвращаемых значений автоматически инициализируются и могут использоваться как обычные
переменные внутри функции. Они особенно полезны при работе со сложными функциями или обработке ошибок.
Например:

   func divide(x, y float64) (result float64, err error) {
       if y == 0 {
           err = errors.New("division by zero")
           return
       }
       result = x / y
       return
   }

** Вызов Функции

Для вызова функции в Go используется имя функции, за которым следует список аргументов,
заключенных в скобки. Если у функции есть несколько возвращаемых значений, их можно сохранить
в переменных. Например:

   sum := add(3, 5)            // Вызвать функцию сложения и присвоить ее результат переменной `sum`
   result, err := divide(8, 2) // Вызвать функцию деления и получить как результат, так и ошибку

** Вариативные Параметры Функции

Go поддерживает вариативные функции, которые позволяют передавать переменное количество
аргументов в функцию. Для определения вариативного параметра используется многоточие
(`...`), за которым следует тип параметра. Например:

   func calculateSum(nums ...int) int {
       sum := 0
       for _, num := range nums {
           sum += num
       }
       return sum
   }

Вы можете вызвать эту функцию с любым количеством целых чисел.

** Анонимные Функции

Go поддерживает анонимные функции, также известные как замыкания. Это функции
без имени, и их можно присваивать переменным и использовать в качестве аргументов
других функций. Замыкания часто используются в Go для таких задач как определение
встроенных функций или для конкурентного программирования с использованием горутин.

   add := func(x, y int) int {
       return x + y
   }

   result := add(3, 5)

** Функция как Тип

В Go функции также могут использоваться как типы. Это позволяет определять функции,
которые принимают другие функции в качестве аргументов или возвращают их как результат.
Это мощный механизм для реализации функций высокого порядка и колбэков.

   type MathFunc func(int, int) int

   func operate(x, y int, op MathFunc) int {
       return op(x, y)
   }

Затем вы можете передать функции в качестве аргументов `operate`.

** Отложенные Вызовы и Паника

Go предоставляет две специальные встроенные функции, называемые `defer` и `panic`, для обработки
исключителньых ситуаций и управления ресурсами. `defer` используется для планирования вызова функции
на выполнение прямо перед возвратом из функции, в то время как `panic` используется для
генерации ошибки во время выполнения и раскрутки стека.

** Заметки

- Функции могут возвращать несколько значений, и чаще всего возвращают значение ошибки.
- Значение ошибки всегда необходимо проверять как часть программной логики.
- Для игнорирования возвращаемых значений можно использовать пустой идентификатор.
- Синтаксис: func, получатель, идентификатор, [параметр(ы)], [возвращаемое значение (значения)], блок кода.
- Вариативные параметры, вариативные аргументы и разворачивание среза.
- Функции - это тип: вы можете использовать функции как параметры, аргументы и возвращаемые значения.
- Отложенный вызов (`defer`) используется для планирования вызова функции перед выходом из другой функции.
- Паника (`panic`) запускает ошибку времени выполнения и раскручивает стек.
- Именованные возвращаемые значения менее читабельны и не идиоматичны.

** Дополнительная литература

- [[https://golang.org/doc/effective_go.html#functions][Эффективный Go]]
- [[https://www.ardanlabs.com/blog/2013/10/functions-and-naked-returns-in-go.html][Функции и Обнаженные возвраты в Go]]
- [[https://www.ardanlabs.com/blog/2013/06/understanding-defer-panic-and-recover.html][Понимание отложенных вызовов и восстановления]]

* Упражнения

Используйте шаблон в качестве отправной точки для выполнения упражнений. Здесь представлен возможный вариант решения.

** Упражнение 1

*Часть* *A:* Объявите тип struct для хранения информации о пользователе. Объявите
функцию, которая создает значение этого типа и возвращает указатели на это значение и значение ошибки.
Вызовите эту функцию из `main` и отобразите значение.

*Часть* *B:* Сделайте второй вызов вашей функции, но на этот раз проигнорируйте значение
и просто проверьте значение ошибки.

.play functions/exercise1.go
.play functions/answer1.go
