Гонки данных
Гонка данных - это состояние, когда две или более горутины пытаются одновременно читать и записывать данные в один и тот же ресурс.

* Гонки данных

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Посмотреть видео]]
- Если нужна финансовая поддержка, используйте нашу [[https://www.ardanlabs.com/scholarship/][форму заявки на стипендию]].

Гонка данных - это состояние, когда две или более горутины пытаются получить доступ к одному и тому же месту памяти
в то же время, когда хотя бы одна горутина выполняет запись. Когда это происходит, невозможно предсказать результат. Такие ошибки трудно найти, потому что они вызывают проблемы, которые всегда выглядят случайными.

 
Эти ~8 минут от Скотта Мейерса стоит послушать: 

[[https://youtu.be/WDIkqP4JbkE?t=1809][Кэш-память CPU и почему вам это важно 30:09-38:30]]

** Обзор кода

- *Пример* *1:* Гонка данных
- *Пример* *2:* Атомарные инкременты
- *Пример* *3:* Мьютекс
- *Пример* *4:* Мьютекс чтения/записи
- *Пример* *5:* Состояния гонки данных с картой
- *Пример* *6:* Состояние гонки при работе с интерфейсом

.play data_race/example1.go
.play data_race/example2.go     
.play data_race/example3.go
.play data_race/example4.go
.play data_race/example5.go
.play data_race/example6.go

** Пример гонки данных

Данный код является отличным примером гонки данных и того, как это может быть скрыто в течение многих лет
и в конце концов проявиться в неподходящее время и привести к повреждению данных.

    var counter int

    func main() {
        const grs = 2

        var wg sync.WaitGroup
        wg.Add(grs)

        for g := 0; g < grs; g++ {
            go func() {
                for i := 0; i < 2; i++ {
                    value := counter
                    value++
                    counter = value
                }
                wg.Done()
            }()
        }

        wg.Wait()
        fmt.Println("Counter:", counter)
    }

Эта программа создает две горутины, каждая из которых обращается к одной и той же переменной целого типа,
инкрементируя ее дважды. Горутины выполняют операции чтения, изменения и записи по отношению к общему состоянию вручную.

    var counter int

    func main() {
        . . .

        go func() {
            for i := 0; i < 2; i++ {
                value := counter
                value++
                counter = value
            }
            wg.Done()
        }()

        . . .
    }

Вы можете наблюдать доступ к общему состоянию внутри цикла `for`. Когда вы собираете и запускаете
эту программу, вы каждый раз получаете правильный ответ 4.

    $ ./example1
    Final Counter: 4

    $ ./example1
    Final Counter: 4

    $ ./example1
    Final Counter: 4

Как это работает?

    G1                            Shared State: 0                            G2
    ----------------------------------------------------------------------------
    Read:   0
    Modify: 1
    Write:  1                         Shared State: 1
    Context Switch 
                                                                      Read: 1
                                                                    Modify: 2
                                    Shared State: 2                  Write: 2
                                                               Context Switch 
    Read:   2
    Modify: 3
    Write:  3                         Shared State: 3
    Terminate
                                                                      Read: 3
                                                                    Modify: 4
                                    Shared State: 4                  Write: 4
                                                                    Terminate
    ----------------------------------------------------------------------------

Операции чтения, изменения и записи происходят непрерывно. 
Даже получая правильный ответ, мы не можем быть уверены, что проблема отсутствует. Что произойдет, если
вы добавите логи в середине операций чтения, изменения и записи?

    var counter int

    func main() {
        . . .

        go func() {
            for i := 0; i < 2; i++ {
                value := counter
                value++
                log.Println("logging")     <-- Add Logging Here
                counter = value
            }
            wg.Done()
        }()

        . . .
    }

При выполнении этой программы вы больше не получите тот же результат 4, теперь вы получите ответ 2.

    $ ./example1
    Final Counter: 2

    $ ./example1
    Final Counter: 2

    $ ./example1
    Final Counter: 2


Что происходит? Вы столкнулись с ошибкой гонки данных, которая существовала раньше, но не была выявлена.
Вызов log теперь заставляет планировщик выполнять переключение контекста
между двумя горутинами и делать это в неподходящее время.

    G1                                Shared State: 0                         G2
    ----------------------------------------------------------------------------
    Read:   0
    Modify: 1
    Context Switch
                                                                        Read:   0
                                                                        Modify: 1
                                                                   Context Switch 
    Write:  1                         Shared State: 1
    Read:   1
    Modify: 2
    Context Switch
                                    Shared State: 1                     Write:  1
                                                                        Read:   1
                                                                        Modify: 2
                                                                    Context Switch 
    Write:  2                         Shared State: 2
    Terminate
                                    Shared State: 2                     Write:  2
                                                                        Terminate
    ----------------------------------------------------------------------------

После операции `modify` происходит переключение контекста. Три операции
больше не являются непрерывными, и горутина 2 завершается тем, что ее локальное значение оказывается неверным
к моменту завершения операции записи. Вам очень повезло, что это происходит каждый раз
и вы это видите. Но обычно подобная гонка данных происходит "случайно",
и узнать о ней невозможно, пока не станет слишком поздно. К счастью, в Go есть детектор гонок, который помогает
обнаружить гонки данных.

** Обнаружение гонок

Есть несколько способов задействовать детектор гонок. Вы можете использовать его с помощью команд `run`, `build`
и `test`. Если вы используете его с командой build, вам нужно не забыть запустить
программу. Говорят, что инструментированный бинарник может замедлить работу программы на ~20 %.

    $ go build -race
    $ ./example1

Флаг `-race` - это то, как инструментировать сборку с помощью детектора гонок. Вы
вероятно, будете чаще использовать его в команде "go test", но в этом примере вы инструментируете
бинарный файл, а затем запускаете его.

    2021/02/01 17:30:52 logging
    2021/02/01 17:30:52 logging
    2021/02/01 17:30:52 logging
    ==================
    WARNING: DATA RACE
    Write at 0x000001278d88 by goroutine 8:
    main.main.func1()
        /data_race/example1/example1.go:41 +0xa6

    Previous read at 0x000001278d88 by goroutine 7:
    main.main.func1()
        /data_race/example1/example1.go:38 +0x4a

    Goroutine 8 (running) created at:
    main.main()
        /data_race/example1/example1.go:36 +0xaf

    Goroutine 7 (finished) created at:
    main.main()
        /data_race/example1/example1.go:36 +0xaf
    ==================
    2021/02/01 17:30:52 logging
    Final Counter: 2
    Found 1 data race(s)

Вы можете видеть, что при запуске программы была обнаружена гонка. Это могло прозойти как с
вставкой выражения для логирования, так и без нее. При обнаружении гонки программа паникует и
предоставляет эту трассировку. Трассировка показывает, где был несинхронизированный доступ к
одному и тому же общему состоянию, где хотя бы один доступ был записью.

В этой трассировке горутина выполнила запись по адресу `0x000001278d88` в строке 41,
и по этому же адресу другой горутиной было выполнено несинхронизированное чтение на
строке 38. Обе горутины были созданы в строке 36.

    36 go func() {
    37     for i := 0; i < 2; i++ {
    38         value := counter
    39         value++
    40         log.Println("logging")
    41         counter = value
    42     }
    43     wg.Done()
    44 }()

Вы можете ясно видеть несинхронизированное чтение и запись. В качестве примечания, операция плюс плюс
в строке 39 также была бы гонкой данных, если бы код обращался к счетчику
переменной. Операция плюс плюс - это операция чтения, модификации и записи, при которой операционная система может легко переключить контекст.

Как же исправить код, чтобы устранить гонку данных? Есть два
инструмента, которые можно использовать: атомарные инструкции и мьютексы.

** Атомарные инструкции

Атомики обеспечивают синхронизацию на аппаратном уровне. Из-за этого она ограничена
словами и полусловами данных. Поэтому они отлично подходят для счетчиков или механики быстрого переключения. API WaitGroup использует атомики.

Какие изменения нужно сделать, чтобы применить атомик в коде?

    var counter int32                             <-- CHANGED

    func main() {
        const grs = 2

        var wg sync.WaitGroup
        wg.Add(grs)

        for g := 0; g < grs; g++ {
            go func() {
                for i := 0; i < 2; i++ {
                    atomic.AddInt32(&counter, 1)  <-- CHANGED
                }
                wg.Done()
            }()
        }

        wg.Wait()
        fmt.Println("Counter:", counter)
    }

Вам нужно сделать всего пару вещей. Во-первых, измените переменную счетчика на
целое число с высокой точностью. Вы можете увидеть это в верхней части листинга кода. Атомарные
функции работают только с целыми числами, основанными на точности. Во-вторых, удалите вручную
чтение, изменение и запись кода для одного вызова atomic.AddInt32. Этот один вызов обрабатывает
все.

Все функции, связанные с пакетом atomic, получают адрес
общего состояния, которое должно быть синхронизировано. Синхронизация происходит только на уровне адресов.
Поэтому разные горутины, вызывающие одну и ту же функцию, но по разным адресам, не будут
не будут синхронизированы.

API для атомиков выглядит следующим образом:

    func AddInt32(addr *int32, delta int32) (new int32)
    func AddInt64(addr *int64, delta int64) (new int64)
    func AddUint32(addr *uint32, delta uint32) (new uint32)
    func AddUint64(addr *uint64, delta uint64) (new uint64)
    func AddUintptr(addr *uintptr, delta uintptr) (new uintptr)

    func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool)
    func CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool)
    func CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)
    func CompareAndSwapUint32(addr *uint32, old, new uint32) (swapped bool)
    func CompareAndSwapUint64(addr *uint64, old, new uint64) (swapped bool)
    func CompareAndSwapUintptr(addr *uintptr, old, new uintptr) (swapped bool)

    func LoadInt32(addr *int32) (val int32)
    func LoadInt64(addr *int64) (val int64)
    func LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)
    func LoadUint32(addr *uint32) (val uint32)
    func LoadUint64(addr *uint64) (val uint64)
    func LoadUintptr(addr *uintptr) (val uintptr)

    func StoreInt32(addr *int32, val int32)
    func StoreInt64(addr *int64, val int64)
    func StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)
    func StoreUint32(addr *uint32, val uint32)
    func StoreUint64(addr *uint64, val uint64)
    func StoreUintptr(addr *uintptr, val uintptr)

    func SwapInt32(addr *int32, new int32) (old int32)
    func SwapInt64(addr *int64, new int64) (old int64)
    func SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer)
    func SwapUint32(addr *uint32, new uint32) (old uint32)
    func SwapUint64(addr *uint64, new uint64) (old uint64)
    func SwapUintptr(addr *uintptr, new uintptr) (old uintptr)

    type Value
        func (v *Value) Load() (x interface{})
        func (v *Value) Store(x interface{})

Вы можете видеть, что первый параметр всегда является адресом к точному целому числу или указателем. Существует также тип Value, который предоставляет синхронное
значение с небольшим API.

** Мьютексы

Что если вы хотите сохранить три строки кода, которые у вас были. Тогда атомики не будут работать. Тогда вам нужен мьютекс. Мьютекс позволяет мне заблокировать группу кода так, чтобы только одна
горутина в одно время могла выполнять этот код.

    var counter int

    func main() {
        const grs = 2

        var wg sync.WaitGroup
        wg.Add(grs)

        var mu sync.Mutex                    <-- CHANGED

        for g := 0; g < grs; g++ {
            go func() {
                for i := 0; i < 2; i++ {
                    mu.Lock()                <-- CHANGED
                    {
                        value := counter
                        value++
                        counter = value
                    }
                    mu.Unlock()              <-- CHANGED
                }
                wg.Done()
            }()
        }

        wg.Wait()
        fmt.Println("Counter:", counter)
    }

В этом коде есть несколько изменений по сравнению с оригиналом. Вы добавили конструкцию
переменной `mu` в качестве мьютекса, установленного на нулевое значение. Затем внутри цикла `for`,
вы добавили вызовы `Lock` и `Unlock` с искусственным блоком кода. Внутри этого блока находится код, который необходимо синхронизировать. Блок используется для удобства чтения.

С таким кодом планировщик позволит только одной горутине войти в
в кодовый блок за один раз. Важно понимать, что мьютекс - это не очередь.
Первая горутина, вызвавшая `Lock``, не обязательно будет первой горутиной, получившей
блокировку. Существует алгоритм, основанный на справедливости, но это сделано специально, чтобы люди
не использовали мьютексы как очереди.

Важно помнить, что блокировка создает обратное давление, поэтому чем больше времени пройдет
от блокировки до разблокировки, тем больше шансов, что горутины дождутся своей очереди.
Если вы забудете вызвать Unlock, то все ожидающие горутины окажутся заблокированы (deadlock). Вот почему
важно, чтобы вызов `Lock` и `Unlock` происходил в одной и той же функции. Убедитесь, что вы  делаете минимальную синхронизацию.

Это очень плохой код, в котором кто-то пытается войти и выйти из `Lock` так быстро,
что фактически теряет синхронизацию, а детектор гонок даже не может обнаружить проблему.

    var counter int

    func main() {
        const grs = 2

        var wg sync.WaitGroup
        wg.Add(grs)

        var mu sync.Mutex

        for g := 0; g < grs; g++ {
            go func() {
                for i := 0; i < 2; i++ {
                    var value int
                    mu.Lock()              <-- Bad Use Of Mutex
                    {
                        value = counter
                    }
                    mu.Unlock()

                    value++

                    mu.Lock()              <-- Bad Use Of Mutex
                    {
                        counter = value
                    }
                    mu.Unlock()
                }
                wg.Done()
            }()
        }

        wg.Wait()
        fmt.Println("Counter:", counter)
    }

В качестве общего правила, если вы видите вызов `Lock` из одного и того же мьютекса дважды в одной и той же
функции, остановите просмотр кода. Вероятно, это ошибка или чрезмерное усложнение. В
данном случае вызовы чтения и записи синхронизируются, однако две горутины
могут оказаться в строке кода `value++` с одним и тем же значением. Состояния гонки данных по-прежнему существуют
и детектор гонок бессилен ее обнаружить.

** Мьютексы чтения/записи

Существует второй тип мьютексов, называемый мьютексом чтения/записи. Он позволяет разделить
блокировки на чтение и запись. Это важно, поскольку чтение данных не представляет
угрозы, если только горутина не пытается писать в то же самое время. Таким образом, этот тип
мьютекса позволяет нескольким горутинам читать одну и ту же память одновременно. Как только
запрашивается блокировка записи, чтение больше не производится, происходит запись,
и чтение может начаться снова.

    package main

    import (
        "fmt"
        "math/rand"
        "sync"
        "time"
    )

    var data []string
    var rwMutex sync.RWMutex

    func main() {
        var wg sync.WaitGroup
        wg.Add(1)

        go func() {
            for i := 0; i < 10; i++ {
                writer(i)
            }
            wg.Done()
        }()

        for i := 0; i < 8; i++ {
            go func(id int) {
                for {
                    reader(id)
                }
            }(i)
        }

        wg.Wait()
        fmt.Println("Program Complete")
    }

    func writer(i int) {
        rwMutex.Lock()
        {
            time.Sleep(time.Duration(rand.Intn(100)) * time.Millisecond)
            fmt.Println("****> : Performing Write")
            data = append(data, fmt.Sprintf("String: %d", i))
        }
        rwMutex.Unlock()
    }

    func reader(id int) {
        rwMutex.RLock()
        {
            time.Sleep(time.Duration(rand.Intn(10)) * time.Millisecond)
            fmt.Printf("%d : Performing Read : Length[%d]\n", id, len(data))
        }
        rwMutex.RUnlock()
    }

Вы можете увидеть использование мьютекса для чтения/записи, когда 8 горутин читают длину
фрагмента с задержкой в 10 миллисекунд друг от друга, и 1 горутина просыпается
в течение 100 миллисекунд, чтобы добавить значение (запись) к слайсу.

Ключевым моментом является реализация функций записи и чтения. Обратите внимание, как вы используете
`Lock` для писателя и `RLock` для читателя. Одна из самых больших ошибок, которую вы можете
это перепутать вызовы `Unlock` с неправильной версией. Наличие `Lock`
с `RUnlock` ничем хорошим не закончится.

    7 : Performing Read : Length[0]
    5 : Performing Read : Length[0]
    0 : Performing Read : Length[0]
    3 : Performing Read : Length[0]
    7 : Performing Read : Length[0]
    2 : Performing Read : Length[0]
    1 : Performing Read : Length[0]
    ****> : Performing Write
    0 : Performing Read : Length[1]
    5 : Performing Read : Length[1]
    3 : Performing Read : Length[1]
    6 : Performing Read : Length[1]
    7 : Performing Read : Length[1]
    4 : Performing Read : Length[1]
    1 : Performing Read : Length[1]
    2 : Performing Read : Length[1]
    ****> : Performing Write
    7 : Performing Read : Length[2]
    1 : Performing Read : Length[2]
    3 : Performing Read : Length[2]

Ниже показано, как несколько горутин читают одновременно, но все
чтение останавливается, когда происходит запись.

** Примечания

- Горутины должны быть скоординированы и синхронизированы.
- Когда две или более горутины пытаются получить доступ к одному и тому же ресурсу, мы имеем дело с гонкой данных.
- Атомарные функции и мьютексы могут обеспечить необходимую поддержку.

** Когерентность кэша и ложное совместное использование

Этот контент предоставлен Скоттом Мейерсом из его выступления на Dive в 2014 году:

[[https://youtu.be/WDIkqP4JbkE?t=1809][CPU Caches and Why You Care (30:09-38:30)]]  
[[https://github.com/ardanlabs/gotraining/blob/master/topics/go/testing/benchmarks/falseshare/README.md][Code Example]]

.image /tour/eng/static/img/figure1_data_race.png

** Заметки о когерентности кэш-памяти и ложном совместном использовании

- Доступ к потоковой памяти имеет значение.
- Если ваш алгоритм не масштабируется, ищите проблемы с ложным разделением.

** Дополнительное чтение

- [[http://www.drdobbs.com/parallel/eliminate-false-sharing/217500206][Eliminate False Sharing]] - Херб Саттер    
- [[https://golang.org/ref/mem][Модель памяти Go]]    
- [[http://blog.golang.org/race-detector][Introducing the Go Race Detector]] - Дмитрий Вьюков и Эндрю Герранд    
- [[https://www.ardanlabs.com/blog/2013/09/detecting-race-conditions-with-go.html][Detecting Race Conditions With Go]] - Уильям Кеннеди    
- [[https://golang.org/doc/articles/race_detector.html][Детектор состояний гонки данных]]    

* Упражнения

Используйте шаблон в качестве отправной точки для выполнения упражнений. Приведены возможные решения.

** Упражнение 1

В данной программе с помощью детектора гонок найдите и исправьте гонку данных.

.play data_race/exercise1.go
.play data_race/answer1.go
