Ограничения на срезы
Бывают случаи, когда необходимо ограничить дженерик тип только срезом.

* Дженерики - ограничения на срезы

Бывают случаи, когда необходимо ограничить дженерик тип только срезом.

** Видео

Посмотрите доклад о дженериках, в котором я рассказываю обо всех
примерах, приведенных в этом разделе.

.html generics-video.html

** Обзор кода

- *Пример* *1*: Функция оперирования

.play generics/slice-constraints/example1.go

** Объяснение

Здесь пользовательский тип `Numbers` имеет базовый тип, который является срезом целых чисел.

    type Numbers []int

Компилятор позволяет преобразовывать переменные, основанные на срезе целых чисел
с переменными типа `Numbers`. Как правило, это хорошо, и это то, что вам нужно.
Благодаря этой функциональности вы можете написать дженерик функцию, которая может работать 
со срезом с соблюдением базового типа.

    type operateFunc[T any] func(t T) T

    func operate[T any](slice []T, fn operateFunc[T]) []T {
        ret := make([]T, len(slice))
            for i, v := range slice {
            ret[i] = fn(v)
        }
        
        return ret
    }

Здесь функция `operate` объявляет дженерик `T`, который может быть чем угодно. Тип
используется для объявления параметра с именем `slice`, который принимает срез того же типа `T`.
Функция также принимает дженерик функцию того же типа T и возвращает срез T.

    type Numbers []int
    
    func Double(n Numbers) Numbers {
        fn := func(n int) int {
            return 2 * n
        }
    
        numbers := operate(n, fn)
        fmt.Printf("%T", numbers)
        return numbers
    }

Output:

    []int

Функция `Double` принимает значение типа `Numbers` и передает его в функцию
`operate`. В этом случае компилятор использует базовый тип in для типа
`T` и значение `Numbers` может быть передано в функцию. Однако, возвращаемое значение имеет тип ` []int`, как видно из вывода.

Если вам нужно убедиться, что в функцию может быть передано и возвращено только значение типа `Numbers`
функцией `operate`, вы можете сделать следующие изменения.

    type Slice[T any] interface {
        ~ []T
    }

Этот интерфейс позволяет ограничить дженерик фактическим срезом
некоторого типа T. Использование элемента аппроксимации ~ ограничивает все типы, в которых
базовым типом  является T. С помощью этого интерфейса вы можете изменить функцию `operate`.

    type operateFunc[T any] func(t T) T
    type Slice[T any] interface {
        ~ []T
    }

    // func operate[T any](slice []T, fn operateFunc[T]) []T {
    //     ret := make([]T, len(slice))
    //     for i, v := range slice {
    //         ret[i] = fn(v)
    //     }
    //     return ret
    // }

    func operate[S Slice[T], T any](slice S, fn operateFunc[T]) S {
        ret := make(S, len(slice))
        for i, v := range slice {
            ret[i] = fn(v)
        }
        
        return ret
    }

Теперь измените функцию `operate`, чтобы объявить два дженерика. Тип S, который представляет
значение среза некоторого типа T, и T, который может быть чем угодно. Функция
возвращает значение типа S.

    type Numbers []int
    
    func Double(n Numbers) Numbers {
        fn := func(n int) int {
            return 2 * n
        }
    
        numbers := operate(n, fn)
        fmt.Printf("%T", numbers)
        
        return numbers
    }

Output:

    main.Numbers

На этот раз, когда вы передаете значение `Numbers` в функцию `operate`, срез, который возвращается, имеет тип `Numbers`.
Базовый тип игнорируется и принимается пользовательский тип.
