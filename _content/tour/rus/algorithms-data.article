Структуры данных
В этом разделе приведены примеры структур данных.

* Хеш-карта

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Посмотреть видео]]
- Если нужна финансовая поддержка, используйте нашу [[https://www.ardanlabs.com/scholarship/][форму заявки на стипендию]].

Данный пример программы реализует базовую хеш-таблицу.

- `hashKey(key)` возвращает число от 0 до `len(buckets)-1`.

- Мы используем фрагмент записей в качестве корзины для обработки случаев, когда два или более ключей
  хешируются в одной ячейке

- См. подробнее на [[https://en.wikipedia.org/wiki/Hash_table][https://en.wikipedia.org/wiki/Hash_table]].

*Диаграмма*

    В хеш-карте данные индексируются по ячейке, а затем по позиции
    внутри ячейки.

    hashKey(key) ──────────────┐
                               │
                               ▽
     ┌────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐
     │    │     │     │     │     │     │     │     │  ◁── bucket
     └────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘
             │                 │
             ▽                 ▽
       ┌─────────────┐   ┌─────────────┐
       │ key │ value │   │ key │ value │  ◁── entry
       ├─────────────┤   ├─────────────┤
       │ key │ value │   │ key │ value │
       ├─────────────┤   └─────────────┘
       │ key │ value │
       ├─────────────┤
       │ key │ value │
       ├─────────────┤
       │ key │ value │
       └─────────────┘

.play algorithms/data/hash_map.go

* Связанный список

Данный пример программы реализует базовый дважды связанный список.

- Подробнее см. на [[https://en.wikipedia.org/wiki/Linked_list][https://en.wikipedia.org/wiki/Linked_list]].

*Диаграмма*

    В связанном списке значения связываются в различном
    порядке с помощью указателей.

    ┌─────┐     ┌─────┐     ┌─────┐     ┌─────┐     ┌─────┐
    │ Val │ ◁─▷ │ Val │ ◁─▷ │ Val │ ◁─▷ │ Val │ ◁─▷ │ Val │
    └─────┘     └─────┘     └─────┘     └─────┘     └─────┘
       △                                               △
       │                                               │
       ────────────────────        ─────────────────────
                          │        │
                          │        │
                       ┌───────────────┐
                       │ First │  Last │
                       └───────────────┘

.play algorithms/data/list.go

* Очередь

Данный пример программы реализует базовую кольцевую очередь.

- См. подробнее на сайте [[https://en.wikipedia.org/wiki/Queue_(abstract_data_type)]][https://en.wikipedia.org/wiki/Queue_(abstract_data_type)]].

*Диаграмма*

    В очереди первое входящее значение является первым выходящим значением.

               ┌──────────────────────────────────────────┐
    ┌─────┐    │ ┌─────┐    ┌─────┐    ┌─────┐    ┌─────┐ │    ┌─────┐
    │ V06 │ ─▷ │ │ V05 │ ─▷ │ V04 │ ─▷ │ V03 │ ─▷ │ V02 │ │ ─▷ │ V01 │
    └─────┘    | └─────┘    └─────┘    └─────┘    └─────┘ |    └─────┘
               └──────────────────────────────────────────┘

.play algorithms/data/queue_circular.go

* Стек

Данный пример программы реализует базовый стек.

- См. подробнее на [[https://en.wikipedia.org/wiki/Stack_(abstract_data_type)]][https://en.wikipedia.org/wiki/Stack_(abstract_data_type)]].

*Диаграмма*

    В стеке первое входящее значение является последним выходящим значением.

           ┌─────┐
           │ V05 │
           └─────┘
              │
              ▽          ┌─────┐
        ┌───────────┐ ─▷ │ V04 │
        │  ┌─────┐  │    └─────┘
        │  │ V03 │  │
        │  └─────┘  │
        │  ┌─────┐  │
        │  │ V02 │  │
        │  └─────┘  │
        │  ┌─────┐  │
        │  │ V01 │  │
        │  └─────┘  │
        └───────────┘

.play algorithms/data/stack.go


Данный пример программы реализует базовое двоичное (бинарное) дерево.

- Подробнее см. на [[https://en.wikipedia.org/wiki/Binary_tree][https://en.wikipedia.org/wiki/Binary_tree]].

*Диаграмма*

    В двоичном дереве данные индексируются либо в левой, либо в правой
    стороне дерева. При добавлении каждого узла дерево остаёться
    сбалансированным.

      0     1     2     3     4     5     6    ◁─ Порядок ввода
    ┌────┐┌────┐┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 65 ││ 45 ││ 35 ││ 75 ││ 85 ││ 78 ││ 95 │
    └────┘└────┘└────┘└────┘└────┘└────┘└────┘

                   ┌────┐
                   │ 75 │                      ◁─ Итоговое дерево
                   └────┘
                 /        \
           ┌────┐          ┌────┐
           │ 45 │          │ 85 │
           └────┘          └────┘
           /    \          /    \
       ┌────┐  ┌────┐  ┌────┐  ┌────┐
       │ 35 │  │ 65 │  │ 78 │  │ 95 │
       └────┘  └────┘  └────┘  └────┘

.play algorithms/data/tree_binary.go
