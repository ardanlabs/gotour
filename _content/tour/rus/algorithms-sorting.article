Операции сортировки
В этом разделе представлены примеры выполнения операций сортировки.

* Пузырьковая сортировка

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Посмотреть видео]]
- Если нужна финансовая поддержка, используйте нашу [[https://www.ardanlabs.com/scholarship/][форму заявки на стипендию]]

Данный пример программы реализует функцию, которая выполняет пузырьковую сортировку
для набора целых чисел.

- См. подробнее на [[https://en.wikipedia.org/wiki/Bubble_sort][https://en.wikipedia.org/wiki/Bubble_sort]]

*Диаграмма*

    Пузырьковая сортировка - это простой алгоритм сортировки, который многократно просматривает
    входной список элемент за элементом, сравнивая текущий элемент с тем, который находится
    после него, при необходимости меняя их значения местами.

    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Начальный массив
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 10 ││ 05 ││ 25 ││ 15 ││ 30 │ ◁── После первой итерации
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 05 ││ 10 ││ 15 ││ 25 ││ 30 │ ◁── После второй итерации / Отсортировано
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/bubble.go

Данный пример программы реализует функцию, которая выполняет сортировку вставкой
для набора целых чисел.

- См. подробнее на [[https://en.wikipedia.org/wiki/Insertion_sort]]

*Диаграмма*.

    Сортировка вставкой выполняет итерацию столько раз, сколько составляет длина массива
    минус один. Для массива из 5 чисел сортировка выполнит итерацию
    4 раза. Начиная с индекса 1, сортировка перемещает это число в
    влево, помещая его в отсортированную позицию.

    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Начальный массив
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Перемещение [1]=30 влево
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── После первой итерации
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Перемещение [2]=05 влево
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── После второй итерации
    │ 05 ││ 10 ││ 30 ││ 25 ││ 15 │ ◁── Перемещение [3]=25 влево
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── После третьей итерации
    │ 05 ││ 10 ││ 25 ││ 30 ││ 15 │ ◁── Перемещение [4]=15 влево
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── После четвертой итерации
    │ 05 ││ 10 ││ 15 ││ 25 ││ 30 │ ◁── Отсортировано
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/insertion.go

* Пирамидальная сортировка (сортировка кучей)

Данный пример программы реализует функцию, выполняющую пирамидальную сортировку
для набора целых чисел.

- См. подробнее на [[https://en.wikipedia.org/wiki/Heapsort][https://en.wikipedia.org/wiki/Heapsort]]

*Диаграмма*.

Пирамидальная сортировка делит входные данные на отсортированный и неотсортированный массив. Алгоритм
итеративно сокращает неотсортированную область, извлекая из нее самый большой
элемент и вставляет его в отсортированный массив. Алгоритм выполняется
в две фазы.

    Фаза I  
    Разделите список пополам и работайте с первой половиной списка, перемещая
    наибольшее найденное значение в начало списка, а затем
    второе по величине.

    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Начальный массив
    │ 63 ││ 16 │ | │ 40 ││ 71 ││ 73 │ ◁── Проверка [1]=16 < [4]=73 : Поменять местами
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── После первой итерации
    │ 63 ││ 73 │ | │ 40 ││ 71 ││ 16 │ ◁── Проверка [0]=63 < [3]=71 : Поменять местами
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── После второй итерации
    │ 73 ││ 71 │ | │ 40 ││ 63 ││ 16 │ ◁── Фаза I завершена
    └────┘└────┘ | └────┘└────┘└────┘

    Фаза II  
    Возьмите список и начните перемещать его числа в новый
    список. Возьмите число в первой позиции и удалите его в
    новый список, в котором будет содержаться окончательная сортировка. Затем переместите самое большое
    число, которое мы нашли, снова в начало списка.

    ┌────┐┌────┐┌────┐┌────┐┌────┐ |  ◁── Начальный массив
    │ 73 ││ 71 ││ 40 ││ 63 ││ 16 │ |
    └────┘└────┘└────┘└────┘└────┘ |
    ┌────┐┌────┐┌────┐┌────┐ | ┌────┐ ◁── После первой итерации
    │ 71 ││ 63 ││ 40 ││ 16 │ | │ 73 │ ◁── Переместите 73 наружу и 71 вперед
    └────┘└────┘└────┘└────┘ | └────┘
    ┌────┐┌────┐┌────┐ | ┌────┐┌────┐ ◁── После второй итерации
    │ 63 ││ 16 ││ 40 │ | │ 71 ││ 73 │ ◁── Переместить 71 наружу и 63 вперед
    └────┘└────┘└────┘ | └────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── После третьей итерации
    │ 40 ││ 16 │ | │ 63 ││ 71 ││ 73 │ ◁── Переместите 63 наружу и 40 вперед
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐ | ┌────┐┌────┐┌────┐┌────┐ ◁── После четвертой итерации
    │ 16 │ | │ 40 ││ 63 ││ 71 ││ 73 │ ◁── Переместите 40 наружу и 16 вперед
    └────┘ | └────┘└────┘└────┘└────┘
     | ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── После пятой итерации
     | │ 16 ││ 40 ││ 63 ││ 71 ││ 73 │ ◁── Переместить 16 из / Отсортировано
     | └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/heap.go

* Быстрая сортировка

Данный пример программы реализует функцию, выполняющую быструю сортировку
по набору целых чисел.

- См. подробнее на [[https://en.wikipedia.org/wiki/Quicksort][https://en.wikipedia.org/wiki/Quicksort]]

*Диаграмма*.

    Быстрая сортировка - это алгоритм "разделяй и властвуй". Он работает путем выбора
    центральный элемент из массива и разбивает остальные элементы
    на два подмассива в зависимости от того, меньше они или больше. 

    -------------------------------------------------------------------
    Пример 1

    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Начальный массив
    │ 45 ││ 39 ││ 37 ││ 15 ││ 41 │ ◁── Значение изменения направления 41
    └────┘└────┘└────┘└────┘└────┘ ◁── Сортировка элементов 0 - 4
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 39 ││ 37 ││ 15 ││ 41 ││ 45 │ ◁── Первая Сортировка Завершена
    └────┘└────┘└────┘└────┘└────┘

    Последние два элемента отсортированы, фокус на первых трех.

    ┌────┐┌────┐┌────┐
    │ 39 ││ 37 ││ 15 │ ◁── Значение изменения направления 15
    └────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 15 ││ 37 ││ 39 ││ 41 ││ 45 │ ◁── Сортировка Завершена
    └────┘└────┘└────┘└────┘└────┘

    -------------------------------------------------------------------
    Пример 2
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Начальный массив
    │ 34 ││ 55 ││ 59 ││ 73 ││ 09 │ ◁── Значение изменения направления 09
    └────┘└────┘└────┘└────┘└────┘ ◁── Сортировка элементов 0 - 4
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 55 ││ 59 ││ 73 ││ 34 │ ◁── Первая Сортировка Завершена
    └────┘└────┘└────┘└────┘└────┘

    Первый элемент отсортирован, фокус на последних четырех..

    ┌────┐┌────┐┌────┐┌────┐
    │ 55 ││ 59 ││ 73 ││ 34 │ ◁── Значение изменения направления 34
    └────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 59 ││ 73 ││ 55 │ ◁── Вторая сортировка завершена
    └────┘└────┘└────┘└────┘└────┘

     Первые два элемента отсортированы, фокус на последних трех.

    ┌────┐┌────┐┌────┐
    │ 59 ││ 73 ││ 55 │ ◁── Значение изменения направления 55
    └────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 55 ││ 73 ││ 59 │ ◁── Третья сортировка завершена
    └────┘└────┘└────┘└────┘└────┘

    Первый элемент отсортирован, фокус на двух последних.

    ┌────┐┌────┐ ◁── Значение изменения направления 59
    │ 73 ││ 59 │ ◁── Третья сортировка завершена
    └────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 55 ││ 59 ││ 73 │ ◁── Сортировка Завершена
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/quick.go
