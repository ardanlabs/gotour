Variables
Variables are at the heart of the language and provide the ability to read from and write to memory.

* Variables

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Watch The Video]]
- Need Financial Assistance, Use Our [[https://www.ardanlabs.com/scholarship/][Scholarship Form]]

Variables are at the heart of the language and provide the ability to read from
and write to memory. In Go, access to memory is type safe. This means the compiler
takes type seriously and will not allow us to use variables outside the scope of
how they are declared.

** Code Review

- *Example* *1*: Sample program that shows how to declare variables.

.play variables/example1.go

** Built-in Types
Types provide integrity and readability by asking 2 questions:

- What is the amount of memory to allocate? (e.g. 1, 2, 4, 8 bytes)
- What does that memory represent? (e.g. int, uint, bool,..)

Types can be specific to a precision such as int32 or int64:

- uint8 represents an unsigned integer with 1 byte of allocation
- int32 represents a signed integer with 4 bytes of allocation. When you declare a type
using a non-precision based type (uint, int) the size of the value is based on the
architecture being used to build the program:

- 32 bit arch: int represents a signed int at 4 bytes of memory allocation
- 64 bit arch: int represents a signed int at 8 bytes of memory allocation

** Word Size

The word size represents the amount of memory allocation required to store integers
and pointers for a given architecture. For example:

- 32 bit arch: word size is 4 bytes of memory allocation
- 64 bit arch: word size is 8 bytes of memory allocation

This is important because Go has internal data structures (maps, channels, slices,
interfaces, and functions) that store integers and pointers. The size of these data
structures will be based on the architecture being used to build the program.

In Go, the amount of memory allocated for a value of type int, a pointer, or a word
will always be the same on the same architecture.

** Zero Value Concept
Every single value you construct in Go is initialized at least to its zero value state
unless you specify the initialization value at construction. The zero value is the setting
of every bit in every byte to zero.

This is done for data integrity and it’s not free. It takes time to push electrons
through the machine to reset those bits, but you should always take integrity over
performance.

    Type               Zero Value
    Boolean            false
    Integer            0
    Float              0
    Complex            0i
    String             "" (empty)
    Pointer            nil

** Declare and Initialize
The keyword var can be used to construct values to their zero value state for all types.

    var a int
    var b string
    var c float64
    var d bool

    fmt.Printf("var a int \t %T [%v]\n", a, a)
    fmt.Printf("var b string \t %T [%v]\n", b, b)
    fmt.Printf("var c float64 \t %T [%v]\n", c, c)
    fmt.Printf("var d bool \t %T [%v]\n\n", d, d)

Output:

    var a int    	int [0]
    var b string 	string []
    var c float64	float64 [0]
    var d bool   	bool [false]

Strings use the UTF8 character set, but are really just a collection of bytes.

A string is a two-word internal data structure in Go:

- The first word represents a pointer to a backing array of bytes
- The second word represents the length or the number of bytes in the backing array
- If the string is set to its zero value state, then the first word is nil and the
second word is 0.

Using the short variable declaration operator, you can declare, construct, and
initialize a value all at the same time.

    aa := 10       // int [10]
    bb := "hello"  // string [hello]
    cc := 3.14159  // float64 [3.14159]
    dd := true     // bool [true]

    fmt.Printf("aa := 10 \t %T [%v]\n", aa, aa)
    fmt.Printf("bb := \"hello\" \t %T [%v]\n", bb, bb)
    fmt.Printf("cc := 3.14159 \t %T [%v]\n", cc, cc)
    fmt.Printf("dd := true \t %T [%v]\n\n", dd, dd)

Output:

    aa := 10         int [10]
    bb := "hello"    string [hello]
    cc := 3.14159    float64 [3.14159]
    dd := true       bool [true]

** Conversion vs Casting

Go doesn't have casting, but conversion. Instead of telling the compiler to map a
set of bytes to a different representation, the bytes need to be copied to a new
memory location for the new representation.

    aaa := int32(10)
    fmt.Printf("aaa := int32(10) %T [%v]\n", aaa, aaa)

    Output:
    aaa := int32(10) int32 [10]

Go does have a package in the standard library called unsafe if you need to perform
an actual casting operation. You should really avoid that and be honest with yourself
why you are considering using it. Performing a conversion provides the highest level
of integrity for these types of operations.

** Notes

- The purpose of all programs and all parts of those programs is to transform data from one form to the other.
- Code primarily allocates, reads and writes to memory.
- Understanding type is crucial to writing good code and understanding code.
- If you don't understand the data, you don't understand the problem.
- You understand the problem better by understanding the data.
- When variables are being declared to their zero value, use the keyword var.
- When variables are being declared and initialized, use the short variable declaration operator.

** Extra Reading

- [[https://golang.org/ref/spec#Boolean_types][Built-In Types]]
- [[https://golang.org/doc/effective_go.html#variables][Variables]]
- [[https://www.ardanlabs.com/blog/2013/08/gustavos-ieee-754-brain-teaser.html][Gustavo's IEEE-754 Brain Teaser]] - William Kennedy
- [[https://www.youtube.com/watch?v=sFUSP8Au_PE][What's in a name]]
- [[http://arcanesentiment.blogspot.com/2015/01/a-brief-history-of-type.html][A brief history of “type”]] - Arcane Sentiment

* Exercises

Use the template as a starting point to complete the exercises. A possible solution is provided.

** Exercise 1

*Part* *A:* Declare three variables that are initialized to their zero value and
three declared with a literal value. Declare variables of type string, int and bool.
Display the values of those variables.

*Part* *B:* Declare a new variable of type float32 and initialize the variable by
converting the literal value of Pi (3.14).

.play variables/exercise1.go
.play variables/answer1.go
