Methods
A function is called a method when that function has a receiver declared.

* Methods

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Watch The Video]]
- Need Financial Assistance, Use Our [[https://www.ardanlabs.com/scholarship/][Scholarship Form]]

A function is called a method when that function has a receiver declared. The
receiver is the parameter that is declared between the keyword func and the
function name.

** Code Review

- *Example* *1:* Declare and receiver behavior
- *Example* *2:* Named typed methods
- *Example* *3:* Function/Method variables
- *Example* *4:* Function Types
- *Example* *5:* Value and Pointer semantics

.play methods/example1.go
.play methods/example2.go
.play methods/example3.go
.play methods/example4.go
.play methods/example5.go

** Method Declarations

There are two types of receivers, value receivers for implementing value semantics
and pointer receivers for implementing pointer semantics.

    type user struct {
        name  string
        email string
    }

    func (u user) notify() {
        fmt.Printf("Sending User Email To %s<%s>\n", u.name, u.email)
    }

    func (u *user) changeEmail(email string) {
        u.email = email
        fmt.Printf("Changed User Email To %s\n", email)
    }

The notify function is implemented with a value receiver. This means the method
operates under value semantics and will operate on its own copy of the value used
to make the call.

The changeEmail function is implemented with a pointer receiver. This means the
method operates under pointer semantics and will operate on shared access to the
value used to make the call.

Outside of a few exceptions, a method set for a type should not contain a mix of
value and pointer receivers. Data semantic consistency is critically important
and this includes declaring methods.

** Method Calls

When making a method call, the compiler doesn’t care if the value used to make
the call matches the receiver’s data semantics exactly. The compiler just wants
a value or pointer of the same type.

    bill := user{"Bill", "bill@email.com"}
    bill.notify()
    bill.changeEmail("bill@hotmail.com")

You can see that a value of type user is constructed and assigned to the bill
variable. In the case of the notify call, the bill variable matches the receiver
type which is using a value receiver. In the case of the changeEmail call, the
bill variable doesn’t match the receiver type which is using a pointer receiver.
However, the compiler accepts the method call and shares the bill variable with
the method. Go will adjust to make the call.

This works the same when the variable used to make the call is a pointer variable.

    bill := &user{"Bill", "bill@email.com"}
    bill.notify()
    bill.changeEmail("bill@hotmail.com")

In this case, the bill variable is a pointer variable to a value of type user.
Once again, Go adjusts to make the method call when calling the notify method.

If Go didn’t adjust, then this is what you would have to do to make those same method calls. 

    bill := user{"Bill", "bill@email.com"}
    (&bill).changeEmail("bill@hotmail.com")

    bill := &user{"Bill", "bill@email.com"}
    (*bill).notify()

I’m glad you don’t have to do that to make method calls in Go.

** Data Semantic Guideline For Internal Types

As a guideline, if the data I’m working with is an internal type (slice, map,
channel, function, interface) then use value semantics to move the data around
the program. This includes declaring fields on a type. However, when I’m reading
and writing you need to remember I’m using pointer semantics.

    type IP []byte
    type IPMask []byte

These types are declared in the net package that is part of the standard library.
They are declared with an underlying type which is a slice of bytes. Because of
this, these types follow the guidelines for internal types.

    func (ip IP) Mask(mask IPMask) IP {
        if len(mask) == IPv6len && len(ip) == IPv4len && allFF(mask[:12]) {
            mask = mask[12:]
        }
        if len(mask) == IPv4len && len(ip) == IPv6len &&
            bytesEqual(ip[:12], v4InV6Prefix) {
            ip = ip[12:]
        }
        n := len(ip)
        if n != len(mask) {
            return nil
        }
        out := make(IP, n)
        for i := 0; i < n; i++ {
            out[i] = ip[i] & mask[i]
        }
        return out
    }

With the Mask method, value semantics are in play for both the receiver, parameter,
and return argument. This method accepts its own copy of a Mask value, it mutates
that value and then it returns a copy of the mutation. This method is using value
semantic mutation. This is not an accident or random.

A function can decide what data input and output it needs. What it can’t decide
is the data semantics for how the data flows in or out. The data drives that
decision and the function must comply. This is why Mask implements a value semantic
mutation api. It must respect how a slice is designed to be moved around the program.

    func ipEmptyString(ip IP) string {
        if len(ip) == 0 {
            return ""
        }
        return ip.String()
    }

The `ipEmptyString` function is also using value semantics for the input and output.
This function accepts its own copy of an IP value and returns a string value. No
use of pointer semantics because the data dictates the data semantics and not the
function.

One exception to using value semantics is when you need to share a slice or map
with a function that performs unmarshalling or decoding.

** Data Semantic Guideline For Struct Types

As a guideline, if the data I’m working with is a struct type then you have to
think about what the data represents to make a decision. A good general rule is
to ask if the struct represents data or an API. If the struct represents data, use
value semantics. If the struct represents an API, use pointer semantics.

    type Time struct {
        sec  int64
        nsec int32
        loc  *Location
    }

Here is the Time struct from the time package. If you consider Time to represents
data, value semantics should be used for this struct.

When looking at an existing code base and you want to know what data semantic was
chosen, look for a factory function. The return type of a factory function should
dictate the data semantic chosen by the developer.

    func Now() Time {
        sec, nsec := now()
        return Time{sec + unixToInternal, nsec, Local}
    }

Now is the factory function for constructing Time values. Look at the return,
it’s using value semantics. This tells you that you should be using value semantics
for Time values which means every function gets its own copy of a Time value and
fields in a struct should be declared as values of type Time.

    func (t Time) Add(d Duration) Time {
        t.sec += int64(d / 1e9)
        nsec := int32(t.nsec) + int32(d%1e9)
        if nsec >= 1e9 {
            t.sec++
            nsec -= 1e9
        } else if nsec < 0 {
            t.sec--
            nsec += 1e9
        }
        t.nsec = nsec
        return t
    }

Add is a method that needs to perform a mutation operation. If you look closely,
you will see the function is using value semantic mutation. The Add method gets its
own copy of the Time value used to make the call, it mutates its own copy, then it
returns a copy back to the caller. Once again, this is the safest way to perform a
mutation operation.

    func div(t Time, d Duration) (qmod2 int, r Duration) {}

Here is another example where the div function accepts a value of type Time and
Duration (int64), then returns values of type int and Duration. Value semantics
for the Time type and for all the built-in types. Duration has an underlying type
of int64.

    func (t *Time) UnmarshalBinary(data []byte) error {}
    func (t *Time) GobDecode(data []byte) error {}
    func (t *Time) UnmarshalJSON(data []byte) error {}
    func (t *Time) UnmarshalText(data []byte) error {}

These four methods from the Time package seem to break the rules for data semantic
consistency. They are using pointer semantics, why? Because they are implementing
an interface where the method signature is locked in. Since the implementation
requires a mutation, pointer semantics are the only choice.

Here is a guideline: If value semantics are at play, you can switch to pointer
semantics for some functions as long as you don’t let the data in the remaining
call chain switch back to value semantics. Once you switch to pointer semantics,
all future calls from that point need to stick to pointer semantics. You can never,
ever, never, go from pointer to value. It’s never safe to make a copy of a value
that a pointer points to.

    func Open(name string) (file *File, err error) {
        return OpenFile(name, O_RDONLY, 0)
    }

The Open function from the os package shows that when using a value of type File,
pointer semantics are at play. File values need to be shared and should never be
copied.

    func (f *File) Chdir() error {
        if f == nil {
            return ErrInvalid
        }
        if e := syscall.Fchdir(f.fd); e != nil {
            return &PathError{"chdir", f.name, e}
        }
        return nil
    }

The method Chdir is using a pointer receiver even though this method does not
mutate the File value. This is because File values need to be shared and can’t
be copied.

    func epipecheck(file *File, e error) {
        if e == syscall.EPIPE {
            if atomic.AddInt32(&file.nepipe, 1) >= 10 {
                sigpipe()
            }
        } else {
            atomic.StoreInt32(&file.nepipe, 0)
        }
    }

The epipecheck function as well accepts File values using pointer semantics.

** Methods Are Just Functions

Methods are really just functions that provide syntactic sugar to provide the
ability for data to exhibit behavior.

    type data struct {
        name string
        age  int
    }

    func (d data) displayName() {
        fmt.Println("My Name Is", d.name)
    }

    func (d *data) setAge(age int) {
        d.age = age
        fmt.Println(d.name, "Is Age", d.age)
    }

A type and two methods are declared. The displayName method is using value
semantics and setAge is using pointer semantics.

Note: Do not implement setters and getters in Go. These are not apis with purpose
and in these cases it’s better to make those fields exported.
    
    d := data{
        name: "Bill",
    }

    d.displayName()
    d.setAge(21)

A value of type data is constructed and method calls are made.

    data.displayName(d)
    (*data).setAge(&d, 21)

Since methods are really just functions with syntactic sugar, the methods can be
executed like functions. You can see that the receiver is really a parameter, it’s
the first parameter. When you call a method, the compiler converts that to a
function call underneath.

Note: Do not execute methods like this, but you may see this syntax in tooling messages.

** Know The Behavior of the Code

If you know the data semantics at play, then you know the behavior of the code. If
you know the behavior of the code, then you know the cost of the code. Once you
know the cost, I’m engineering.

Given this type and method set.

    type data struct {
        name string
        age  int
    }

    func (d data) displayName() {
        fmt.Println("My Name Is", d.name)
    }

    func (d *data) setAge(age int) {
        d.age = age
        fmt.Println(d.name, "Is Age", d.age)
    }

You can write the following code.

    func main() {
        d := data{
            name: "Bill",
        }

        f1 := d.displayName
        f1()
        d.name = "Joan"
        f1()
    }

Output:

    My Name Is Bill
    My Name Is Bill

You start with constructing a value of type Data assigning it to the variable d.
Then you take the method displayName, bound to d, and assign that to a variable
named f1. This is not a method call but an assignment which creates a level of
indirection. Functions are values in Go and belong to the set of internal types.

After the assignment, you can call the method indirectly through the use of the
f1 variable. This displays the name Bill. Then you change the data so the name
is now Joan, and call the method once again through the f1 variable. You don’t
see the change. Bill is the output once again. So Why?

.image /tour/eng/static/img/m1.png

It has to do with the data semantics at play. The displayName method is using a
value receiver so value semantics are at play.

    func (d data) displayName() {
        fmt.Println("My Name Is", d.name)
    }

This means that the f1 variable maintains and operates against its own copy of d.
So calling the method through the f1 variable, will always use the copy and that
copy is protected against change. This is what you want with value semantics.

Now you will do the same thing but with the setAge method.

    func main() {
        d := data{
            name: "Bill",
        }

        f2 := d.setAge
        f2(45)
        d.name = "Sammy"
        f2(45)
    }

Output:

    Bill Is Age 45
    Sammy Is Age 45

This time the setAge method is assigned to the variable f2. Once again, the
method is executed indirectly through the f2 variable passing 45 for Bill’s age.
Then Bill’s name is changed to Sammy and the f2 variable is used again to make the
call. This time you see the name has changed.

.image /tour/eng/static/img/m2.png

The setAge function is using a pointer receiver so setAge doesn’t operate on its
own copy of the d variable, but is operating directly on the d variable. Therefore,
f2 is operating on shared access and you see the change.

    func (d *data) setAge(age int) {
        d.age = age
        fmt.Println(d.name, "Is Age", d.age)
    }

Without knowing the data semantics at play, you won’t know the behavior of the code.
These data semantics are real and affect the behavior.

** Notes

- Methods are functions that declare a receiver variable.
- Receivers bind a method to a type and can use value or pointer semantics.
- Value semantics mean a copy of the value is passed across program boundaries.
- Pointer semantics mean a copy of the values address is passed across program boundaries.
- Stick to a single semantic for a given type and be consistent.

** Quotes

"Methods are valid when it is practical or reasonable for a piece of data to expose a capability." - William Kennedy

** Extra Reading

- [[https://golang.org/doc/effective_go.html#methods][Methods]]    
- [[https://www.ardanlabs.com/blog/2014/05/methods-interfaces-and-embedded-types.html][Methods, Interfaces and Embedded Types in Go]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2018/01/escape-analysis-flaws.html][Escape-Analysis Flaws]] - William Kennedy  
		 
* Exercises

Use the template as a starting point to complete the exercises. A possible solution is provided.

** Exercise 1

Declare a struct that represents a baseball player. Include name, atBats and hits.
Declare a method that calculates a players batting average. The formula is Hits / AtBats.
Declare a slice of this type and initialize the slice with several players. Iterate
over the slice displaying the players name and batting average.

.play methods/exercise1.go
.play methods/answer1.go
