Slice Constraints
There may be times where you need to constrain the generic type to be only a slice.

* Generics - Slice Constraints

There may be times where you need to constrain the generic type to be only a slice.

** Video

Watch the talk I gave about Generics which walks you through all the
examples in this section of the Tour.

.html generics-video.html

** Code Review

- *Example* *1*: Operate function

.play generics/slice-constraints/example1.go

** Explained

Here the user-defined Numbers type has an underlying type that is a slice of
integers.

    type Numbers []int

The compiler allows you to convert variables based on a slice of integers
with variables of type Numbers. This is usually good and what you want.
Because of this functionality, you can write a generic function that can operate on a
slice respecting the underlying type.

    type operateFunc[T any] func(t T) T

    func operate[T any](slice []T, fn operateFunc[T]) []T {
        ret := make([]T, len(slice))
            for i, v := range slice {
            ret[i] = fn(v)
        }
        
        return ret
    }

Here the operate function declares a generic type T that can be anything. The type
is used to declare a parameter named slice that accepts a slice of that same type T.
The function also accepts a generic function of the same type T and returns a slice
of T as well.

    type Numbers []int
    
    func Double(n Numbers) Numbers {
        fn := func(n int) int {
            return 2 * n
        }
    
        numbers := operate(n, fn)
        fmt.Printf("%T", numbers)
        return numbers
    }

Output:

    []int

The Double function accepts a value of type Numbers and passes that value to the
operate function. In this case, the compiler leverages the underlying type in for type
T and the Numbers value can be passed into the function. However, what is
returned is a slice of type int, as seen in the output.

If you need to make sure that only a Numbers value can be passed in, and is returned
by the operate function, you can make the following changes.

    type Slice[T any] interface {
        ~ []T
    }

This interface declares a constraint to restrict a generic type to an actual slice of
some type T. The use of the approximation element ~ restricts to all types whose
underlying type is T. With this interface, you can change the operate function.

    type operateFunc[T any] func(t T) T
    type Slice[T any] interface {
        ~ []T
    }

    // func operate[T any](slice []T, fn operateFunc[T]) []T {
    //     ret := make([]T, len(slice))
    //     for i, v := range slice {
    //         ret[i] = fn(v)
    //     }
    //     return ret
    // }

    func operate[S Slice[T], T any](slice S, fn operateFunc[T]) S {
        ret := make(S, len(slice))
        for i, v := range slice {
            ret[i] = fn(v)
        }
        
        return ret
    }

Now change the operate function to declare two generic types. Type S which represents
a slice value of some type T, and T which is a type that can be anything. The
function returns a value of type S.

    type Numbers []int
    
    func Double(n Numbers) Numbers {
        fn := func(n int) int {
            return 2 * n
        }
    
        numbers := operate(n, fn)
        fmt.Printf("%T", numbers)
        
        return numbers
    }

Output:

    main.Numbers

This time when you pass the Numbers value into the operate function, the slice that is
returned is of type Numbers. The underlying type is ignored and the user-defined
type is respected.
