Benchmarking
Go has support for testing the performance of your code.

* Benchmarking

Go has support for testing the performance of your code.

* Package Review


- *Basic* *Test:* Basic Benchmarking
.play benchmarks/basic/basic_test.go
  

- *Sub* *Test:* Sub Benchmarks
.play benchmarks/sub/sub_test.go
  

- *Validate* *Test:* Validate Benchmarks
.play benchmarks/validate/validate_test.go
  

[[prediction/README.md][Prediction]]  
[[caching/README.md][Caching]]  
[[caching/README.md][False Sharing]]

Look at the profiling topic to learn more about using benchmarks to [[/tour/profiling][profile]] code.

* Links

- [[https://dave.cheney.net/2013/06/30/how-to-write-benchmarks-in-go][How to write benchmarks in Go]] - Dave Cheney    
- [[https://www.youtube.com/watch?v=xxDZuPEgbBU][Profiling & Optimizing in Go]] - Brad Fitzpatrick    
- [[https://godoc.org/golang.org/x/perf/cmd/benchstat][Benchstat computes and compares statistics about benchmarks]]    
- [[https://speakerdeck.com/mpvl/advanced-testing-concepts-for-go-1-dot-7][Advanced Testing Concepts for Go 1.7]] - Marcel van Lohuizen    

* Exercises


Write three benchmark tests for converting an integer into a string. First use the fmt.Sprintf function, then the strconv.FormatInt function and finally the strconv.Itoa. Identify which function performs the best.


.play benchmarks/exercises/template1/bench_test.go 

* Answer
.play benchmarks/exercises/exercise1/bench_test.go
 
___
All material is licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache License Version 2.0, January 2004]].
