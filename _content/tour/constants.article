Constants
Constants are a way to create a named identifier whose value can never change. They also provide an incredible amount of flexibility to the language. The way constants are implemented in Go is very unique.

* Constants

Constants are a way to create a named identifier whose value can never change. They also provide an incredible amount of flexibility to the language. The way constants are implemented in Go is very unique.

* Notes

- Constants are not variables.
- They exist only at compilation.
- Untyped constants can be implicitly converted where typed constants and variables can't.
- Think of untyped constants as having a Kind, not a Type.
- Learn about explicit and implicit conversions.
- See the power of constants and their use in the standard library.

* Links

- [[https://golang.org/ref/spec#Constants][Constants specification]]    
- [[https://blog.golang.org/constants][Constants]] - Rob Pike    
- [[https://www.ardanlabs.com/blog/2014/04/introduction-to-numeric-constants-in-go.html][Introduction To Numeric Constants In Go]] - William Kennedy    

* Code Review


- *Example* *1:* Declare and initialize constants
.play constants/example1/example1.go
		
- *Example* *2:* Parallel type system (Kind) (missing)

- *Example* *3:* iota
.play constants/example3/example3.go
			
- *Example* *4:* Implicit conversion
.play constants/example4/example4.go
		
* Exercises

Exercise 1

*Part *A:* Declare an untyped and typed constant and display their values.
*Part *B:* Divide two literal constants into a typed variable and display the value.

.play constants/exercises/template1/template1.go
		
* Answer
.play constants/exercises/exercise1/exercise1.go
			
All material is licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache License Version 2.0, January 2004]].
