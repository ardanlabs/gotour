Sự Ô nhiễm Interface (Interface Pollution)
Interface pollution xuất phát từ thực tế là mọi người đang thiết kế phần mềm với interface thay vì khám phá chúng.

* Interface Pollution

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Xem Video]]
- Cần hỗ trợ Học phí, hãy sử dụng [[https://www.ardanlabs.com/scholarship/] [Đơn xin Học bổng]] của chúng tôi

Interface pollution xuất phát từ thực tế là mọi người đang thiết kế phần mềm với
interface thay vì khám phá chúng.

** Code Review

- *Ví dụ* *1:* Gây ra Interface Pollution
- *Ví dụ* *2:* Loại bỏ Interface Pollution

.chạy composition/pollution/example1.go
.chạy composition/pollution/example2.go

** Interface Pollution

Interface pollution xuất phát từ thực tế là mọi người đang thiết kế phần mềm với
interface thay vì khám phá chúng. Bạn nên thiết kế một giải pháp cụ thể cho
vấn đề trước. Sau đó, bạn có thể tìm hiểu xem chương trình cần đa hình ở đâu nếu
cần thiết.

Đây là những điều tôi nghe được từ developer.

"Tôi đang dùng interface bởi vì tôi phải làm thế".

Không. Chúng ta không buộc phải sử dụng interface. Chúng ta sử dụng interface khi nó
tiện lợi và hợp lý. Có một cái giá phải trả khi sử dụng interface: mức độ gián tiếp
và phân bổ khi chúng ta lưu trữ các giá trị cụ thể bên trong chúng. Trừ khi cái giá của
sự phân bổ xứng đáng với những gì ta đạt được bằng cách decouple, bạn không nên sử dụng interface.

"Tôi cần test code của tôi nên tôi cần sử dụng interface.".

Không. Trước tiên, bạn phải thiết kế API cho người dùng chứ không phải cho việc test.
Nếu API không thể test được, bạn nên đặt câu hỏi rằng nó có dùng được không.
Ngoài ra còn có nhiều lớp API khác nhau. Các API chưa export cấp thấp hơn có thể và
nên tập trung vào khả năng test. Các API cấp cao hơn đã export cần tập trung vào khả năng sử dụng.

Các function chấp nhận nhập dữ liệu thô và trả lại dữ liệu thô là dễ test nhất.
Tách biệt quá trình chuyển đổi dữ liệu khỏi nơi nó đến và nơi nó đang đi đến.
Đây là bài tập tái cấu trúc bạn cần thực hiện trong việc thực hiện chu kỳ code.

Bên dưới là một ví dụ gây nên interface pollution bằng cách sử dụng interface
không cần thiết.

    type Server interface {
        Start() error
        Stop() error
        Wait() error
    }

Interface Server định nghĩa một hợp đồng cho các máy chủ TCP. Vấn đề ở đây là tôi
không cần một hợp đồng, mà bạn cần một implement. Sẽ chỉ có một cách implement,
đặc biệt khi bạn là người implement nó. Bạn không cần người khác để implement điều này cho bạn.

Ngoài ra, interface này dựa trên danh từ chứ không phải động từ. Các kiểu cụ thể là danh từ
vì chúng đại diện cho vấn đề cụ thể. Interface mô tả hành vi và Server không phải là hành vi.

Sau đây là một vài cách để xác định interface pollution:

- Một package khai báo một interface khớp với toàn bộ API của kiểu cụ thể của chính nó.
- Các interface được export nhưng các kiểu cụ thể implement interface không được export.
- Factory function cho kiểu cụ thể trả về giá trị interface với giá trị kiểu cụ thể chưa được export bên trong.
- Interface có thể bị xóa và không có gì thay đổi đối với người dùng API.
- Interface không decouple API khỏi thay đổi.

Hướng dẫn về interface pollution:

Sử dụng một interface:

- Khi người dùng API cần cung cấp chi tiết về việc implement.
- Khi API có nhiều cách implement cần được bảo dưỡng.
- Khi các phần của API có thể thay đổi đã được xác định và yêu cầu decouple.

Cân nhắc một interface:

- Khi mục đích duy nhất của nó là viết các API có thể test được (hãy viết các API có thể dùng được trước).
- Khi nó không cung cấp việc hỗ trợ để API decouple sự thay đổi.
- Khi chưa rõ interface làm thế nào để code tốt hơn.
