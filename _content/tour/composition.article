Interface and Composition Design
Composition goes beyond the mechanics of type embedding and is more than just a paradigm. It is the key for maintaining stability in your software by having the ability to adapt to the data and transformation changes that are coming.

* Interface and Composition Design

Composition goes beyond the mechanics of type embedding and is more than just a paradigm. It is the key for maintaining stability in your software by having the ability to adapt to the data and transformation changes that are coming.

* Notes

- This is much more than the mechanics of type embedding.
- Declare types and implement workflows with composition in mind.
- Understand the problem you are trying to solve first. This means understanding the data.
- The goal is to reduce and minimize cascading changes across your software.
- Interfaces provide the highest form of composition.
- Don't group types by a common DNA but by a common behavior.
- Everyone can work together when we focus on what we do and not what we are.

* Quotes

_"A good API is not just easy to use but also hard to misuse." - JBD_

_"You can always embed, but you cannot decompose big interfaces once they are out there. Keep interfaces small." - JBD_

_"Don't design with interfaces, discover them." - Rob Pike_  

_"Duplication is far cheaper than the wrong abstraction. - Sandi Metz_

* Design Guidelines

Learn about the [[#interface-and-composition-design][design guidelines]] for composition.

* Links

- [[https://programmingisterrible.com/post/176657481103/repeat-yourself-do-more-than-one-thing-and][Repeat yourself, do more than one thing, and rewrite everything]] - tef  
- [[https://golang.org/doc/effective_go.html#embedding][Embedding]]   
- [[https://www.ardanlabs.com/blog/2014/05/methods-interfaces-and-embedded-types.html][Methods, Interfaces and Embedding]] - William Kennedy  
- [[https://www.ardanlabs.com/blog/2015/09/composition-with-go.html][Composition In Go]] - William Kennedy  
- [[https://www.ardanlabs.com/blog/2016/10/reducing-type-hierarchies.html][Reducing Type Hierarchies]] - William Kennedy  
- [[https://www.ardanlabs.com/blog/2016/10/avoid-interface-pollution.html][Avoid Interface Pollution]] - William Kennedy 

* Code Review - Grouping Types

- *Example* *1:* Grouping By State
.play composition/grouping/example1/example1.go
   

- *Example* *2:* Grouping By Behavior
.play composition/grouping/example2/example2.go
   

* Code Review - Decoupling I

- *Example* *1:* Struct Composition
.play composition/decoupling/example1/example1.go
   

- *Example* *2:* Decoupling With Interface
.play composition/decoupling/example2/example2.go
   

- *Example* *3:* Interface Composition
.play composition/decoupling/example3/example3.go

* Code Review - Decoupling II

- *Example* *4:* Decoupling With Interface Composition
.play composition/decoupling/example4/example4.go
   

- *Example* *5:* Remove Interface Pollution
.play composition/decoupling/example5/example5.go
   

- *Example* *6:* More Precise API
.play composition/decoupling/example6/example6.go
 

* Code Review - Conversion and Assertions

- *Example* *1:* Interface Conversions
.play composition/assertions/example1/example1.go
   

- *Example* *2:* Runtime Type Assertions
.play composition/assertions/example2/example2.go
   

- *Example* *3:* Behavior Changes
.play composition/assertions/example3/example3.go
   

* Code Review - Interface Pollution


- *Example* *1:* Create Interface Pollution
.play composition/pollution/example1/example1.go
   

- *Example* *2:* Remove Interface Pollution
.play composition/pollution/example2/example2.go
 

* Code Review - Mocking

- *PubSub:* Package To Mock
.play composition/mocking/example1/pubsub/pubsub.go
   

- *Example* *1:* Client
.play composition/mocking/example1/example1.go
 

* Exercises

Exercise 1

Using the template, declare a set of concrete types that implement the set of predefined interface types. Then create values of these types and use them to complete a set of predefined tasks.

.play composition/exercises/template1/template1.go

* Answer

.play composition/exercises/exercise1/exercise1.go
 

All material is licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache License Version 2.0, January 2004]].
