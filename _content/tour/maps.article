Maps
Maps provide a data structure that allow for the storage and management of key/value pair data.

* Maps

Maps provide a data structure that allow for the storage and management of key/value pair data.

** Notes

- Maps provide a way to store and retrieve key/value pairs.
- Reading an absent key returns the zero value for the map's value type.
- Iterating over a map is always random.
- The map key must be a value that is comparable.
- Elements in a map are not addressable.
- Maps are a reference type.

** Links

- [[https://blog.golang.org/go-maps-in-action][Go maps in action]] - Andrew Gerrand    
- [[https://www.ardanlabs.com/blog/2013/12/macro-view-of-map-internals-in-go.html][Macro View of Map Internals In Go]] - William Kennedy    
- [[https://www.youtube.com/watch?v=Tl7mi9QmLns][Inside the Map Implementation]] - Keith Randall    
- [[https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics][How the Go runtime implements maps efficiently (without generics)]] - Dave Cheney     

* Code Review


- *Example* *1:* Declare, write, read, and delete
.play maps/example1/example1.go
			   

- *Example* *2:* Absent keys
.play maps/example2/example2.go
			   
- *Example* *3:* Map key restrictions
.play maps/example3/example3.go
			   

- *Example* *4:* Map literals and range
.play maps/example4/example4.go
			   

- *Example* *5:* Sorting maps by key
.play maps/example5/example5.go
			   

- *Example* *6:* Taking an element's address
.play maps/example6/example6.go

		   
- *Example* *7:* Maps are Reference Types
.play maps/example7/example7.go
			   

* Exercises

Exercise 1

Declare and make a map of integer values with a string as the key. Populate the map with five values and iterate over the map to display the key/value pairs.

.play maps/exercises/template1/template1.go

.play maps/exercises/exercise1/exercise1.go
			 

All material is licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache License Version 2.0, January 2004]].
