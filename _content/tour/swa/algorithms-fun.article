Mazoezi ya kufurahisha
Sehemu hii ina mazoezi kadhaa za msimbo wa kufurahisha ambao unaonyesha baadhi ya uwezo unaotolewa na Go.

* Zoezi la Kinyozi wa Kulala

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Tazama video]]
- Ukihitaji msaada wa kifedha, tumia tuvuti [[https://www.ardanlabs.com/scholarship/][Fomu ya udhamini]]

Programu ya sampuli hii hutekeleza zoezi la kinyozi kulala

- Tazama mengi katika [[https://en.wikipedia.org/wiki/Sleeping_barber_problem][https://en.wikipedia.org/wiki/Sleeping_barber_problem]]

Kuna kinyozi mmoja kwenye kinyozi, kiti kimoja cha kinyozi na viti `n` vya
wateja wanaosubiri. Ikiwa hakuna wateja, kinyozi huketi chini
kwenye kiti cha kinyozi na kulala. Wateja wanaowasili baadaye huchukua 
kiti cha kungojea ikiwa chochote ni tupu au kuondoka ikiwa viti vyote vimejaa.

*Pato:*

    Kufungua duka
    Kinyozi tayari kufanya kazi
    mteja"cust-1" aliingia dukani
    mteja "cust-1" aketi na kusubiri
    Kinyozi anahudumia mteja "cust-1"
    kinyozi amemaliza huduma kwa "cust-1"
    Kinyozi analala
    Mteja "cust-2" aingia dukani
    Mteja "cust-2" aketi na kusubiri
    Kinyozi anahudumia mteja "cust-2"
    mteja "cust-3" aingia dukani
    mteja "cust-3" taketi na kusubiri
    kinyozi amaliza huduma kwa "cust-2"
    Kinyozi anahudumia mteja "cust-3"
    Mteja "cust-4" aingia dukani
    Mteja "cust-4" aketi na kusubiri
    Duka lafungwa
    kinyozi amaliza huduma kwa "cust-3"
    Kinyozi amaliza huduma kwa "cust-4"
    kinyozi amemaliza kumhudumia mteja "cust-4"
    Duka lafungwa

.play algorithms/fun/barber.go

* Uzoefu

Programu za hizi sampuli hukuonyesha jinsi ya kutekeleza kazi ambayo inaweza kupata
uzoefu wa rune iliyotolewa ambayo hutumiwa katika sentensi maalum.

- Mfululizo: Algorithm ya mstari kutekeleza hesabu ya rune
- Sambamba: Algorithm inayofanana ya kutekeleza hesabu ya rune..

.play algorithms/fun/freq_sequential.go
.play algorithms/fun/freq_concurrent.go

*  Urefu Unaobadilika Wingi usimbaji/usimbuaji.

Mpango huu wa sampuli unaonyesha jinsi Go inaweza kutumiwa ili kutekeleza usimbaji wa wingi wa urefu tofauti.

- Mengi kwenye [[https://en.wikipedia.org/wiki/Variable-length_code][https://en.wikipedia.org/wiki/Variable-length_code]]

Kwa kifupi, lengo la usimbuaji huu ni kuhifadhi nambari kamili kwa njia ambayo ingeokoa baiti. 
Biti 7 pekee za kila baiti ndizo muhimu (zimehesabiwa haki; aina kama baiti ya ASCII). 
Kwa hivyo, ikiwa una thamani ya baiti 32, unapaswa kuifungua kwenye mfululizo wa baiti 7.
Kwa kweli, utakuwa na idadi tofauti ya ka kulingana na nambari yako kamili.
Ili kuonyesha ni baiti ipi ya mwisho ya mfululizo, unaacha wazi kidogo #7. 
Katika baiti zote zilizotangulia, uliweka biti #7.

Kwa hivyo, ikiwa nambari kamili iko kati ya 0 127, inaweza kuwakilishwa kama baiti moja.
Nambari kamili kubwa inayoruhusiwa ni 0FFFFFFF, wambayo hutafsiriwa kuwa urefu tofauti 
wa baiti 4. Hapa kuna mifano ya nyakati za delta kama maadili biti 32, na idadi ya urefu
tofauti ambayo anatafsiri kwa:

    NAMBARI        IDADI YA KUTOFAUTIANA
    00000000              00
    00000040              40
    0000007F              7F
    00000080             81 00
    00002000             C0 00
    00003FFF             FF 7F
    00004000           81 80 00
    00100000           C0 80 00
    001FFFFF           FF FF 7F
    00200000          81 80 80 00
    08000000          C0 80 80 00
    0FFFFFFF          FF FF FF 7F

Kiasi cha urefu unaobadilika (VLQ) ni msimbo wa ulimwengu wote unaotumia kiholela.
idadi ya pweza jozi (baiti-biti nane) ili kuwakilisha kubwa kiholela
nambari kamili. Ilifafanuliwa kwa matumizi katika umbizo la kawaida la faili la MIDI[1] kuhifadhi
nafasi ya ziada kwa ajili ya mfumo wa rasilimali vikwazo, na pia kutumika katika
baadaye Muundo wa Muziki Unaoongezwa (XMF). VLQ kimsingi ni msingi-128
uwakilishi wa nambari kamili ambayo haijatiwa saini na nyongeza ya biti ya nane
kuashiria kuendelea kwa baiti. Tazama mfano hapa chini.

	Int:    16384
	IntHex: 0x00004000
	IntBin: 00000000 00000000 01000000 00000000
	VLQHex: 0x81 0x80 0x00
	VLQBin: 00000000 10000001 10000000 00000000

Wacha tuseme ninataka kuwakilisha nambari 3435 katika VLQ. 3435 ndani
binary ni 110101101011. Hatuwezi kutoshea hii kwa baiti. Kwa hivyo tutafanya
kuikata kutoka mwisho katika vitalu 7-bit.

    Septet	7	6	5	4	3	2	1
    #1		1	1	0	1	0	1	1
    #2		0	0	1	1	0	1	0

Sasa tunatanguliza zote isipokuwa za mwisho tukiwa na biti-1 ili kuonyesha kwamba oktet
hufuata na kutayarisha 0-bit hadi ya mwisho, ikiashiria oktet ya mwisho.

    Octet   8	7	6	5	4	3	2	1
    #1      0	1	1	0	1	0	1	1
    #2      1	0	0	1	1	0	1	0

Hatimaye tunayaunganisha, muhimu zaidi oktet kwanza, ndani

Imesimbwa: 10011010 01101011  ToHex: 0x9A 0x6B

*Ziada* *Rasilimali:*

- [[https://en.wikipedia.org/wiki/Variable-length_quantity][https://en.wikipedia.org/wiki/Variable-length_quantity]]
- [[https://blogs.infosupport.com/a-primer-on-vlq/][https://blogs.infosupport.com/a-primer-on-vlq/]]

Kwa* ** *utekelezaji bora* *wa* *hii* *algorithm* *tazama* *hapa:*

- [[https://github.com/go-audio/midi/blob/master/varint.go][https://github.com/go-audio/midi/blob/master/varint.go]]

.play algorithms/fun/vlq.go