Sorting
TODO - Description

* Sorting

** Bubble

.play algorithms/sorting/bubble/bubble.go

** Heap

Package heap implement the heapsort algorithm in Go. Heapsort can be thought
of as an improved selection sort: like selection sort, heapsort divides its
input into a sorted and an unsorted region, and it iteratively shrinks the
unsorted region by extracting the largest element from it and inserting it
into the sorted region. Unlike selection sort, heapsort does not waste time
with a linear-time scan of the unsorted region; rather, heap sort maintains
the unsorted region in a heap data structure to more quickly find the largest
element in each step.

.play algorithms/sorting/heap/heap.go

** Insertion

Package insertionsort implement of Insertion Sort algorithm in Go.
package insertionsort

insertionSort takes a random list of numbers and uses the
`iterative` process to sort it and return the sorted list.

- Time Complexity O(n^2)
- Auxiliary Space: O(1)

.play algorithms/sorting/insertion/insertion.go

** Quick

Package quicksort implementation of Quick sort algorithm in Go.
package quicksort

quickSort is an in-place sorting algorithm. It takes a random list of numbers,
and uses the `recursive` process to divides it into partitions then sorts those.

- Time complexity O(nlog n)
- Space complexity O(log n)

.play algorithms/sorting/quick/quick.go

** Selection

Package selectionsort implement of Selection Sort algorithm in Go.
package selectionsort

selectionSortIterative takes a random list of numbers and uses the
`iterative` process to sort it and return the sorted list.

.play algorithms/sorting/selection/selection.go