Sort operations
This section provides examples that perform sorting manipulation.

* Bubble Sort

The sample program implements a function that performs bubble sort
against a set of integers.

- See more at [[https://en.wikipedia.org/wiki/Bubble_sort][https://en.wikipedia.org/wiki/Bubble_sort]]

*Diagram*

    Bubble sort is a simple sorting algorithm that repeatedly steps through the
    input list element by element, comparing the current element with the one
    after it, swapping their values if needed.

    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Starting Array
    └────┘└────┘└────┘└────┘└────┘

    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 10 ││ 05 ││ 25 ││ 15 ││ 30 │ ◁── First Round
    └────┘└────┘└────┘└────┘└────┘

    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 05 ││ 10 ││ 15 ││ 25 ││ 30 │ ◁── Second Round / Sorted
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/bubble.go

* Insertion Sort

The sample program implements a function that performs insertion sort
against a set of integers.

- See more at [[https://en.wikipedia.org/wiki/Insertion_sort][https://en.wikipedia.org/wiki/Insertion_sort]]

*Diagram*

    Insertion sort iterates, consuming one input element each repetition,
    and grows a sorted output list. At each iteration, insertion sort
    removes one element from the input data, finds the location it belongs
    within the sorted list, and inserts it there. It repeats until no input
    elements remain.

    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Starting Array
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/insertion.go


* Heap

Package heap implement the heapsort algorithm in Go. Heapsort can be thought
of as an improved selection sort: like selection sort, heapsort divides its
input into a sorted and an unsorted region, and it iteratively shrinks the
unsorted region by extracting the largest element from it and inserting it
into the sorted region. Unlike selection sort, heapsort does not waste time
with a linear-time scan of the unsorted region; rather, heap sort maintains
the unsorted region in a heap data structure to more quickly find the largest
element in each step.

.play algorithms/sorting/heap/heap.go

* Quick

Package quicksort implementation of Quick sort algorithm in Go.
package quicksort

quickSort is an in-place sorting algorithm. It takes a random list of numbers,
and uses the `recursive` process to divides it into partitions then sorts those.

.play algorithms/sorting/quick/quick.go

* Selection

Package selectionsort implement of Selection Sort algorithm in Go.
package selectionsort

selectionSortIterative takes a random list of numbers and uses the
`iterative` process to sort it and return the sorted list.

.play algorithms/sorting/selection/selection.go