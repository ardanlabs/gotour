Encoding - Standard Library
Encoding is the process or marshaling or unmarshaling data into different forms. Taking JSON string documents and convert them to values of our user defined types is a very common practice in many go programs today. Go's support for encoding is amazing and improves and gets faster with every release.

* Encoding - Standard Library

Encoding is the process or marshaling or unmarshaling data into different forms. Taking JSON string documents and convert them to values of our user defined types is a very common practice in many go programs today. Go's support for encoding is amazing and improves and gets faster with every release.

** Notes

- Support for Decoding and Encoding JSON and XML are provided by the standard library.
- This package gets better and better with every release.

** Links

- [[https://www.ardanlabs.com/blog/2014/01/decode-json-documents-in-go.html][Decode JSON Documents In Go]] - William Kennedy    

* Code Review

- *Example* *1:* Unmarshal JSON documents
.play encoding/example1/example1.go
   

- *Example* *2:* Unmarshal JSON files
.play encoding/example2/example2.go

- *Example* *3:* Marshal a user defined type
.play encoding/example3/example3.go
   

- *Example* *4:* Custom Marshaler and Unmarshler
.play encoding/example4/example4.go
 

* Exercises

Exercise 1

*Part* *A* Create a file with an array of JSON documents that contain a user name and email address. Declare a struct type that maps to the JSON document. Using the json package, read the file and create a slice of this struct type. Display the slice.

*Part* *B* Marshal the slice into pretty print strings and display each element.


.play encoding/exercises/template1/template1.go
 
.play encoding/exercises/exercise1/exercise1.go
 

All material is licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache License Version 2.0, January 2004]].
