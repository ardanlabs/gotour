Λειτουργίες Ταξινόμησης
Αυτό το τμήμα παρέχει παραδείγματα, που πραγματοποιούν λειτουργίες ταξινόμησης.

* Ταξινόμηση Φυσαλίδας 

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Παρακολουθήστε το Video]]
- Εάν Χρειάζεστε Οικονομική Συνδρομή, Χρησιμοποιήστε το Σχετικό [[https://www.ardanlabs.com/scholarship/][Έγγραφο Υποτροφίας]]

Αυτό το παράδειγμα προγράμματος υλοποιεί μια συνάρτηση, που πραγματοποιεί ταξινόμηση φυσαλίδας,
σε ένα σύνολο ακεραίων.

- Περισσότερες πληροφορίες στο [[https://en.wikipedia.org/wiki/Bubble_sort][https://en.wikipedia.org/wiki/Bubble_sort]]

*Διάγραμμα*

    Η ταξινόμηση φυσαλίδας είναι ένας απλός αλγόριθμος ταξινόμησης, ο οποίος
    επανειλημμένα διατρέχει την λίστα εισόδου, στοιχείο προς στοιχείο,
    συγκρίνοντας το τρέχον στοιχείο με το ακόλουθο, πραγματοποιώντας
    εναλλαγή στις τιμές τους, εφόσον είναι αναγκαίο.

    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Αρχικός Πίνακας
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 10 ││ 05 ││ 25 ││ 15 ││ 30 │ ◁── Μετά την Πρώτη Επανάληψη
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 05 ││ 10 ││ 15 ││ 25 ││ 30 │ ◁── Μετά την Δεύτερη Επανάληψη / Ταξινομημένος
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/bubble.go

* Ταξινόμηση με εισαγωγή

Αυτό το παράδειγμα προγράμματος υλοποιεί μια συνάρτηση, που πραγματοποιεί ταξινόμηση με εισαγωγή,
σε ένα σύνολο ακεραίων.

- Δείτε περισσότερα στο [[https://en.wikipedia.org/wiki/Insertion_sort][https://en.wikipedia.org/wiki/Insertion_sort]]

*Διάγραμμα*

    Η ταξινόμηση με εισαγωγή, διατρέχει τον πίνακα τον ίδιο αριθμό φορών, όσο
    είναι το μήκος του πίνακα, μειον ένα. Σε έναν πίνακα με 5 αριθμούς, η 
    ταξινόμηση θα επαναληφθεί 4 φορές. Ξεκινώντας στον δείκτη 1, η ταξινόμηση 
    προχωράει αυτόν τον αριθμό αριστερά, τοποθετώντας τον σε ταξινομημένη θέση.

    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Αρχικός Πίνακας
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Μετακίνηση [1]=30 στα αριστερά
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Μετά την Πρώτη Επανάληψη
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Μετακίνηση [2]=05 στα αριστερά
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Μετά την Δεύτερη Επανάληψη
    │ 05 ││ 10 ││ 30 ││ 25 ││ 15 │ ◁── Μετακίνηση [3]=25 στα αριστερά
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Μετά την Τρίτη Επανάληψη
    │ 05 ││ 10 ││ 25 ││ 30 ││ 15 │ ◁── Μετακίνηση [4]=15 στα αριστερά
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Μετά την Τέταρτη Επανάληψη
    │ 05 ││ 10 ││ 15 ││ 25 ││ 30 │ ◁── Ταξινομημένος
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/insertion.go

* Ταξινόμηση Σωρού

Αυτό το παράδειγμα προγράμματος υλοποιεί μια συνάρτηση, που πραγματοποιεί ταξινόμηση σωρού,
σε ένα σύνολο ακεραίων.

- Δείτε περισσότερα στο [[https://en.wikipedia.org/wiki/Heapsort][https://en.wikipedia.org/wiki/Heapsort]]

*Διάγραμμα*

Η ταξινόμηση σωρού διαιρεί την είσοδο της σε ένα ταξινομημένο και σε ένα μη 
ταξινομημένο πίνακα. Ο αλγόριθμος συρρικνώνει συστηματικά την αταξινόμητη 
περιοχή, εξάγοντας το μεγαλύτερο στοιχείο και τοποθετώντας το στον ταξινομημένο
πίνακα. Ο αλγόριθμος εκτελείται σε δύο φάσεις.

    Φάση I  
    Διαίρεση της λίστας στην μέση και επεξεργασία του μπροστινού μισού
    της λίστας, μετακινώντας την μεγαλύτερη τιμή, που μπορεί να βρεθεί, στην
    μπροστινή θέση της λίστας και στην συνέχεια επαναλαμβάνεται το ίδιο, για 
    την δεύτερη μεγαλύτερη τιμή.

    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Αρχικός Πίνακας
    │ 63 ││ 16 │ | │ 40 ││ 71 ││ 73 │ ◁── Έλεγχος [1]=16 < [4]=73 : Εναλλαγή
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Μετά την Πρώτη Επανάληψη
    │ 63 ││ 73 │ | │ 40 ││ 71 ││ 16 │ ◁── Έλεγχος [0]=63 < [3]=71 : Εναλλαγή
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Μετά την Δεύτερη Επανάληψη
    │ 73 ││ 71 │ | │ 40 ││ 63 ││ 16 │ ◁── Ολοκλήρωση Φάσης I 
    └────┘└────┘ | └────┘└────┘└────┘

    Φάση II  
    Γίνεται μετακίνηση των αριθμών, σε μια καινούργια, ταξινομημένη λίστα.
    Λαμβάνεται ο αριθμός στην πρώτη θέση και απομακρύνεται, με προορισμό
    την νέα λίστα, η οποία θα περιέχει την τελική ταξινόμηση. Στην συνέχεια,
    μετακινείται ο μεγαλύτερος αριθμός, που θα βρεθεί ξανά στην μπροστινή 
    θέση της λίστας.

    ┌────┐┌────┐┌────┐┌────┐┌────┐ |  ◁── Αρχικός Πίνακας
    │ 73 ││ 71 ││ 40 ││ 63 ││ 16 │ |
    └────┘└────┘└────┘└────┘└────┘ |
    ┌────┐┌────┐┌────┐┌────┐ | ┌────┐ ◁── Μετά την Πρώτη Επανάληψη
    │ 71 ││ 63 ││ 40 ││ 16 │ | │ 73 │ ◁── Απομάκρυνση του 73 και τοποθέτηση του 71 μπροστά
    └────┘└────┘└────┘└────┘ | └────┘
    ┌────┐┌────┐┌────┐ | ┌────┐┌────┐ ◁── Μετά την Δεύτερη Επανάληψη
    │ 63 ││ 16 ││ 40 │ | │ 71 ││ 73 │ ◁── Απομάκρυνση του 71 και τοποθέτηση του 63 μπροστά
    └────┘└────┘└────┘ | └────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Μετά την Τρίτη Επανάληψη
    │ 40 ││ 16 │ | │ 63 ││ 71 ││ 73 │ ◁── Απομάκρυνση του 63 και τοποθέτηση του 40 μπροστά
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐ | ┌────┐┌────┐┌────┐┌────┐ ◁── Μετά την Τέταρτη Επανάληψη
    │ 16 │ | │ 40 ││ 63 ││ 71 ││ 73 │ ◁── Απομάκρυνση του 40 και τοποθέτηση του 16 μπροστά
    └────┘ | └────┘└────┘└────┘└────┘
     | ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Μετά την Πέμπτη Επανάληψη
     | │ 16 ││ 40 ││ 63 ││ 71 ││ 73 │ ◁── Απομάκρυνση του 16 / Ταξινομημένη
     | └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/heap.go

* Γρήγορη Ταξινόμηση

Αυτό το παράδειγμα προγράμματος υλοποιεί μια συνάρτηση, που πραγματοποιεί γρήγορη ταξινόμηση,
σε ένα σύνολο ακεραίων.

- Δείτε περισσότερα στο [[https://en.wikipedia.org/wiki/Quicksort][https://en.wikipedia.org/wiki/Quicksort]]

*Διάγραμμα*

    Η γρήγορη ταξινόμηση είναι ένας αλγόριθμος "διαίρει και βασίλευε". Λειτουργεί
    επιλέγοντας ένα στοιχείο του πίνακα, γύρω απ' το οποίο, επικεντρώνεται και
    διαμερίζει τα υπόλοιπα στοιχεία σε δύο υπο-πίνακες, ανάλογα με το αν είναι
    μικρότερα ή μεγαλύτερα από το επιλεγμένο στοιχείο. 

    -------------------------------------------------------------------
    Παράδειγμα 1
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Αρχικός Πίνακας
    │ 45 ││ 39 ││ 37 ││ 15 ││ 41 │ ◁── Τιμή επικέντρωσης 41
    └────┘└────┘└────┘└────┘└────┘ ◁── Ταξινόμηση Στοιχείων 0 - 4
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 39 ││ 37 ││ 15 ││ 41 ││ 45 │ ◁── Πρώτη Ολοκληρωμένη Ταξινόμηση  
    └────┘└────┘└────┘└────┘└────┘

    Τα τελευταία δύο στοιχεία είναι ταξινομημένα, εστίαση προσοχής στα πρώτα τρία.

    ┌────┐┌────┐┌────┐
    │ 39 ││ 37 ││ 15 │ ◁── Τιμή επικέντρωσης 15
    └────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 15 ││ 37 ││ 39 ││ 41 ││ 45 │ ◁── Ταξινομημένος
    └────┘└────┘└────┘└────┘└────┘

    -------------------------------------------------------------------
    Παράδειγμα 2
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Αρχικός Πίνακας
    │ 34 ││ 55 ││ 59 ││ 73 ││ 09 │ ◁── Τιμή επικέντρωσης 09
    └────┘└────┘└────┘└────┘└────┘ ◁── Ταξινόμηση Στοιχείων 0 - 4
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 55 ││ 59 ││ 73 ││ 34 │ ◁── Πρώτη Ολοκληρωμένη Ταξινόμηση
    └────┘└────┘└────┘└────┘└────┘

    Το πρώτο στοιχείο είναι ταξινομημένο, εστίαση προσοχής στα τελευταία τέσσερα.

    ┌────┐┌────┐┌────┐┌────┐
    │ 55 ││ 59 ││ 73 ││ 34 │ ◁── Τιμή επικέντρωσης 34
    └────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 59 ││ 73 ││ 55 │ ◁── Δεύτερη Ολοκληρωμένη Ταξινόμηση
    └────┘└────┘└────┘└────┘└────┘

    Τα πρώτα δύο στοιχεία είναι ταξινομημένα, εστίαση προσοχής στα τελευταία τρία.

    ┌────┐┌────┐┌────┐
    │ 59 ││ 73 ││ 55 │ ◁── Τιμή επικέντρωσης 55
    └────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 55 ││ 73 ││ 59 │ ◁── Τρίτη Ολοκληρωμένη Ταξινόμηση
    └────┘└────┘└────┘└────┘└────┘

    Τα τρία πρώτα στοιχεία είναι ταξινομημένα, εστίαση προσοχής στα τελευταία δύο.

    ┌────┐┌────┐ ◁── Τιμή επικέντρωσης 59
    │ 73 ││ 59 │ ◁── Τρίτη Ολοκληρωμένη Ταξινόμηση
    └────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 55 ││ 59 ││ 73 │ ◁── Ταξινομημένος
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/quick.go
