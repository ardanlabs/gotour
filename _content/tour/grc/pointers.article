Δείκτες Διεύθυνσης
Οι δείκτες διεύθυνσης είναι χρήσιμοι, προκειμένου να μοιράζεται κανείς τιμές, κατά μήκος των ορίων ενός προγράμματος.

* Δείκτες Διεύθυνσης

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Παρακολουθήστε το Video]]
- Εαν Χρειάζεστε Οικονομική Συνδρομή, Χρησιμοποιήστε το Σχετικό [[https://www.ardanlabs.com/scholarship/][Έγγραφο Υποτροφίας]]

Οι δείκτες διεύθυνσης είναι χρήσιμοι, προκειμένου να μοιράζεται κανείς τιμές, κατά μήκος των ορίων ενός προγράμματος. Υπάρχουν 
διάφορα είδη ορίων, σε κάθε πρόγραμμα. Το πιο κοινό απ' όλα, είναι αυτό μεταξύ κλήσεων συναρτήσεων.
Υπάρχει ακόμα ένα όριο μεταξύ διαφορετικών ρουτίνων συνεκτέλεσης της Go (goroutine) για το οποίο υπάρχουν σημειώσεις, παρακάτω.

** Ανασκόπηση Κώδικα

- *Παράδειγμα* *1:* Περνώντας Παραμέτρους ως Τιμές
- *Παράδειγμα* *2:* Κοινή Χρήση Δεδομένων I
- *Παράδειγμα* *3:* Κοινή Χρήση Δεδομένων II
- *Παράδειγμα* *4:* Ανάλυση Διαφυγής
- *Παράδειγμα* *5:* Μεγέθυνση Στοίβας

.play pointers/example1.go
.play pointers/example2.go
.play pointers/example3.go
.play pointers/example4.go
.play pointers/example5.go

Όταν ένα πρόγραμμα γραμμένο στην Go ξεκινά, το εκτελέσιμο περιβάλλον της Go δημιουργεί μια ρουτίνα συνεκτέλεσης της Go. Οι ρουτίνες συνεκτέλεσης της Go είναι
ελαφριά νήματα εκτέλεσης λειτουργιών επιπέδου εφαρμογής, που φέρουν την ίδια σημειολογία, ως επί το πλείστον, με την λειτουργία 
των νημάτων εκτέλεσης λειτουργιών του συστήματος. Η δουλειά τους είναι ο έλεγχος της εκτέλεσης ενός διακριτού συνόλου
οδηγιών. Κάθε πρόγραμμα της Go έχει τουλάχιστον 1 ρουτίνα συνεκτέλεσης, η οποία αποκαλείται και η κύρια ρουτίνα συνεκτέλεσης.

Κάθε ρουτίνα συνεκτέλεσης της Go, αποκτά το δικό της τμήμα μνήμης, που ονομάζεται στοίβα (stack). Κάθε στοίβα, ξεκινάει 
σαν μια δέσμευση μνήμης 2048 byte (2k). Είναι πολύ μικρή αρχικά, αλλά οι στοίβες μπορούν να μεγαλώσουν, με το πέρας του χρόνου.

.image /tour/grc/static/img/p1.png

Κάθε φορά που καλείται μια συνάρτηση, δεσμεύεται ένα τμήμα διαθέσιμου χώρου για την στοίβα, προκειμένου να επιτρέψει στην ρουτίνα συνεκτέλεσης της Go
να εκτελέσει τις οδηγίες, που σχετίζονται με αυτή την συνάρτηση. Κάθε ξεχωριστό τμήμα της μνήμης 
αποκαλείται πλαίσιο μνήμης.

Το μέγεθος του πλαισίου μνήμης για μια συνάρτηση, υπολογίζεται στο στάδιο της μεταγλώττισης. Καμία τιμή
δεν μπορεί να δημιουργηθεί στην στοίβα αν ο μεταγλωττιστής δεν γνωρίζει το μέγεθος αυτής της τιμής, κατά το 
στάδιο της μεταγλώττισης. Αν ο μεταγλωττιστής δεν γνωρίζει το μέγεθος της τιμής στο στάδιο της μεταγλώττισης, η
τιμή πρέπει να δημιουργηθεί στον σωρό (heap).
 
Οι στοίβες εκκαθαρίζονται αυτόματα και η μηδενικές τιμές των μεταβλητών συμβάλλουν στον ορισμό αρχικής τιμής μιας στοίβας.
Κάθε φορά που καλεί κανείς μια συνάρτηση και σχηματίζεται ένα πλαίσιο μνήμης, η μνήμη
για αυτό το πλαίσιο λαμβάνει αρχική τιμή και με αυτόν τον τρόπο, η στοίβα εκκαθαρίζεται αυτόματα. Όταν μια συνάρτηση 
επιστρέφει, η μνήμη για το συγκεκριμένο πλαίσιο μνήμης αφήνεται στην ησυχία της, καθώς δεν είναι γνωστό αν η συγκεκριμένη μνήμη
θα χρειαστεί ξανά. Θα ήταν αναποτελεσματικό να λαμβάνει αρχική τιμή η μνήμη, μετά την επιστροφή των συναρτήσεων.

*Περνώντας* *Παραμέτρους* *ως* *Τιμές* 

Όλα τα δεδομένα μετακινούνται μέσα στο πρόγραμμα, ως τιμές. Αυτό σημαίνει ότι, καθώς τα δεδομένα διασχίζουν 
τα όρια του προγράμματος, η κάθε συνάρτηση ή η κάθε ρουτίνα συνεκτέλεσης της Go, αποκτά το δικό της αντίγραφο των
δεδομένων. Υπάρχουν δύο είδη δεδομένων με τα οποία μπορεί κανείς να δουλέψει, η τιμή αυτή καθ' εαυτή (int,
string, user) ή η διεύθυνση της τιμής, στην μνήμη. Οι διευθύνσεις μνήμης είναι δεδομένα, που χρειάζεται να αντιγραφούν 
και να αποθηκευτούν, διασχίζοντας τα όρια ενός προγράμματος.

Ο ακόλουθος κώδικας προσπαθεί να εξηγήσει τα παραπάνω, περισσότερο.

    func main() {

        // Δημιουργία μεταβλητής ακέραιου τύπου με τιμή 10.
        count := 10

        // Προκειμένου να πάρει κανείς την διεύθυνση μνήμης μιας τιμής, μπορεί να 
        // χρησιμοποιήσει τον τελεστή &.
        println("count:\tValue Of[", count, "]\tAddr Of[", &count, "]")

        // Περνώντας ένα αντίγραφο της "τιμής της" count (αυτό, που βρίσκεται μέσα 
        // στο κουτί) στην συνάρτηση increment1.
        increment1(count)

        // Τυπώνοντας την "τιμή της" και την "διεύθυνση της" παραμέτρου count.
        // Η τιμή της count δεν θα αλλάξει μετά την κλήση της συνάρτησης.
        println("count:\tValue Of[", count, "]\tAddr Of[", &count, "]")

        // Περνώντας ένα αντίγραφο της "διεύθυνσης της" count (πού βρίσκεται το 
        // κουτί) στην συνάρτηση increment2. Αυτός ο τρόπος θεωρείται πάλι, ότι 
        // περνάει την παράμετρο ως τιμή και όχι ως αναφορά, καθώς οι διευθύνσεις 
        // είναι τιμές.
        increment2(&count)

        // Τυπώνοντας την "τιμή της" και την "διεύθυνση της" παραμέτρου count.
        // Η τιμή της count έχει αλλάξει μετά την κλήση της συνάρτησης.
        println(
            "count:\tValue Of[", 
            count, "]\tAddr Of[", &count, "]")
    }

    // Η increment1 ορίζει την συνάρτηση να δέχεται το δικό της αντίγραφο μιας
    // ακέραιας τιμής.
    func increment1(inc int) {

        // Αυξάνοντας το τοπικό αντίγραφο της int τιμής του καλούντος.
        inc++
        println("inc1:\tValue Of[", inc, "]\tAddr Of[", &inc, "]")
    }

    // Η increment2 ορίζει την συνάρτηση να δέχεται το δικό της αντίγραφο μιας
    // διεύθυνσης, που δείχνει σε ακέραια τιμή.
    // Οι μεταβλητές διεύθυνσης μνήμης είναι ρητοί τύποι και ορίζονται με την 
    // χρήση του τελεστή *.
    func increment2(inc *int) {

        // Αυξάνοντας την int τιμή του καλούντος, μέσω της διεύθυνσης μνήμης.
        *inc++
        println(
            "inc2:\tValue Of[", 
            inc, "]\tAddr Of[", &inc, 
            "]\tPoints To[", *inc, "]")
    }

Αποτέλεσμα:

    count:  Value Of[ 10 ]  Addr Of[ 0xc000050738 ]
    inc1:   Value Of[ 11 ]  Addr Of[ 0xc000050730 ]
    count:  Value Of[ 10 ]  Addr Of[ 0xc000050738 ]
    inc2:   Value Of[ 0xc000050738 ] Addr Of[ 0xc000050748 ] Points To[ 11 ]
    count:  Value Of[ 11 ]  Addr Of[ 0xc000050738 ]

** Σημειώσεις 

- Κανείς χρησιμοποιεί διευθύνσεις μνήμης, προκειμένου να μπορεί να μοιράζεται τα δεδομένα.
- Οι τιμές στην Go πάντα διαθέτονται για να περάσουν ως παράμετροι σε συναρτήσεις, ως τιμές (pass by value).
- "Η τιμή της", τι βρίσκεται δηλαδή, μέσα στο κουτί. "Η διεύθυνση της" ( & ), πού βρίσκεται δηλαδή, το κουτί.
- Ο τελεστής ( * ) ορίζει μια μεταβλητή διεύθυνσης μνήμης και "Η τιμή την οποία η διεύθυνση μνήμης υποδεικνύει".

** Ανάλυση Διαφυγής

Ο αλγόριθμος που χρησιμοποιεί ο μεταγλωττιστής, προκειμένου να διαπιστώσει αν μια τιμή πρέπει να δημιουργηθεί 
στην στοίβα ή στον σωρό ονομάζεται "ανάλυση διαφυγής" (escape analysis). Η ονομασία του αλγορίθμου, το
παρουσιάζει σαν οι τιμές να δημιουργούνται πρώτα στην στοίβα και στην συνέχεια να διαφεύγουν (ή να μετακινούνται)
στον σωρό, όταν αυτό κριθεί αναγκαίο. ΔΕΝ είναι έτσι, όμως. Η δημιουργία μιας τιμής συμβαίνει μόνο
μια φορά, και ο αλγόριθμος ανάλυσης διαφυγής αποφασίζει που θα συμβεί αυτό (στην στοίβα 
ή στον σωρό). Μόνο η δημιουργια στον σωρό, αποκαλείται ως εκχώρηση μνήμης, στην Go.

Η κατανόηση της ανάλυσης διαφυγής, αφορά την κατανόηση της ιδιοκτησίας των τιμών. Η ιδέα είναι ότι,
όταν μια τιμή δημιουργείται εντός του πλαισίου αναφοράς μιας συνάρτησης, τότε η συνάρτηση αυτή 
κατέχει την ιδιοκτησία της τιμής. Από εκεί κανείς χρειάζεται να ρωτήσει αν η τιμή πρέπει να 
συνεχίσει να υπάρχει όταν η συνάρτηση, στη οποία ανήκει, επιστρέψει; Αν η απάντηση είναι όχι, τότε η τιμή μπορεί 
να δημιουργηθεί στην στοίβα. Αν η απάντηση είναι ναι, τότε η τιμή πρέπει να δημιουργηθεί 
στον σωρό.

Σημείωση: Ο κανόνας της ιδιοκτησίας, είναι ένας καλός βασικός κανόνας για να αναγνωρίζει κανείς εκείνο τον κώδικα,
που προκαλεί μια εκχώρηση μνήμης. Ομως, κανείς πρεπει να συνειδητοποιήσει ότι, η ανάλυση διαφυγής έχει μειονεκτήματα, τα οποία μπορούν 
να οδηγήσουν σε μη προφανείς εκχωρήσεις μνήμης. Επίσης, ο αλγόριθμος χρησιμοποιεί κάθε ευκαιρία, προκειμένου
να χρησιμοποιήσει βελτιστοποιήσεις του μεταγλωττιστή, για να κάνει οικονομία σε εκχωρήσεις μνήμης.

    // ο user αναπαριστά ένα χρήστη στο σύστημα.
    type user struct {
        name  string
        email string
    }

    func stayOnStack() user {
        u := user{
            name:  "Bill",
            email: "bill@email.com",
        }

        return u
    }

Η συνάρτηση stayOnStack χρησιμοποιεί σημειολογία τιμών, προκειμένου να επιστρέψει μια τιμή user στον
καλώντα. Με άλλα λόγια, ο καλών αποκτά ένα αντίγραφο, της τιμής user που 
δημιουργείται.

Οταν η συνάρτηση stayOnStack καλείται και επιστρέφει, η τιμή user που δημιουργεί,
δεν χρειάζεται πια να υπάρχει, καθώς ο καλών αποκτά το δικό του αντίγραφο. Επομένως,
η δημιουργία της τιμής user εντός της stayOnStack, μπορεί να συμβεί στην στοίβα.
Δεν πραγματοποιείται καμία εκχώρηση μνήμης.

    type user struct {
        name  string
        email string
    }

    func escapeToHeap() *user {
        u := user{
            name:  "Bill",
            email: "bill@email.com",
        }

        return &u
    }

Η συνάρτηση escapeToHeap χρησιμοποιεί σημειολογία δείκτη διευθύνσεων, προκειμένου να επιστρέψει μια τιμή user πίσω
στον καλώντα. Με άλλα λόγια, ο καλώντας αποκτάει κοινή πρόσβαση (μια διεύθυνση) στην 
τιμή user που δημιουργείται.

Οταν η συνάρτηση escapeToHeap καλείται και επιστρέφει, η τιμή user που δημιουργεί
χρειάζεται να συνεχίζει να υπάρχει, καθώς ο καλώντας έχει κοινή πρόσβαση στην τιμή αυτή.
Επομένως, η δημιουργία της τιμής user μέσα στην escapeToHeap δεν μπορεί να συμβεί
στην στοίβα, πρέπει να συμβεί στον σωρό. Σε αυτή την περίπτωση, πραγματοποιείται εκχώρηση μνήμης.

Αναλογιζόμενος κανείς τι θα συνέβαινε, αν η τιμή user του τελευταίου παραδείγματος δημιουργούνταν 
στην στοίβα, ενώ την ίδια στιγμή χρησιμοποιούνταν σημειολογία δεικτών διευθύνσεων για την επιστροφή,
προκύπτουν τα ακόλουθα.

.image /tour/grc/static/img/p2.png

Ο καλών θα έπαιρνε ένα αντίγραφο της διεύθυνσης στοίβας, από το επόμενο πλαίσιο μνήμης και η ακεραιότητα
των δεδομένων θα χανόταν. Οταν ο έλεγχος επιστρέφει στην καλούσα συνάρτηση, η μνήμη στη
στοίβα, όπου βρίσκεται η τιμή user, καθίσταται ξανά διαθέσιμη για χρήση. Την στιγμή που η καλούσα συνάρτηση 
πραγματοποιεί κλήση άλλης συνάρτησης, ένα νέο πλαίσιο μνήμης διανέμεται και η μνήμη ακυρώνεται,
καταστρέφοντας έτσι την κοινή τιμή.

Γι' αυτό κανείς σκέφτεται την στοίβα ως κάτι που ανανεώνεται. Η ανάθεση της μηδενικής τιμής,
βοηθάει κάθε πλαίσιο μνήμης της στοίβας που χρειάζεται κανείς, να εκκαθαρίζεται, χωρίς την χρήση του συλλέκτη απορριμάτων. Η στοίβα
εκκαθαρίζει τον εαυτό της, καθώς ένα πλαίσιο μνήμης λαμβάνεται και παίρνει αρχική τιμή για την εκτέλεση κάθε 
κλήσης συνάρτησης. Η στοίβα εκκαθαρίζεται κατά την διάρκεια κλήσεων συναρτήσεων και όχι όταν αυτές επιστρέφουν, επειδή
ο μεταγλωττιστής δεν γνωρίζει αν η μνήμη στην στοίβα θα χρειαστεί ξανά.

Η ανάλυση διαφυγής αποφασίζει αν μια τιμή δημιουργείται στην στοίβα (το default) ή αν 
δημιουργείται στον σωρό (η διαφυγή). Με την συνάρτηση stayOnStack, μεταφέρεται ένα αντίγραφο της τιμής 
στον καλώντα, επομένως είναι ασφαλές να παραμείνει η τιμή στην στοίβα. Με την συνάρτηση escapeToHeap, 
ο καλών λαμβάνει ένα αντίγραφο της διεύθυνσης της τιμής (γίνεται δηλαδή διαμοιρασμός της 
στοίβας), επομένως δεν είναι ασφαλές να παραμείνει η τιμή στην στοίβα.

Υπάρχουν πολλές μικρές λεπτομέρειες που σχετίζονται με την ανάλυση διαφυγής, επομένως για να μάθει κανείς περισσότερα,
μπορεί να διαβάσει την ανάρτηση στο κεφάλαιο 14 με τίτλο, Μηχανισμοί της Ανάλυσης Διαφυγής.

Σημείωση: Από την έκδοση 1.17, η Go άλλαξε το ABI (application binary interface) προκειμένου να 
υλοποιήσει ένα νέο τρόπο για να περνάει κανείς τιμές εισόδου και εξόδου κάνοντας χρήση καταχωρητών (registers)
αντί για την μνήμη στην στοίβα. Αυτό είναι ενεργοποιημένο για το Linux, το MacOS, και τα Windows για την
αρχιτεκτονική 64-bit x86. Αυτό σημαίνει ότι ορισμένες τιμές εισόδου μιας συνάρτησης δεν θα 
αντιγράφονται στην στοίβα, αλλά ορισμένες άλλες μπορεί, κάτι που εξαρτάται από την πρακτική εφαρμογή της χρήσης των καταχωρητών.
Κάτι τέτοιο δεν αλλάζει τίποτα από την σημειολογία, που περιγράφεται σε αυτό το κεφάλαιο.

** Σημειώσεις

- Όταν μια τιμή μπορεί να έχει αναφορά σε αυτή, αφού η συνάρτηση που δημιουργεί την τιμή, επιστρέφει.
- Όταν ο μεταγλωττιστής αποφασίζει ότι μια τιμή δεν χωράει στην στοίβα.
- Όταν ο μεταγλωττιστής δεν γνωρίζει το μέγεθος της τιμής κατά το στάδιο της μεταγλώττισης.
- Όταν μια τιμή είναι αποσυνδεδεμένη, εξαιτίας της χρήσης συναρτήσεων ή τιμών διεπαφών.

** Σημειολογία Συλλογής Απορριμάτων  

Όταν μια τιμή δημιουργείται στον σωρό, ο Συλλέκτης Απορριμάτων (ΣΑ) πρέπει να 
αναλάβει δράση. Το πιο σημαντικό μέρος του ΣΑ είναι ο αλγόριθμος βηματοδότησης. Αυτός αποφασίζει
την συχνότητα/βηματισμό που χρειάζεται να λειτουργεί ο ΣΑ, προκειμένου να διατηρεί τον μικρότερο δυνατό  
σωρό, σε συνδυασμό με την καλύτερη δυνατή απόδοση της εφαρμογής.

- [[https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html][Σημειολογία Συλλογής Απορριμάτων Ι]] - William Kennedy

** Στοίβα αντί Σωρού

"Η στοίβα προορίζεται για δεδομένα που χρειάζεται να υπάρχουν μόνο για την διάρκεια ζωής της συνάρτησης
που τα δημιουργεί, τα οποία ανακυκλώνονται χωρίς κόστος όταν η συνάρτηση επιστρέφει. Ο 
σωρός προορίζεται για δεδομένα τα οποία χρειάζεται να συνεχίσουν να υπάρχουν και μετά την επιστροφή της συνάρτησης που τα δημιούργησε,
ενώ ανακυκλώνονται με συλλογή απορριμάτων, η οποία κάποιες φορές κοστίζει." - Ayan George

** Μεγέθυνση Στοίβας

Το μέγεθος κάθε πλαισίου μνήμης, για κάθε συνάρτηση, υπολογίζεται κατά το στάδιο της μεταγλώττισης. Αυτό σημαίνει ότι,
αν ο μεταγλωττιστής δεν γνωρίζει το μέγεθος της τιμής κατά το στάδιο της μεταγλώττισης, η τιμή πρέπει να
δημιουργηθεί στον σωρό. Ένα παράδειγμα αυτού είναι η χρήση της προεγκατεστημένης συνάρτησης make, προκειμένου να
δημιουργήσει κανείς μια φέτα, της οποίας το μέγεθος εξαρτάται από μια μεταβλητή.

    b := make([]byte, size) // Ο πίνακας (array), στον οποίο βασίζεται η φέτα,
                            // δεσμεύει μνήμη στον σωρό.

Η Go χρησιμοποιεί μια υλοποίηση συνεχόμενης στοίβας (contiguous stack implementation), προκειμένου να μπορεί να προσδιορίζει πως μεγεθύνονται και σμικρύνονται οι στοίβες.
Μια εναλλακτική που θα μπορούσε να είχε χρησιμοποιήσει η Go, είναι μια υλοποίηση τμηματικής στοίβας (segmented stack implementation), που
χρησιμοποιούν κάποια λειτουργικά συστήματα.

Κάθε κλήση συνάρτησης συνοδεύεται από ένα εισαγωγικό σημείωμα, που διατυπώνει την εξής ερώτηση: "Υπάρχει αρκετός χώρος στην στοίβα
για αυτό το νέο πλαίσιο μνήμης;". Αν η απάντηση είναι ναι, τότε δεν υπάρχει κανένα πρόβλημα και το πλαίσιο δεσμεύεται και
λαμβάνει αρχική τιμή. Διαφορετικά, πρέπει να κατασκευαστεί μια μεγαλύτερη στοίβα και η μνήμη στην 
υπάρχουσα στοίβα πρέπει να αντιγραφεί στην καινούργια. Αυτό απαιτεί αλλαγές σε 
δείκτες διευθύνσεων μνήμης, που έχουν αναφορές στην μνήμη της στοίβας. Τα πλεονεκτήματα της συνεχόμενης μνήμης (contiguous memory) και
οι γραμμικές προσπελάσεις των σύγχρονων υλικών, αποτελούν το αντάλλαγμα ή το κόστος της ανάγκης αντιγραφής.

Εξαιτίας της χρήσης συνεχόμενων στοιβών, καμία ρουτίνα συνεκτέλεσης της Go δεν είναι δυνατόν να διατηρεί δείκτη διευθύνσεων στην
στοίβα κάποιας άλλης ρουτίνα συνεκτέλεσης. Θα κόστιζε πολύ στο εκτελέσιμο περιβάλλον, να παρακολουθεί 
κάθε δείκτη διεύθυνσης, σε κάθε στοίβα και να αναπροσαρμόζει αυτούς τους δείκτες, προκειμένου να δείχνουν στις νέες τοποθεσίες.

** Πρόσθετα Αναγνώσματα

**Μηχανισμοί* *Δεικτών* *Διεύθυνσης* *Μνήμης*

- [[https://golang.org/doc/effective_go.html#pointers_vs_values][Δείκτες Διεύθυνσης αντί Τιμών]]    
- [[https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html][Οι Μηχανισμοί της Γλώσσας Σχετικά με τις Στοίβες και τους Δείκτες Διευθύνσεων]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2014/12/using-pointers-in-go.html][Χρησιμοποιώντας Δείκτες Διευθύνσεων στην Go]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2013/07/understanding-pointers-and-memory.html][Κατανοώντας τους Δείκτες Διευθύνσεων και την Διαδικασία Καταμερισμού της Μνήμης]] - William Kennedy    

*Στοίβες*

- [[https://docs.google.com/document/d/1wAaf1rYoM4S4gtnPh0zOlGzWtrZFQ5suE8qr2sD8uWQ/pub][Πρόταση Συνεχόμενης Στοίβας]]  

*Ανάλυση* *Διαφυγής* *και* *Ενθεση* *κώδικα* *(Inlining)*

- [[https://docs.google.com/document/d/1CxgUBPlx9iJzkz9JWkb6tIpTe5q32QDmz8l0BouG0Cw][Αδυναμίες της Ανάλυσης Διαφυγής της Go]]  
- [[https://github.com/golang/go/wiki/CompilerOptimizations][Βελτιστοποιήσεις Μεταγλωττιστή]]

*Συλλογή* *Απορριμάτων*

- [[http://gchandbook.org/][Το Εγχειρίδιο Συλλογής Απορριμάτων]]  
- [[https://github.com/golang/proposal/blob/master/design/44167-gc-pacer-redesign.md][Ανασχεδιασμός Βηματοδότη ΣΑ - 2021]] - Michael Knyszek  
- [[https://en.wikipedia.org/wiki/Tracing_garbage_collection][Ιχνογραφώντας την Συλλογή Απορριμάτων]]  
- [[https://blog.golang.org/go15gc][Το Blog της Go  - 1.5 ΣΑ]] 
- [[https://www.youtube.com/watch?v=aiv1JOfMjm0&index=16&list=PL2ntRZ1ySWBf-_z-gHCOR2N156Nw930Hm][ΣΑ της Go: Λύνοντας το Πρόβλημα της Καθυστέρησης]]  
- [[http://rubinius.com/2013/06/22/concurrent-garbage-collection][Παράλληλη Συλλογή Απορριμάτων]]  
- [[https://docs.google.com/document/d/1wmjrocXIWTr1JxU-3EQBI6BK6KgtiFArkG47XK73xIQ/edit][Βηματισμός του Παράλληλου Συλλέκτη Απορριμάτων της Go 1.5]]  
- [[https://github.com/golang/proposal/blob/master/design/17503-eliminate-rescan.md][Εξαλείφοντας την Επανασάρωση της Στοίβας]]  
- [[https://groups.google.com/forum/m/#!topic/golang-nuts/KJiyv2mV2pU][Γιατί ο συλλέκτης απορριμάτων της golang δεν υλοποιεί Γενεαλογική και Συμπαγή ΣΑ?]] - Ian Lance Taylor  
- [[https://blog.golang.org/ismmkeynote][Φτάνοντας στην Go: Το ταξίδι του Συλλέκτη Απορριμάτων της Go]] - Rick Hudson  
- [[https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html][Συλλογή Απορριμάτων στην : Μέρος I - Σημειολογία]] - William Kennedy  
- [[https://www.ardanlabs.com/blog/2019/05/garbage-collection-in-go-part2-gctraces.html][Συλλογή Απορριμάτων στην  : Μέρος II - Ιχνηλάτηση ΣΑ]] - William Kennedy  
- [[https://www.ardanlabs.com/blog/2019/07/garbage-collection-in-go-part3-gcpacing.html][Συλλογή Απορριμάτων στην  : Μέρος III - Βηματισμός ΣΑ]] - William Kennedy  
- [[https://blog.twitch.tv/en/2019/04/10/go-memory-ballast-how-i-learnt-to-stop-worrying-and-love-the-heap-26c2462549a2/][Το έρμα της μνήμης στην Go: Πως έμαθα να σταματήσω να ανησυχώ και να αγαπάω τον σωρό]] - Ross Engers  

*Βελτιστοποιήσεις* *Στατικής* *Μοναδικής* *Ανάθεσης*

- [[https://www.youtube.com/watch?v=D2-gaMvWfQY][GopherCon 2015: Ben Johnson - Ανάλυση Στατικού Κώδικα Χρησιμοποιώντας SSA]]  
- [[https://godoc.org/golang.org/x/tools/go/ssa][Το Πακέτο SSA]]    
- [[https://www.youtube.com/watch?v=FnGCDLhaxKU][Κατανοώντας τις Βελτιστοποιήσεις του Μεταγλωττιστή]]

* Ασκήσεις 

Χρησιμοποιήστε το παρόν πρότυπο ως σημείο αναφοράς προκειμένου να ολοκληρώσετε τις ασκήσεις. Σας παρέχεται μια πιθανή λύση.

** Άσκηση 1

*Μέρος* *Α:* Δηλώστε και δώστε αρχική τιμή σε μεταβλητή ακέραιου τύπου, με την τιμή 20.
Παρουσιάστε την "διεύθυνση της" και την "τιμή της" μεταβλητής.

*Μέρος* *Β:* Δηλώστε και δώστε αρχική τιμή σε μεταβλητή δείκτη διευθύνσεων ακέραιου τύπου, που δείχνει προς 
την τελευταία μεταβλητή, που μόλις δημιουργήσατε. Παρουσιάστε την "διεύθυνση της", την "τιμή της"  και την 
"τιμή στην οποία ο δείκτης διεύθυνσης δείχνει προς".

** Άσκηση 2

Δηλώστε έναν τύπο struct και δημιουργείστε μια τιμή αυτού του τύπου. Δημιουργήστε μια συνάρτηση που 
μπορεί να αλλάξει την τιμή κάποιου πεδίου, σε μεταβλητές αυτού του τύπου struct. Παρουσιάστε την τιμή, πριν
και μετά την κλήση της συνάρτησης σας.

.play pointers/exercise1.go
.play pointers/answer1.go
.play pointers/exercise2.go
.play pointers/answer2.go
