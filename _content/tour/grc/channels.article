Κανάλια Επικοινωνίας
Τα κανάλια επικοινωνίας επιτρέπουν στις ρουτίνες συνεκτέλεσης της Go να επικοινωνούν μεταξύ τους, μέσω σημειολογίας σηματοδότησης.

* Κανάλια Επικοινωνίας

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Παρακολουθήστε το Video]]
- Εάν Χρειάζεστε Οικονομική Συνδρομή, Χρησιμοποιήστε το Σχετικό [[https://www.ardanlabs.com/scholarship/][Έγγραφο Υποτροφίας]]

Είναι σημαντικό να σκέφτεται κανείς ένα κανάλι επικοινωνίας, όχι ως δομή δεδομένων αλλά
ως ένα μηχανισμό για σηματοδότηση. Αυτό συμβαδίζει με την ιδέα, ότι κανείς στέλνει και 
λαμβάνει από ένα κανάλι επικοινωνίας, αλλά δεν διαβάζει και γράφει. Αν το πρόβλημα που
αντιμετωπίζει κανείς, δεν μπορεί να επιλυθεί με σηματοδότηση ή αν η λέξη σηματοδότηση 
δεν προφέρεται εύκολα, σε όποια δεδομένη υλοποίηση επιδιώκει κανείς, τότε θα πρέπει να 
αμφισβητήσει την χρήση καναλιών επικοινωνίας.

** Επισκόπηση Κώδικα

- *Παράδειγμα* *1:* Αναμονή για αποτελέσματα 
- *Παράδειγμα* *2:* Πρότυπο διασκορπισμού
- *Παράδειγμα* *3:* Αναμονή για εργασία
- *Παράδειγμα* *4:* Δημιουργία κοινού αποθέματος
- *Παράδειγμα* *5:* Σηματοφόρος για πρότυπο διασκορπισμού
- *Παράδειγμα* *6:* Απόθεμα εργασιών με περιορισμούς
- *Παράδειγμα* *7:* Εγκατάλειψη
- *Παράδειγμα* *8:* Ακύρωση 
- *Παράδειγμα* *9:* Επαναπροσπάθεια μετά χρόνο timeout
- *Παράδειγμα* *10:* Ακύρωση Καναλιού Επικοινωνίας

.play channels/example1.go
.play channels/example2.go
.play channels/example3.go
.play channels/example4.go
.play channels/example5.go
.play channels/example6.go
.play channels/example7.go
.play channels/example8.go
.play channels/example9.go
.play channels/example10.go

** Μηχανισμός Καναλιών Επικοινωνίας

Το κόστος της ύπαρξης εγγυήσεων στο επίπεδο της σηματοδότησης, είναι η άγνωστη 
καθυστέρηση απόκρισης (στμ. latency). Ο αποστολέας δεν θα γνωρίζει πόσο πολύ πρέπει να περιμένει, 
ώστε ο παραλήπτης να αποδεχθεί τη σηματοδότηση. Η ανάγκη αναμονής για τον παραλήπτη 
δημιουργεί καθυστέρηση απόκρισης που εμποδίζει. Μάλιστα, σε αυτή την περίπτωση,
πρόκειται για άγνωστη διάρκεια καθυστέρησης απόκρισης που εμποδίζει. Ο αποστολέας 
πρέπει να περιμένει για άγνωστη διάρκεια χρόνου έως ότου ο παραλήπτης καταστεί διαθέσιμος 
να λάβει το σήμα.

Η αναμονή για τον παραλήπτη σημαίνει ότι μηχανικά, η λειτουργία παραλαβής, συμβαίνει πριν
την αποστολή. Με τα κανάλια επικοινωνίας, η παραλαβή μπορεί να πραγματοποιείται 
προηγουμένως για κάποια nanosecond, γίνεται παρόλα αυτά, πριν την αποστολή.
Αυτό σημαίνει, ότι ο παραλήπτης παραλαμβάνει το σήμα και στην συνέχεια απομακρύνεται,
επιτρέποντας στον αποστολέα να προχωρήσει, έχοντας μια εγγύηση.

Τι θα συμβεί όμως, αν η διαδικασία δεν μπορεί να περιμένει, για έναν απροσδιόριστο 
χρόνο; Τι θα συμβεί αν τέτοια καθυστέρηση απόκρισης, δεν δουλεύει; Τότε, η εγγύηση
δεν μπορεί να είναι στο επίπεδο της σηματοδότησης, αλλά πρέπει να βρίσκεται εκτός αυτής.
Ο μηχανισμός πίσω από αυτή την λειτουργία είναι, ότι η αποστολή τώρα συμβαίνει πριν την
παραλαβή. Ο αποστολέας μπορεί να πραγματοποιήσει την σηματοδότηση, χωρίς να χρειάζεται 
να είναι διαθέσιμος ο παραλήπτης. Επομένως ο αποστολέας μπορεί να απομακρυνθεί, χωρίς να
χρειάζεται να περιμένει. Τελικά, κανείς ελπίζει ότι ο παραλήπτης θα εμφανιστεί και θα 
παραλάβει το σήμα.

Με τα παραπάνω, μειώνεται η καθυστέρηση απόκρισης κατά την αποστολή, όμως δημιουργείται
αβεβαιότητα σχετικά με παραλαμβανόμενα σήματα και συνεπώς, αβεβαιότητα για το αν υπάρχουν 
προβλήματα πιο ψηλά στην αλυσίδα με τους παραλήπτες. Κάτι τετοιο μπορεί να οδηγήσει την 
διαδικασία να αποδεχθεί μια εργασία, η οποία δεν ξεκινάει ποτέ ή δεν τελειώνει ποτέ. Κάτι τέτοιο 
θα μπορούσε να προκαλέσει τελικά, έντονη πίεση και να οδηγήσει στην κατάρρευση του συστήματος.

Το δεύτερο, στο οποίο πρέπει κανείς να επικεντρωθεί είναι, αν χρειάζεται να σταλούν δεδομένα,
μαζί με το σήμα. Εάν μέρος της σηματοδότησης είναι και η μετάδοση δεδομένων, τότε η σηματοδότηση 
είναι 1 προς 1 μεταξύ των ρουτίνων συνεκτέλεσης της Go. Αν επιπλέον, μια νέα ρουτίνα συνεκτέλεσης της Go χρειάζεται να παραλάβει 
το σήμα, πρέπει να αποσταλεί και δεύτερο σήμα.

Αν δεν χρειάζεται να μεταδοθούν δεδομένα μαζί με το σήμα, τότε το σήμα μπορεί να 
είναι 1 προς 1 ή 1 προς πολλά, μεταξύ ρουτίνων συνεκτέλεσης της Go. Η σηματοδότηση χωρίς δεδομένα, 
χρησιμοποιείται, κατά κύριο λόγο, για ακύρωση ή τερματισμούς. Ο τρόπος με τον οποίο 
επιτυγχάνονται αυτά, είναι με το κλείσιμο του καναλιού επικοινωνίας.

Το τρίτο στο οποίο πρέπει να επικεντρωθεί κανείς, είναι η κατάσταση του καναλιού 
επικοινωνίας. Ένα κανάλι επικοινωνίας μπορεί να βρίσκεται σε 1 από 3 καταστάσεις.

Ένα κανάλι επικοινωνίας μπορεί να βρίσκεται σε μια κατάσταση με τιμή nil, όταν δημιουργείται 
το κανάλι επικοινωνίας και βρίσκεται στην κατάσταση μηδενική τιμής. Οι αποστολές και οι 
παραλαβές όταν το κανάλι επικοινωνίας βρίσκεται σε αυτή την κατάσταση θα εμποδίζουν (στμ. blocking). Αυτό 
είναι καλό για περιπτώσεις όπου κανείς θέλει να υλοποιήσει βραχυχρόνιες παύσεις κάποιας 
εργασίας.

Ένα κανάλι μπορεί να είναι σε ανοιχτή κατάσταση κάνοντας χρήση της προεγκατεστημένης 
συνάρτησης make. Αποστολές και παραλαβές όταν ένα κανάλι βρίσκεται σε αυτή την κατάσταση 
θα λειτουργούν κάτω από τις ακόλουθες συνθήκες:

*Κανάλια* *Επικοινωνίας* *χωρίς* *Ενδιάμεση* *Μνήμη:*

- Εγγυήσεις στο επίπεδο σηματοδότησης, με την παραλαβή να πραγματοποιείται πριν από την 
  αποστολή. Οι ρουτίνες συνεκτέλεσης της Go που αποστέλλουν και παραλαμβάνουν, χρειάζεται να βρεθούν στον ίδιο 
  χώρο και χρόνο προκειμένου γίνει η επεξεργασία ενός συστήματος.

*Κανάλια* *Επικοινωνίας* *με* *Ενδιάμεση* *Μνήμη:*

- Εγγυήσεις εκτός του επιπέδου σηματοδότησης, με την αποστολή να συμβαίνει πριν την παραλαβή. 
  Αν η ενδιάμεση μνήμη (στμ. buffer) δεν είναι γεμάτη, οι αποστολές μπορούν να ολοκληρωθούν, διαφορετικά 
  εμποδίζουν. Αν η προσωρινή μνήμη δεν είναι άδεια, οι παραλαβές μπορούν να ολοκληρωθούν, 
  διαφορετικά εμποδίζουν.

Ένα κανάλι επικοινωνίας μπορεί να βρίσκεται σε μια κλειστή κατάσταση, ύστερα από την χρήση της 
προεγκατεστημένης συνάρτησης close. Δεν είναι αναγκαίο να γίνει χρήση της close σε ένα κανάλι
επικοινωνίας, προκειμένου να απελευθερωθεί μνήμη, αλλά για να αλλάξει η κατάσταση του καναλιού 
επικοινωνίας. Η αποστολή σε ένα κλειστό κανάλι θα προκαλέσει κατάσταση panic, ενώ μια παραλαβή 
σε κλειστό κανάλι επικοινωνίας θα επιστρέψει αμέσως.

Με όλη αυτή την πληροφορία, κανείς μπορεί να επικεντρωθεί σε πρότυπα για κανάλια επικοινωνίας. 
Η επικέντρωση στην σηματοδότηση είναι σημαντική. Η βασική ιδέα είναι, αν κανείς χρειάζεται μια
εγγύηση στο επίπεδο σηματοδότησης ή όχι, πάντα βασιζόμενος στον προβληματισμό σχετικά με την 
καθυστέρηση απόκρισης. Επίσης, αν κανείς χρειάζεται να μεταδώσει δεδομένα μαζί με το σήμα ή όχι, 
πάντα βασιζόμενος στην διαχείριση ακυρώσεων ή όχι. Χρειάζεται κανείς να μετατρέψει τους συντακτικούς 
κανόνες σε αυτή την σημειολογία.

** Οδηγίες Σχεδιασμού

- Μάθετε σχετικά με τις [[https://github.com/ardanlabs/gotraining/blob/master/topics/go/#channel-design][οδηγίες σχεδιασμού]] για κανάλια επικοινωνίας.

** Διαγράμματα

*Εγγύηση* *Παράδοσης*

Η `Εγγύηση Παράδοσης` βασίζεται σε μια ερώτηση: “Χρειάζεται κανείς μια εγγύηση 
ότι η σηματοδότηση που στάλθηκε από συγκεκριμένη ρουτίνα συνεκτέλεσης της Go, έχει παραληφθεί;”

.image /tour/grc/static/img/guarantee_of_delivery.png

*Σηματοδότηση* *Με* *ή* *Χωρίς* *Δεδομένα*

Όταν κανείς πρόκειται να σηματοδοτήσει `με` δεδομένα, υπάρχουν τρεις διαφορετικές 
επιλογές ρυθμίσεων καναλιών επικοινωνίας, που μπορεί να επιλέξει κανείς, ανάλογα με 
το είδος της `εγγύησης` που χρειάζεται.

.image /tour/grc/static/img/signaling_with_data.png

Η σηματοδότηση χωρίς δεδομένα υπηρετεί τον κύριο σκοπό της ακύρωσης. Επιτρέπει σε μια 
ρουτίνα συνεκτέλεσης της Go να σηματοδοτήσει σε μια άλλη ρουτίνα συνεκτέλεσης της Go προκειμένου να ακυρώσει ό,τι κάνουν 
και να συνεχίσει. Η ακύρωση μπορεί να υλοποιηθεί κάνοντας χρήση καναλιών επικοινωνίας 
τόσο χωρίς, όσο και με ενδιάμεση μνήμη. 

.image /tour/grc/static/img/signaling_without_data.png

*Κατάσταση*

Η συμπεριφορά ενός καναλιού επηρεάζεται ευθέως από την τρέχουσα `κατάσταση`. Η κατάσταση
ενός καναλιού επικοινωνίας μπορεί να είναι `nil`, `ανοικτή` ή `κλειστή`.

.image /tour/grc/static/img/state.png

** Πρόσθετα Αναγνώσματα 

- [[https://www.ardanlabs.com/blog/2017/10/the-behavior-of-channels.html][Η Συμπεριφορά Καναλιών Επικοινωνίας]] - William Kennedy  
- [[https://golang.org/ref/mem#tmp_7][Κανάλια Επικοινωνίας]]    
- [[https://blog.golang.org/share-memory-by-communicating][Κοινή Χρήση Μνήμης Μέσω Επικοινωνίας]] - Andrew Gerrand    
- [[https://www.ardanlabs.com/blog/2014/02/the-nature-of-channels-in-go.html][Η Φύση των Καναλιών στην Go]] - William Kennedy    
- [[http://matt-welsh.blogspot.com/2010/07/retrospective-on-seda.html][Μια Αναδρομή στην SEDA]] - Matt Welsh    
- [[https://www.youtube.com/watch?v=KBZlN0izeiY][Κατανοώντας τα Κανάλια Επικοινωνίας]] - Kavya Joshi    

** Φούσκωμα ενδιάμεσης μνήμης - 2011

Κανείς πρέπει να επιδεικνύει προσοχή με την χρήση μεγάλης ενδιάμεσης μνήμης (στμ. buffers), μαζί με την ιδέα της μείωσης της καθυστέρηση απόκρισης.

- Μεγάλες ενδιάμεσες μνήμες εμποδίζουν την έγκαιρη ειδοποίηση για αυξανόμενη πίεση.
- Εμποδίζουν την ικανότητα κάποιου να μειώσει την αυξανόμενη πίεση έγκαιρα.
- Μπορούν να αυξήσουν την καθυστέρηση απόκρισης και όχι να την μειώσουν.
- Η χρήση καναλιών επικοινωνίας με ενδιάμεση μνήμη θα πρέπει να γίνεται ως μια απόπειρα διατήρησης συνέχειας.
- Δεν πρέπει κανείς να τα χρησιμοποιεί μόνο για απόδοση.
- Κανείς πρέπει να τα χρησιμοποιεί προκειμένου να χειριστεί σαφή ξεσπάσματα με δεδομένα.
- Κανείς πρέπει να τα χρησιμοποιεί προκειμένου να διαχειριστεί ταχύτατα ζητήματα μεταξύ των παραδόσεων.

*Videos*

- [[https://www.youtube.com/watch?v=qbIozKVz73g][Φούσκωμα ενδιάμεσης μνήμης: Σκοτεινές Ενδιάμεσες Μνήμες στο Internet]]  
- [[http://www.bufferbloat.net/projects/cerowrt/wiki/Bloat-videos][Video για το Φούσκωμα της Ενδιάμεσης Μνήμης]]  

* Ασκήσεις

Χρησιμοποιήστε το παρόν πρότυπο ως σημείο αναφοράς προκειμένου να ολοκληρώσετε τις ασκήσεις. Σας παρέχεται μια πιθανή λύση.

** Άσκηση 1

Γράψτε ένα πρόγραμμα όπου δύο ρουτίνες συνεκτέλεσης της Go περνάνε μπρος-πίσω έναν ακέραιο, δέκα φορές.
Παρουσιάστε πότε η κάθε ρουτίνα συνεκτέλεσης της Go παραλαμβάνει τον ακέραιο. Αυξήστε την τιμή του 
ακεραίου σε κάθε πέρασμα. Όταν ο ακέραιος ισούται με δέκα, τερματίστε το πρόγραμμα, 
προσεκτικά.

.play channels/exercise1.go 
.play channels/answer1.go

** Άσκηση 2

Γράψτε ένα πρόγραμμα που χρησιμοποιεί ένα πρότυπο διασκορπισμού (στμ. fan-out) για να παράξει 100 τυχαίους 
αριθμούς με ταυτόχρονη εκτέλεση. Κάθε ρουτίνα συνεκτέλεσης της Go πρέπει να δημιουργεί ένα τυχαίο αριθμό 
και να επιστρέφει αυτό τον αριθμό στην κύρια συνάρτηση, μέσω ενός καναλιού επικοινωνίας με ενδιάμεση
μνήμη. Ορίστε το μέγεθος του καναλιού επικοινωνίας με ενδιάμεση μνήμη έτσι ώστε καμία 
αποστολή να μην εμποδίζει, ποτέ. Μην εκχωρήσετε περισσότερες ενδιάμεσες μνήμες, απ' όσες 
χρειάζεστε. Ζητήστε από την κύρια ρουτίνα συνεκτέλεσης της Go να παρουσιάσει κάθε τυχαίο αριθμό που παραλαμβάνει 
και στην συνέχεια να τερματίζει το πρόγραμμα.

.play channels/exercise2.go 
.play channels/answer2.go

** Άσκηση 3

Γράψτε ένα πρόγραμμα που δημιουργεί εώς 100 τυχαίους αριθμούς με ταυτόχρονη εκτέλεση. Δεν πρέπει 
να αποστείλετε και τις 100 τιμές ώστε ο αριθμός των αποστολών/παραλήψεων να είναι άγνωστος. 

.play channels/exercise3.go 
.play channels/answer3.go
 
** Άσκηση 4

Γράψτε ένα πρόγραμμα που παράγει έως 100 τυχαίους αριθμούς με ταυτόχρονη εκτέλεση, χρησιμοποιώντας ένα
απόθεμα εργασιών. Απορρίψτε τις ζυγές τιμές. Καθοδηγείστε τους εργάτες προκειμένου να τερματίσουν όταν έχουν συλλεχθεί
100 μονοί αριθμοί. 

.play channels/exercise4.go 
.play channels/answer4.go
