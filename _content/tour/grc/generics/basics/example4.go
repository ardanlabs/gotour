//go:build OMIT

// Όλα τα υλικά είναι αδειοδοτημένα υπό την Άδεια Apache Έκδοση 2.0, Ιανουάριος 2004
// http://www.apache.org/licenses/LICENSE-2.0

// Δείγμα προγράμματος, προκειμένου να παρουσιαστεί ο τρόπος συγγραφής μια
// συνάρτησης, που παρέχει μια λύση γενικού προγραμματισμού, η οποία επιτρέπει
// να περάσει και να τυπωθεί μια φέτα οποιουδήποτε τύπου T (ο οποίος θα
// προσδιοριστεί αργότερα)
package main

import (
	"fmt"
)

// Προκειμένου να αποφευχθεί η αμφισημία με τις δηλώσεις πινάκων,
// οι παράμετροι τύπων απαιτούν να εφαρμοστεί κάποιος περιορισμός.
// Ο περιορισμός `any` υποδηλώνει, ότι δεν υπάρχει κανένας περιορισμός
// στο τύπο, που μπορεί να γίνει ο T. Το προεγκατεστημένο αναγνωριστικό
// `any` είναι ένα ψευδώνυμο (στμ. alias) για την `interface{}`.
//
// Αυτός ο κώδικας μοιάζει περισσότερο με την πραγματική υλοποίηση, με
// την οποία ξεκινήσαμε και είναι περισσότερο εύκολο να τον διαβάσει
// κανείς, απ' ότι είναι η υλοποίηση με την αντανάκλαση.

func print[T any](slice []T) {
	fmt.Print("Generic: ")

	for _, v := range slice {
		fmt.Print(v, " ")
	}

	fmt.Print("\n")
}

// =============================================================================

func main() {
	numbers := []int{1, 2, 3}
	print(numbers)

	strings := []string{"A", "B", "C"}
	print(strings)
}
