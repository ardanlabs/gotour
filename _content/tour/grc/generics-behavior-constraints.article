Συμπεριφορά ως Περιορισμός
Κάθε τύπος γενικού προγραμματισμού απαιτεί να υπάρχει δηλωμένος ένας περιορισμός, ώστε ο μεταγλωττιστής να γνωρίζει ποιες αντικαταστάσεις πραγματικών τύπων μπορεί να δεχτεί ή να απορρίψει, κατά το στάδιο της μεταγλώττισης. 

* Γενικός Προγραμματισμός - Συμπεριφορά ως Περιορισμός

Κάθε τύπος γενικού προγραμματισμού απαιτεί να υπάρχει δηλωμένος ένας περιορισμός, 
ώστε ο μεταγλωττιστής να γνωρίζει ποιες αντικαταστάσεις πραγματικών τύπων μπορεί να 
δεχτεί ή να απορρίψει, κατά το στάδιο της μεταγλώττισης. Κάτι τέτοιο απαιτείται 
ακόμα και αν δεν υπάρχει πραγματικός περιορισμός, για το τι μπορεί να είναι ο γενικός 
τύπος, γι' αυτό υπάρχει το προεγκατεστημένο αναγνωριστικό any.

** Video

Μπορεί κανείς να παρακολουθήσει την ομιλία του Bill Kennedy, σχετικά με τον Γενικό Προγραμματισμό,
που παρουσιάζει λεπτομερώς όλα τα παραδείγματα αυτής της ενότητας της Επισκόπησης.

.html generics-video.html

** Επισκόπηση Κώδικα

- *Παράδειγμα* *1*: Πραγματική συνάρτηση stringify
- *Παράδειγμα* *2*: Συνάρτηση stringify με διαβεβαίωση τύπου
- *Παράδειγμα* *3*: Συνάρτηση stringify με διεπαφή
- *Παράδειγμα* *4*: Γενική συνάρτηση stringify 

.play generics/behavior-constraints/example1.go
.play generics/behavior-constraints/example2.go
.play generics/behavior-constraints/example3.go
.play generics/behavior-constraints/example4.go

** Επεξηγήσεις

Είναι ενδιαφέρον, ότι η έννοια του περιορισμού υπάρχει ήδη στην γλώσσα.

    type User struct {
        name string
    }
    
    func (u User) String() string {
        return u.name
    }
    
    type Stringer interface {
        String() string
    }
    
    func Concrete(u User) {
        u.String()
    }

    func Polymorphic(s Stringer) {
        s.String()
    }

Ο κώδικας ορίζει έναν πραγματικό τύπο με το όνομα User και υλοποιεί μια μέθοδο τύπου
με το όνομα String, που επιστρέφει την τιμή του πεδίου name του User. Στην συνέχεια, δηλώνεται ένας
τύπος διεπαφής με το όνομα Stringer, που δηλώνει μια συμπεριφορά με το όνομα String, 
η οποία επιστρέφει μια συμβολοσειρά. Εξαιτίας της μεθόδου τύπου, που δηλώθηκε για τον 
User, μπορεί κανείς να πει ότι, ο πραγματικός τύπος User υλοποιεί την διεπαφή Stringer, 
χρησιμοποιώντας σημειολογία τιμής.

Η συνάρτηση Concrete είναι μια συνάρτηση, που δέχεται πραγματικά δεδομένα, με βάση το 
τι είναι. Η συνάρτηση Polymorphic είναι επίσης μια συνάρτηση, που αποδέχεται πραγματικά 
δεδομένα, βασιζόμενη στο τι μπορούν να κάνουν (στμ. τα δεδομένα). Αυτή είναι η βασική διαφορά ανάμεσα σε 
μια πραγματική και μια πολυμορφική συνάρτηση. Η μια είναι περιορισμένη σε ένα τύπο 
δεδομένων, ενώ η άλλη, δεν είναι. Όμως, υπάρχει ένας περιορισμός, ποια πραγματικά δεδομένα 
μπορούν να περάσουν στην πολυμορφική συνάρτηση.

Η διεπαφή Stringer ορίζει αυτόν το περιορισμό, με την δήλωση ενός συνόλου μεθόδων τύπου 
με συμπεριφορές, που πρέπει να είναι σε θέση να παρουσιάσουν τα πραγματικά δεδομένα. Όταν 
παρέχεται ως ο τύπος εισόδου, ο μεταγλωττιστής μπορεί να εγγυηθεί, ότι ο συμπεριφορικός
περιορισμός ικανοποιείται κάθε φορά που καλείται η συνάρτηση.

Υπάρχουν συναρτήσεις γενικού προγραμματισμού, που απαιτούν το ίδιο είδος συμπεριφορικού περιορισμού. 

    func stringify[T fmt.Stringer](slice []T) []string {
        ret := make([]string, 0, len(slice))
        
        for _, value := range slice {
            ret = append(ret, value.String())
        }
        
        return ret
    }

Εδώ είναι μια συνάρτηση γενικού προγραμματισμού  stringify. Αποδέχεται μια φέτα κάποιου τύπου T και επιστρέφει 
μια φέτα τιμών συμβολοσειράς, που περιέχει μια εκδοχή συμβολοσειράς κάθε τιμής από την 
συλλογή εισόδου. Το κλειδί για την λειτουργία αυτής της συνάρτησης είναι η κλήση μεθόδου τύπου 
String για κάθε τιμή τύπου T.

Το πρόβλημα είναι, ότι ο μεταγλωττιστής χρειάζεται να ξέρει και να μπορεί να επιβεβαιώσει, 
ότι οι τιμές τύπου T, πράγματι έχουν μια μέθοδο τύπου με το όνομα String. Όταν δηλώνεται ο 
γενικός τύπος T, η διεπαφή fmt.Stringer παρέχεται ως ο περιορισμός. Ο μεταγλωττιστής τώρα 
γνωρίζει, πως να ελέγξει κάθε αντικατάσταση τύπου και δεδομένα, που περνάνε στην συνάρτηση, 
για το παρόν σύνολο μεθόδων τύπου και τις σχετικές συμπεριφορές.

Κάτι τέτοιο είναι εξαιρετικό, επειδή η διεπαφή χρησιμοποιείται ξανά για τον ίδιο σκοπό και η 
γλώσσα δεν χρειάζεται μια καινούργια λέξη-κλειδί.

* Ασκήσεις

Χρησιμοποιήστε το παρόν πρότυπο ως σημείο αναφοράς προκειμένου να ολοκληρώσετε τις ασκήσεις. Σας παρέχεται μια πιθανή λύση.

** Άσκηση 1

Υλοποιήστε μια συνάρτηση γενικού προγραμματισμού με το όνομα marshal, που να μπορεί να σειριοποιήσει 
(στμ. marshal) JSON όμως δέχεται μόνο τιμές, που υλοποιούν την διεπαφή json.Marshaler interface.

.play generics/behavior-constraints/exercise1.go 
.play generics/behavior-constraints/answer1.go
