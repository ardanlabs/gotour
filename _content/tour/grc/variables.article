Μεταβλητές
Οι μεταβλητές βρίσκονται στην καρδιά της γλώσσας και παρέχουν την δυνατότητα ανάγνωσης από την μνήμη καθώς και εγγραφής στην μνήμη.

* Μεταβλητές

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Παρακολουθήστε το Video]]
- Εάν Χρειάζεστε Οικονομική Συνδρομή, Χρησιμοποιήστε το Σχετικό [[https://www.ardanlabs.com/scholarship/][Έγγραφο Υποτροφίας]]

Οι μεταβλητές βρίσκονται στην καρδιά της γλώσσας και παρέχουν την δυνατότητα ανάγνωσης απο 
την μνήμη και εγγραφής στην μνήμη. Στην Go, η πρόσβαση στην μνήμη προστατεύεται με την χρήση τύπων για τις μεταβλητές. 
Αυτό σημαίνει ότι, ο μεταγλωττιστής παίρνει πολύ σοβαρά τους τύπους των μεταβλητών και δεν μας επιτρέπει να χρησιμοποιήσουμε 
μεταβλητές εκτός του πλαισίου, μέσα στο οποίο ορίστηκαν.

** Ανασκόπηση Κώδικα

- *Παράδειγμα* *1*: Δείγμα προγράμματος που παρουσιάζει, πως ορίζονται οι μεταβλητές.

.play variables/example1.go

** Προεγκατεστημένοι Τύποι Μεταβλητών 
Οι τύποι των μεταβλητών παρέχουν συνοχή και αναγνωσιμότητα στον κώδικα, αναγκάζοντας τον χρήστη 
να κάνει 2 ερωτήσεις στον εαυτο του:

- Ποιό είναι το μέγεθος της μνήμης, που πρέπει να διατεθεί ? (π.χ. 1, 2, 4, 8 byte)
- Τι αναπαριστά αυτή η δεσμευμένη περιοχή μνήμης? (π.χ. int, uint, bool,..)

Οι τύποι των μεταβλητών μπορούν να εξειδικευτούν με συγκεκριμένη αριθμητική ακρίβεια, όπως int32 ή int64:

- ο uint8 αναπαριστά έναν φυσικό αριθμό, κάνοντας χρήση 1 byte μνήμης
- ο int32 αναπαριστά έναν ακέραιο αριθμό, δεσμεύοντας 4 byte μνήμης. 

Όταν ορίζετε ένα τύπο μεταβλητών 
χρησιμοποιώντας κάποιον άλλο τύπο χωρίς αριθμητική ακρίβεια (uint, int), το μέγεθος της τιμής μιας μεταβλητής αυτού του τύπου, βασίζεται 
στην αρχιτεκτονική που χρησιμοποιείται για την δημιουργία του προγράμματος:

- στην αρχιτεκτονική 32 bit: ο int αναπαριστά έναν ακέραιο δεσμεύοντας 4 byte μνήμης
- στην αρχιτεκτονική 64 bit: ο int αναπαριστά έναν ακέραιο δεσμεύοντας 8 byte μνήμης

** Μέγεθος Λέξης

Το μέγεθος της λέξης (word) εκφράζει το μέγεθος της δεσμευμένης μνήμης που χρειάζεται, προκειμένου να αποθηκευτούν ακέραιοι 
και δείκτες διεύθυνσης μεταβλητών (pointers), για μια δεδομένη αρχιτεκτονική. Για παράδειγμα:

- στην αρχιτεκτονική 32 bit: το μέγεθος λέξης είναι 4 bytes δεσμευμένης μνήμης 
- στην αρχιτεκτονική 64 bit: το μέγεθος λέξης είναι 8 bytes δεσμευμένης μνήμης

Τα παραπάνω είναι σημαντικά διότι, η Go έχει εσωτερικές δομές δεδομένων (πίνακες κατακερματισμού (maps), κανάλια συγχρονισμού (channels), φέτες (slices),
διεπαφές (interfaces), και συναρτήσεις (functions)), οι οποίες αποθηκεύουν ακέραιους και δείκτες διεύθυνσης. Το μέγεθος αυτών των δομών 
δεδομένων επομένως, θα βασίζεται στην αρχιτεκτονική που χρησιμοποιείται για την δημιουργία του προγράμματος. 

Στην Go, το μέγεθος της μνήμης, που δεσμεύεται για μια τιμή ακέραιου τύπου, για έναν δείκτη διεύθυνσης, ή για μια λέξη
θα είναι πάντα το ίδιο, για την ίδια αρχιτεκτονική.

** Η Έννοια της Μηδενικής Τιμής 
Κάθε μεταβλητή που δημιουργείτε στην Go, βρίσκεται σε μια αρχική κατάσταση, η οποία είναι ίδια με την μηδενική τιμή του τύπου της,
εκτος και αν καθορίσετε μια διαφορετική αρχική τιμή, κατά την δημιουργία της. Η μηδενική τιμή σημαίνει ότι,  
κάθε bit, σε κάθε byte λαμβάνει την τιμή μηδέν. 

Αυτό, συμβαίνει για την ακεραιότητα των δεδομένων και δεν είναι δωρεάν. Χρειάζεται χρόνος, προκειμένου να μετακινηθούν ηλεκτρόνια 
μέσα στην μηχανή για να μηδενιστούν αυτά τα bit, όμως κανείς οφείλει να επιλέγει την ακεραιότητα των δεδομένων, από την
απόδοση.

    Τύπος              Μηδενική Τιμή
    Boolean            false
    Integer            0
    Float              0
    Complex            0i
    String             "" (άδεια)
    Pointer            nil

** Δήλωση και Αρχική Τιμή Μεταβλητών 
Η λέξη-κλειδί var μπορεί να χρησιμοποιηθεί για την δημιουργία τιμών στην κατάσταση μηδενικής τιμής, για όλους τους τύπους μεταβλητών.

    var a int
    var b string
    var c float64
    var d bool

    fmt.Printf("var a int \t %T [%v]\n", a, a)
    fmt.Printf("var b string \t %T [%v]\n", b, b)
    fmt.Printf("var c float64 \t %T [%v]\n", c, c)
    fmt.Printf("var d bool \t %T [%v]\n\n", d, d)

Αποτέλεσμα:

    var a int    	int [0]
    var b string 	string []
    var c float64	float64 [0]
    var d bool   	bool [false]

Οι συμβολοσειρές (strings) χρησιμοποιούν το σύνολο χαρακτήρων UTF8, όμως στην πραγματικότητα είναι απλά μια συλλογή από byte.

Μια συμβολοσειρά στην Go, είναι μια εσωτερική δομή δεδομένων με μέγεθος δύο λέξεων :

- Η πρώτη λέξη αποτελείται από ένα δείκτη διεύθυνσης σε ένα υποστηρικτικό μονοδιάστατο πίνακα (array) απο byte
- Η δεύτερη λέξη περιλαμβάνει το μήκος ή τον αριθμό των byte, που καταλαμβάνει η συμβολοσειρά στον υποστηρικτικό μονοδιάστατο πίνακα
- Εαν η συμβολοσειρά βρεθεί στην κατάσταση μηδενικής τιμής, τότε η πρώτη λέξη γίνεται nil και η 
δεύτερη λέξη ισούται με 0.

Χρησιμοποιώντας κανείς τον τελεστή σύντομης δήλωσης μεταβλητών, μπορεί να δηλώσει, να δημιουργήσει και
να αποδώσει μια αρχική τιμή και όλα αυτά συμβαίνουν ταυτόχρονα.

    aa := 10       // int [10]
    bb := "hello"  // string [hello]
    cc := 3.14159  // float64 [3.14159]
    dd := true     // bool [true]

    fmt.Printf("aa := 10 \t %T [%v]\n", aa, aa)
    fmt.Printf("bb := \"hello\" \t %T [%v]\n", bb, bb)
    fmt.Printf("cc := 3.14159 \t %T [%v]\n", cc, cc)
    fmt.Printf("dd := true \t %T [%v]\n\n", dd, dd)

Αποτέλεσμα:

    aa := 10         int [10]
    bb := "hello"    string [hello]
    cc := 3.14159    float64 [3.14159]
    dd := true       bool [true]

** Μετατροπή αντί για Ανάθεση (Casting) 

Η Go δεν υποστηρίζει την ανάθεση ενός τύπου μεταβλητής σε κάποιο άλλο, αλλά υποστηρίζει την μετατροπή του ενός τύπου στον άλλο. Αντί να υποδείξει κανείς στον μεταγλωτιστή 
ότι, πρέπει να αντιστοιχίσει ένα σύνολο απο byte σε διαφορετική αναπαράσταση, αυτό που πρέπει να κάνει είναι αυτά τα byte να αντιγραφούν, σε μια καινούργια 
τοποθεσία μνήμης, που προορίζεται για την νέα αναπαράσταση.

    aaa := int32(10)
    fmt.Printf("aaa := int32(10) %T [%v]\n", aaa, aaa)

    Output:
    aaa := int32(10) int32 [10]

Η Go έχει ένα πακέτο στην προεγκατεστημένη βιβλιοθήκη της, που ονομάζεται unsafe αν κανείς χρειάζεται πραγματικά, να εκτελέσει 
μια διαδικασία ανάθεσης. Κανείς, θα πρέπει να αποφεύγει κάτι ανάλογο και να σκέφτεται πρώτα γιατί χρειάζεται 
να καταφύγει σε κάτι τέτοιο. Αντίθετα, η πραγματοποίηση μιας μετατροπής, παρέχει το υψηλότερο επίπεδο 
συνοχής, σε τέτοιες περιπτώσεις. 

** Σημειώσεις

- Ο σκοπός όλων των προγραμμάτων και όλων των μερών αυτών των προγραμμάτων είναι η μετατροπή δεδομένων, από μια μορφή σε μια άλλη.
- Ο κώδικας ουσιαστικά εκχωρεί μνήμη, διαβάζει από την μνήμη και γράφει στην μνήμη.
- Η κατανόηση των τύπων μεταβλητών είναι αναγκαία για την συγγραφή καλού κώδικα και για την κατανόηση κώδικα που έχει γραφεί από άλλους.
- Εαν κανείς δεν καταλαβαίνει τα δεδομένα, τότε δεν είναι σε θέση να κατανοήσει το πρόβλημα.
- Κανείς, καταλαβαίνει το πρόβλημα καλύτερα, αν είναι σε θέση να αντιληφθεί τα δεδομένα. 
- Όταν ορίζονται μεταβλητές και λαμβάνουν την μηδενική τους τιμή, κανείς οφείλει να χρησιμοποιεί την λέξη-κλειδί var.
- Όταν οι μεταβλητές, όχι μόνο δηλώνονται αλλά λαμβάνουν και αρχική τιμή, τότε κανείς οφείλει να χρησιμοποιεί τον τελεστή σύντομης δήλωσης μεταβλητών.

** Πρόσθετα Αναγνώσματα

- [[https://golang.org/ref/spec#Boolean_types][Προεγκατεστημένοι Τύποι Μεταβλητών]]    
- [[https://golang.org/doc/effective_go.html#variables][Μεταβλητές]]    
- [[https://www.ardanlabs.com/blog/2013/08/gustavos-ieee-754-brain-teaser.html][Ο Γρίφος του Gustavo σχετικά με το πρότυπο IEEE-754]] - William Kennedy    
- [[https://www.youtube.com/watch?v=sFUSP8Au_PE][Τι περιέχει ένα όνομα;]]    
- [[http://arcanesentiment.blogspot.com/2015/01/a-brief-history-of-type.html][Μια σύντομη ιστορική αναδρομή του όρου “τύπος”]] - Arcane Sentiment    

* Ασκήσεις

Χρησιμοποιήστε το παρόν πρότυπο ως σημείο αναφοράς προκειμένου να ολοκληρώσετε τις ασκήσεις. Σας παρέχεται μια πιθανή λύση.

** Άσκηση 1

*Μέρος* *Α:* Δηλώστε τρεις μεταβλητές, που λαμβάνουν ως αρχική τιμή τη μηδενική τους τιμή και
άλλες τρεις, που λαμβάνουν κάποια διαφορετική ρητή (literal) τιμή. Δηλώστε και χρησιμοποιήστε μεταβλητές τύπου συμβολοσειράς (string), ακεραίου αριθμού (int) και λογικών τιμών (bool).
Παρουσιάστε τις τιμές αυτών των μεταβλητών.

*Μέρος* *Β:* Δηλώστε μια νέα μεταβλητή τύπου κινητής υποδιαστολής 32 bit (float32) και δώστε αρχική τιμή στην μεταβλητή, 
μετατρέποντας την ρητή τιμή του π (3.14).

.play variables/exercise1.go
.play variables/answer1.go
