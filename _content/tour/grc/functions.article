Συναρτήσεις
Οι συναρτήσεις βρίσκονται στον πυρήνα της γλώσσας και παρέχουν ένα μηχανισμό ομαδοποίησης και οργάνωσης του κώδικα σε διαφορετικά μέρη λειτουργικότητας.

* Συναρτήσεις

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Παρακολουθήστε το Video]]
- Εαν Χρειάζεστε Οικονομική Συνδρομή, Χρησιμοποιήστε το Σχετικό [[https://www.ardanlabs.com/scholarship/][Έγγραφο Υποτροφίας]]

Οι συναρτήσεις βρίσκονται στον πυρήνα της γλώσσας και παρέχουν ένα μηχανισμό ομαδοποίησης 
και οργάνωσης του κώδικα σε διαφορετικά μέρη λειτουργικότητας. Μπορούν να
χρησιμοποιηθούν για να παρέχουν ένα API στα πακέτα που γράφει κανείς και είναι ένα θεμελιώδες συστατικό στην
ταυτόχρονη εκτέλεση κώδικα (concurrency).

Οι συναρτήσεις στην Go παίζουν ένα σημαντικό ρόλο στην δομή του κώδικα και στην προαγωγή ξεκάθαρου,
εύκολου να συντηρηθεί και αποτελεσματικού λογισμικού. Κατανοώντας πως δηλώνονται, πως ορίζονται και
πως χρησιμοποιούνται οι συναρτήσεις, είναι σημαντικό για την συγγραφή αποτελεσματικών προγραμμάτων στην Go.

** Επισκόπηση Κώδικα

- *Παράδειγμα* *1:* Επιστροφή Πολλαπλών Τιμών
- *Παράδειγμα* *2:* Κενό Αναγνωριστικό
- *Παράδειγμα* *3:* Δηλώσεις Συναρτήσεων Ξανά
- *Παράδειγμα* *4:* Ανώνυμες Συναρτήσεις/Εγκολπώσεις (Closures)
- *Παράδειγμα* *5:* Ανάκτηση ελέγχου μετά από Πανικούς

.play functions/example1.go
.play functions/example2.go
.play functions/example3.go
.play functions/example4.go
.play functions/example5.go

Οι συναρτήσεις είναι ένα θεμελιώδες μέρος των προγραμμάτων και χρησιμοποιούνται για την συλλογή 
και την οργάνωση κώδικα, για καλύτερη διάρθρωση και επαναχρησιμοποίηση. Οι συναρτήσεις είναι κομμάτια κώδικα
που επιτελούν συγκεκριμένο εργο ή ένα σύνολο συνδεόμενων εργασιών. Παρακάτω ακολουθεί μια επισκόπηση
των συναρτήσεων, στην Go:

** Δηλώσεις Συναρτήσεων

Για να δηλωθεί μια συνάρτηση στην Go, πρέπει κανείς να χρησιμοποιήσει την λέξη-κλειδί `func` ακολουθούμενη από
το όνομα της συνάρτησης, ένα κατάλογο παραμέτρων σε παρένθεση και έναν προαιρετικό 
τύπο επιστροφής. Ο γενικός συντακτικός κανόνας είναι:

   func όνομαΣυνάρτησης(παράμετρος1 τύπος, παράμετρος2 τύπος, ...) τύπος_επιστροφής {
       // Σώμα Συνάρτησης 
   }

Για παράδειγμα:

   func add(x int, y int) int {
       return x + y
   }

** Παράμετροι και Τιμές Επιστροφής

Οι συναρτήσεις μπορούν να πάρουν καμία ή περισσότερες παραμέτρους, οι οποίες είναι οι τιμές που δίνονται στην 
συνάρτηση όταν καλείται. Κάθε παράμετρος αποτελείται από ένα όνομα και ένα τύπο. Στο 
παράδειγμα παραπάνω, η `add` παίρνει δύο ακέραιες παραμέτρους, την `x` και την `y`.

Οι συναρτήσεις επιστρέφουν καμία ή περισσότερες τιμές (όταν δεν επιστρέφουν καμία τιμή είναι δυνατόν να παραλειφθεί 
ο τύπος επιστροφής). Η δήλωση `return` χρησιμοποιείται για να προσδιορίσει την τιμή επιστροφής.
Στο παράδειγμα παραπάνω, η `add` επιστρέφει έναν ακέραιο.

Η Go επιτρέπει στις συναρτήσεις να επιστρέφουν πολλαπλές τιμές. Αυτό είναι χρήσιμο σε περιπτώσεις που θέλει κανείς 
να επιστρέψει, περισσότερα του ενός αποτελέσματα, από μια συνάρτηση. Για παράδειγμα:

   func divide(x, y float64) (float64, error) {
       if y == 0 {
           return 0, errors.New("division by zero")
       }
       return x / y, nil
   }

Σε αυτό το παράδειγμα, η συνάρτηση `divide` επιστρέφει τόσο ένα αποτέλεσμα κινητής υποδιαστολής, όσο και
ένα σφάλμα (αν συμβεί διαίρεση με το μηδέν).

Η Go επιτρέπει τον ορισμό ονομάτων για τις τιμές επιστροφής, στην υπογραφή μιας συνάρτησης.
Οι επώνυμες τιμές επιστροφής παίρνουν αρχική τιμή αυτόματα και μπορούν να χρησιμοποιηθούν, σαν κανονικές
μεταβλητές, μέσα στη συνάρτηση. Είναι ιδιαίτερα χρήσιμες, όταν πρέπει να διαχειριστεί κανείς 
περίπλοκες συναρτήσεις ή αν πρέπει να διαχειριστεί σφάλματα. Για παράδειγμα:

   func divide(x, y float64) (result float64, err error) {
       if y == 0 {
           err = errors.New("division by zero")
           return
       }
       result = x / y
       return
   }

** Κλήσεις Συναρτήσεων 

Προκειμένου να καλέσει κανείς μια συνάρτηση στην Go, αρκεί να χρησιμοποιήσει το όνομα της συνάρτησης, 
ακολουθούμενο από ένα κατάλογο ορισμάτων, σε παρενθέσεις. Αν η συνάρτηση έχει πολλαπλές τιμές επιστροφής, 
κανείς μπορεί να τις αποθηκεύσει σε μεταβλητές. Για παράδειγμα:

   sum := add(3, 5)            // Κλήση της συνάρτησης add και ανάθεση του αποτελέσματος στην sum
   result, err := divide(8, 2) // Κλήση της συνάρτησης divide και αποθήκευση τόσο του result
                               // όσο και του σφάλματος

** Συναρτήσεις με Μεταβλητό Πλήθος Παραμέτρων 

Η Go υποστηρίζει συναρτήσεις με μεταβλητό πλήθος παραμέτρων, κάτι που επιτρέπει την ανάθεση μεταβλητού αριθμού 
ορισμάτων σε μια συνάρτηση. Προκειμένου να οριστεί μια παράμετρος μεταβλητού μήκους, κανείς μπορεί να χρησιμοποιήσει
τρεις τελείες (`...`) μετά τον τύπο της παραμέτρου. Για παράδειγμα:

   func calculateSum(nums ...int) int {
       sum := 0
       for _, num := range nums {
           sum += num
       }
       return sum
   }

Η παραπάνω συνάρτηση μπορεί να κληθεί με οποιονδήποτε αριθμό ακεραίων.

** Ανώνυμες Συναρτήσεις 

Η Go υποστηρίζει ανώνυμες συναρτήσεις, γνωστές και ως εγκολπώσεις (closures). Αυτές είναι συναρτήσεις 
χωρίς όνομα και μπορούν να εκχωρηθούν σε μεταβλητές και να χρησιμοποιηθούν ως ορίσματα σε
άλλες συναρτήσεις. Οι εγκολπώσεις, συχνά χρησιμοποιούνται στην Go για τον ορισμό ένθετων
συναρτήσεων ή για προγραμματισμό ταυτόχρονης εκτέλεσης (concurrency) με την χρήση ρουτίνων συνεκτέλεσης της Go.

   add := func(x, y int) int {
       return x + y
   }

   result := add(3, 5)

** Συναρτήσεις ως Τύποι

Στην Go, οι συναρτήσεις μπορούν επίσης να χρησιμοποιηθούν και ως τύποι. Αυτό επιτρέπει τον 
ορισμό συναρτήσεων που παίρνουν άλλες συναρτήσεις ως ορίσματα ή τις επιστρέφουν ως αποτελέσματα. 
Πρόκειται για ένα πολύ ισχυρό χαρακτηριστικό, που βοηθάει στον ορισμό συναρτήσεων υψηλότερης τάξης 
και συναρτήσεις που καλούν άλλες συναρτήσεις.

   type MathFunc func(int, int) int

   func operate(x, y int, op MathFunc) int {
       return op(x, y)
   }

Μπορεί κανείς να περάσει συναρτήσεις σαν ορίσματα στην `operate`.

** Αναβολή και Πανικός

Η Go παρέχει δύο ειδικές προεγκατεστημένες συναρτήσεις, την `defer` και την `panic` για την διαχείριση 
εξαιρετικών καταστάσεων και την διευθέτηση πόρων. Η `defer` χρησιμοποιείται για την εκτέλεση μιας συνάρτησης
αμέσως πριν επιστρέψει εκείνη που την περιέχει, ενώ η `panic` χρησιμοποιείται για την 
πρόκληση ενός σφάλματος σταδίου εκτέλεσης και για το ξετύλιγμα της στοίβας.

** Σημειώσεις 

- Οι συναρτήσεις μπορούν να επιστρέψουν πολλαπλές τιμές και οι περισσότερες επιστρέφουν μια τιμή σφάλματος.
- Το σφάλμα θα πρέπει να ελέγχεται πάντα ως μέρος της λογικής του προγράμματος.
- Το κενό αναγνωριστικό μπορεί να χρησιμοποιηθεί για να αγνοηθούν τιμές.
- Συντακτικός κανόνας: func, λήπτης μεθόδου, αναγνωριστικό, [παράμετροι], [επιστροφές], περιοχή κώδικα.
- Παράμετροι μεταβλητού πλήθους, ορίσματα μεταβλητού πλήθους και ξετύλιγμα φέτας.
- Οι συναρτήσεις είναι ένας τύπος: μπορούν να χρησιμοποιηθούν ως παράμετροι, ορίσματα και επιστροφές.
- Η defer χρησιμοποιείται για τον προγραμματισμό της κλήσης μιας συνάρτησης, σε μια άλλη συνάρτηση.
- Η panic προκαλεί ένα σφάλμα σταδίου εκτέλεσης και ξετυλίγει την στοίβα.
- Οι επώνυμες επιστροφές δεν είναι ευανάγνωστες και δεν συναντώνται σε κώδικα χαρακτηριστικό της Go.

** Πρόσθετα Αναγνώσματα

- [[https://golang.org/doc/effective_go.html#functions][Αποτελεσματική Go]] 
- [[https://www.ardanlabs.com/blog/2013/10/functions-and-naked-returns-in-go.html][Συναρτήσεις και Γυμνές επιστροφές στην Go]]  
- [[https://www.ardanlabs.com/blog/2013/06/understanding-defer-panic-and-recover.html][Κατανοώντας την defer, τους πανικούς και την recover]]

* Ασκήσεις 

Χρησιμοποιήστε το παρόν πρότυπο ως σημείο αναφοράς προκειμένου να ολοκληρώσετε τις 
ασκήσεις. Σας παρέχεται μια πιθανή λύση.

** Άσκηση 1

*Μέρος* *Α:* Δηλώστε έναν τύπο struct, που διατηρεί πληροφορίες για ένα χρήστη. Δηλώστε μια 
συνάρτηση, που δημιουργεί μια τιμή και επιστρέφει δείκτες διεύθυνσης αυτού του τύπου και μια τιμή
σφάλματος. Καλέστε αυτή την συνάρτηση από την main και παρουσιάστε την τιμή.

*Μέρος* *Β:* Κάντε μια δεύτερη κλήση στην συνάρτηση σας, όμως αυτή τη φορά αγνοείστε την τιμή 
και απλά ελέγξτε την τιμή σφάλματος.

.play functions/exercise1.go		
.play functions/answer1.go
