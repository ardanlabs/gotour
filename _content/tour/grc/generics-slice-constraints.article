Περιορισμοί Φετών 
Υπάρχουν κάποιες φορές, που θέλει κανείς να περιορίσει έναν τύπο γενικού προγραμματισμού, ώστε να είναι μόνο μια φέτα κάποιου τύπου.

* Γενικός Προγραμματισμός - Περιορισμοί Φετών 

Υπάρχουν κάποιες φορές, που θέλει κανείς να περιορίσει έναν τύπο γενικού προγραμματισμού, ώστε να είναι μόνο μια φέτα κάποιου τύπου.

** Video

Μπορεί κανείς να παρακολουθήσει την ομιλία του Bill Kennedy, σχετικά με τον Γενικό Προγραμματισμό,
που παρουσιάζει λεπτομερώς όλα τα παραδείγματα αυτής της ενότητας της Επισκόπησης.

.html generics-video.html

** Επισκόπηση Κώδικα

- *Παράδειγμα* *1*: Συνάρτηση Operate

.play generics/slice-constraints/example1.go

** Επεξηγήσεις

Εδώ, ο τύπος Numbers, που είναι ορισμένος από τον χρήστη, έχει ένα υποκείμενο τύπο, ο οποίος 
είναι μια φέτα ακεραίων. 

    type Numbers []int

Ο μεταγλωττιστής επιτρέπει σε κάποιον, να μετατρέψει μεταβλητές βασισμένες σε μια φέτα ακέραιων, 
σε μεταβλητές τύπου Numbers. Συνήθως, αυτό είναι κάτι καλό και αυτό που θέλει κανείς. Εξαιτίας 
αυτής της λειτουργικότητας, μπορεί κανείς να γράψει μια συνάρτηση γενικού προγραμματισμού, 
η οποία μπορεί να λειτουργήσει σε μια φέτα, η οποία να σέβεται τον υποκείμενο τύπο της φέτας.

    type operateFunc[T any] func(t T) T

    func operate[T any](slice []T, fn operateFunc[T]) []T {
        ret := make([]T, len(slice))
        for i, v := range slice {
            ret[i] = fn(v)
        }
        
        return ret
    }

Στον παραπάνω κώδικα, η συνάρτηση operate δηλώνει έναν τύπο γενικού προγραμματισμού 
T, ο οποίος μπορεί να είναι οτιδήποτε. Ο τύπος χρησιμοποιείται, προκειμένου να δηλωθεί
μια παράμετρος με το όνομα slice, που αποδέχεται μια φέτα, αυτού του ίδιου τύπου T. Η
συνάρτηση επίσης, δέχεται μια συνάρτηση γενικού προγραμματισμού του ίδιου τύπου με τον
T και επιστρέφει επίσης, μια φέτα στοιχείων τύπου T.

    type Numbers []int
    
    func Double(n Numbers) Numbers {
        fn := func(n int) int {
            return 2 * n
        }
    
        numbers := operate(n, fn)
        fmt.Printf("%T", numbers)
        return numbers
    }

Αποτέλεσμα:

    []int

Η συνάρτηση Double δέχεται μια τιμή τύπου Numbers και περνάει αυτή την τιμή στην συνάρτηση 
operate. Σε αυτή την περίπτωση, ο μεταγλωττιστής χρησιμοποιεί τον υποκείμενο τύπο int, 
για τον τύπο T και έτσι η τιμή Numbers μπορεί να περάσει στην συνάρτηση. Όμως, αυτό που 
επιστρέφεται είναι μια φέτα τύπου int, όπως φαίνεται στο αποτέλεσμα.

Αν κανείς θέλει να εξασφαλίσει, ότι μόνο μια τιμή Numbers είναι δυνατόν να περάσει, αλλά και να
επιστραφεί από την συνάρτηση operate, τότε πρέπει να πραγματοποιήσει τις ακόλουθες αλλαγές. 

    type Slice[T any] interface {
        ~ []T
    }

Η παραπάνω διεπαφή δηλώνει έναν περιορισμό τύπων, ο οποίος περιορίζει έναν τύπο γενικού προγραμματισμού 
σε μια φέτα κάποιου τύπου T. Η χρήση του τελεστή ~ περιορίζει σε εκείνους τους τύπους, των οποίων ο 
υποκείμενος τύπος είναι ο T. Χρησιμοποιώντας αυτή την διεπαφή περιορισμού τύπων κανείς μπορεί να αλλάξει 
την συνάρτηση operate.

    type operateFunc[T any] func(t T) T
    type Slice[T any] interface {
        ~ []T
    }

    // func operate[T any](slice []T, fn operateFunc[T]) []T {
    //     ret := make([]T, len(slice))
    //     for i, v := range slice {
    //         ret[i] = fn(v)
    //     }
    //     return ret
    // }

    func operate[S Slice[T], T any](slice S, fn operateFunc[T]) S {
        ret := make(S, len(slice))
        for i, v := range slice {
            ret[i] = fn(v)
        }
        
        return ret
    }

Στην συνέχεια, αλλάζει η συνάρτηση operate, προκειμένου να δηλώνει δύο τύπους 
γενικού προγραμματισμού. Ο τύπος S αντιπροσωπεύει μια τιμή φέτας, κάποιου τύπου T 
και ο T, είναι ένας οποιοσδήποτε τύπος. Η συνάρτηση επιστρέφει μια τιμή τύπου S.

    type Numbers []int
    
    func Double(n Numbers) Numbers {
        fn := func(n int) int {
            return 2 * n
        }
    
        numbers := operate(n, fn)
        fmt.Printf("%T", numbers)
        
        return numbers
    }

Αποτέλεσμα:

    main.Numbers

Αυτή την φορά, όταν κανείς περνάει την τιμή Numbers στην συνάρτηση operate, η φέτα που 
επιστρέφεται, είναι τύπου Numbers. Ο υποκείμενος τύπος αγνοείται και γίνεται σεβαστός ο 
τύπος, που είναι ορισμένος από τον χρήστη.
