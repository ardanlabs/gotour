Eπιμόλυνση Διεπαφών
Η επιμόλυνση των διεπαφών προέρχεται από το γεγονός, ότι οι άνθρωποι σχεδιάζουν λογισμικό με διεπαφές, αντί να τις ανακαλύπτουν.

* Επιμόλυνση Διεπαφών

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Παρακολουθήστε το Video]]
- Εαν Χρειάζεστε Οικονομική Συνδρομή, Χρησιμοποιήστε το Σχετικό [[https://www.ardanlabs.com/scholarship/][Έγγραφο Υποτροφίας]]

Η επιμόλυνση των διεπαφών προέρχεται από το γεγονός, ότι οι άνθρωποι σχεδιάζουν λογισμικό 
με διεπαφές, αντί να τις ανακαλύπτουν.

** Επισκόπηση Κώδικα

- *Παράδειγμα* *1:* Δημιουργία επιμόλυνσης Διεπαφών 
- *Παράδειγμα* *2:* Απομάκρυνση επιμόλυνσης Διεπαφών 

.play composition/pollution/example1.go
.play composition/pollution/example2.go

** επιμόλυνση Διεπαφών

Η επιμόλυνση των διεπαφών προέρχεται από το γεγονός, ότι οι άνθρωποι σχεδιάζουν λογισμικό 
με διεπαφές, αντί να τις ανακαλύπτουν. Πρέπει κανείς να σχεδιάζει μια πραγματική λύση 
στο πρόβλημα, πρώτα. Στην συνέχεια, μπορεί να ανακαλύπτει αν το πρόγραμμα χρειάζεται να 
είναι πολυμορφικό ή όχι.

Τα ακόλουθα, είναι πράγματα που έχουν ειπωθεί από άλλους developers.

"Χρησιμοποιώ διεπαφές, επειδή πρέπει να χρησιμοποιούμε διεπαφές".

Κάτι τέτοιο δεν είναι ορθό. Δεν είναι κανείς υποχρεωμένος να χρησιμοποιήσει διεπαφές. 
Χρησιμοποιεί κανείς διεπαφές όταν είναι πρακτικό και λογικό να γίνει κάτι τέτοιο.
Υπάρχει κόστος στην χρήση διεπαφών: ένα επίπεδο μη άμεσης πρόσβασης (στμ. indirection) και
εκχώρησης, όταν αποθηκεύονται πραγματικές τιμές σε αυτές. Αν το κόστος της εκχώρησης 
είναι μικρότερο από το κέρδος της αποσύνδεσης, που επιτρέπει μια διεπαφή, κανείς θα 
πρέπει να χρησιμοποιεί διεπαφές. Διαφορετικά, δεν θα πρέπει.

"Χρειάζεται να ελέγχω τον κώδικα, επομένως χρειάζεται να χρησιμοποιώ διεπαφές".

Κάτι τέτοιο δεν είναι ορθό. Κανείς οφείλει να σχεδιάζει το API πρώτα για τον χρήστη, όχι
για τους ελέγχους. Αν το API δεν είναι ελέγξιμο, θα πρέπει να αναλογιστεί αν είναι πράγματι
διαθέσιμο προς χρήση. Επίσης, υπάρχουν διαφορετικα επίπεδα στα API. Το χαμηλότερο επίπεδο 
μη εξαγόμενων API μπορεί και πρέπει να εστιάσει στην δυνατότητα ελεγχου. Τα εξαγόμενα API στα 
υψηλότερα επίπεδα πρέπει να είναι εστιασμένα στην ευχρηστία.

Συναρτήσεις που δέχονται ανεπεξέργαστα δεδομένα και επιστρέφουν ανεπεξέργαστα δεδομένα είναι
οι πλέον ελέγξιμες. Πρέπει να υφίσταται διαχωρισμός ανάμεσα στον μετασχηματισμό των δεδομένων 
από την προέλευση των δεδομένων και την κατεύθυνση στην οποία κατευθύνονται. Κάτι τέτοιο είναι 
μια άσκηση στην επαναδημιουργία κώδικα, που πρέπει να πραγματοποιείται κατά τον κύκλο συγγραφής
κώδικα, που πραγματοποιούν ο developer ως μηχανικοί.

Παρακάτω, ακολουθεί παράδειγμα που δημιουργεί επιμόλυνση διεπαφής, χρησιμοποιώντας λανθασμένα μια 
διεπαφή, όταν αυτή δεν είναι απαραίτητη.

    type Server interface {
        Start() error
        Stop() error
        Wait() error
    }

Η διεπαφή Server ορίζει ένα συμβόλαιο συλλειτουργίας για server TCP. Το πρόβλημα εδώ είναι ότι
κανείς δεν χρειάζεται ένα συμβόλαιο λειτουργίας, αλλά χρειάζεται μια υλοποίηση. Θα υπάρξει μόνο
μια υλοποίηση μάλιστα, καθώς ο developer είναι αυτός που θα την υλοποιήσει. Δεν χρειάζεται να την
υλοποιήσει κανείς άλλος, αντί του ίδου του developer.

Επιπροσθέτως, η παραπάνω διεπαφή βασίζεται σε ένα ουσιαστικό και όχι σε ένα ρήμα. Οι πραγματικοί 
τύποι είναι ουσιαστικά, καθώς αντιπροσωπεύουν το πραγματικό πρόβλημα. Οι διεπαφές περιγράφουν την
συμπεριφορά και ο Server δεν είναι συμπεριφορά.

Μερικοί τρόποι να εξακριβωθεί η μόλλυνση διεπαφής:

- Ένα πακέτο δηλώνει μια διεπαφή που αντιστοιχεί σε ολόκληρο το API του πραγματικού του τύπου.
- Οι διεπαφές εξάγονται, όμως οι πραγματικοί τύποι που υλοποιούν την δεπαφή, δεν εξάγονται.
- Η συνάρτηση δημιουργίας (factory) του πραγματικού τύπου επιστρέφει την τιμή διεπαφής, η οποία περιέχει την τιμή του πραγματικού, μη εξαγόμενου τύπου.
- Η διεπαφή μπορεί να απομακρυνθεί και τίποτα δεν αλλάζει για τον χρήστη του API.
- Η διεπαφή δεν αποδεσμεύει το API από αλλαγές.

Οδηγίες σχετικά με την επιμόλυνση διεπαφών:

Χρήση διεπαφής:

- Όταν οι χρήστες του API πρέπει να παρέχουν κάποια λεπτομέρεια υλοποίησης.
- Όταν τα API έχουν πολλαπλές υλοποιήσεις που πρέπει να συντηρηθούν.
- Όταν μέρη των API που μπορούν να μεταβληθούν έχουν προσδιοριστεί και απαιτούν αποσύνδεση.

Αμφισβήτηση διεπαφής:

- Όταν ο μόνος σκοπός της είναι η συγγραφή ελέγξιμων API (τα API πρέπει είναι εύχρηστα πρώτα).
- Όταν δεν παρέχει υποστήριξη ώστε το API να αποδεσμευτεί από την αλλαγή. 
- Όταν δεν είναι ξεκάθαρο πως η διεπαφή κάνει τον κώδικα καλύτερο.
