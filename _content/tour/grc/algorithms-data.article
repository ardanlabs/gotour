Δομές Δεδομένων
Αυτή η ενότητα, παρέχει παραδείγματα δομών δεδομένων.

* Πίνακας κατακερματισμού

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Παρακολουθήστε το Video]]
- Εάν Χρειάζεστε Οικονομική Συνδρομή, Χρησιμοποιήστε το Σχετικό [[https://www.ardanlabs.com/scholarship/][Έγγραφο Υποτροφίας]]

Αυτό το παράδειγμα προγράμματος, υλοποιεί έναν βασικό πίνακα κατακερματισμού.

- hashKey(key) επιστρέφει έναν αριθμό μεταξύ 0 και len(buckets)-1

- Χρησιμοποιείται φέτα εγγραφών ως χώρος αποθήκευσης (στμ. bucket), προκειμένου να 
  γίνει διαχείριση περιπτωσεων, όπου δύο ή περισσότερα κλειδιά συμπίπτουν στην 
  ίδια θέση αποθήκευσης.

- Δείτε περισσότερα στο [[https://en.wikipedia.org/wiki/Hash_table][https://en.wikipedia.org/wiki/Hash_table]]

*Διάγραμμα*

    Με έναν πίνακα κατακερματισμού, τα δεδομένα αποκτούν δείκτη ανά χώρο αποθήκευσης 
    και μετά με βάση την θέση τους, εντός της θέσης αποθήκευσης.

    hashKey(key) ──────────────┐
                               │
                               ▽
     ┌────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐
     │    │     │     │     │     │     │     │     │  ◁── χώρος αποθήκευσης
     └────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘
             │                 │
             ▽                 ▽
       ┌───────────────┐   ┌───────────────┐
       │ κλειδί │ τιμή │   │ κλειδί │ τιμή │  ◁── καταχώρηση
       ├───────────────┤   ├───────────────┤
       │ κλειδί │ τιμή │   │ κλειδί │ τιμή │
       ├───────────────┤   └───────────────┘
       │ κλειδί │ τιμή │
       ├───────────────┤
       │ κλειδί │ τιμή │
       ├───────────────┤
       │ κλειδί │ τιμή │
       └───────────────┘

.play algorithms/data/hash_map.go

* Συνδεδεμένη Λίστα

Αυτό το παράδειγμα προγράμματος, υλοποιεί μια βασική, διπλά συνδεδεμένη λίστα.

- Δείτε περισσότερα στο [[https://en.wikipedia.org/wiki/Linked_list][https://en.wikipedia.org/wiki/Linked_list]]

*Διάγραμμα*

    Με μια συνδεδεμένη λίστα, οι τιμές συνδέονται μεταξύ τους με 
    διαφορετική σειρά, μέσω της χρήσης δεικτών διεύθυνσης.

    ┌──────┐      ┌──────┐      ┌──────┐      ┌──────┐      ┌──────┐
    │ Τιμή │ ◁─▷ │ Τιμή │ ◁─▷ │ Τιμή │ ◁─▷ │ Τιμή │ ◁─▷ │ Τιμή │
    └──────┘      └──────┘      └──────┘      └──────┘      └──────┘
       △                                                       △
       │                                                        │
       ───────────────────────        ───────────────────────────
                             │        │
                             │        │
                       ┌────────────────────┐
                       │ Πρώτη  │ Τελευταία │
                       └────────────────────┘

.play algorithms/data/list.go

* Ουρά

Αυτό το παράδειγμα προγράμματος, υλοποιεί μια βασική κυκλική ουρά.

- Δείτε περισσότερα στο [[https://en.wikipedia.org/wiki/Queue_(abstract_data_type)][https://en.wikipedia.org/wiki/Queue_(abstract_data_type)]]

*Διάγραμμα*

    Σε μια ουρά, η πρώτη τιμή που εισέρχεται είναι και η πρώτη τιμή, που εξέρχεται

               ┌──────────────────────────────────────────┐
    ┌─────┐    │ ┌─────┐     ┌─────┐     ┌─────┐    ┌─────┐ │     ┌─────┐
    │ V06 │ ─▷ │ │ V05 │ ─▷ │ V04 │ ─▷ │ V03 │ ─▷ │ V02 │ │ ─▷ │ V01 │
    └─────┘    | └─────┘     └─────┘     └─────┘    └─────┘ |     └─────┘
               └──────────────────────────────────────────┘

.play algorithms/data/queue_circular.go

* Στοίβα

Αυτό το παράδειγμα προγράμματος, υλοποιεί μια βασική στοίβα.

- Δείτε περισσότερα στο [[https://en.wikipedia.org/wiki/Stack_(abstract_data_type)][https://en.wikipedia.org/wiki/Stack_(abstract_data_type)]]

*Διάγραμμα*

    Με μια στοίβα, η πρώτη τιμή που εισέρχεται είναι η τελευταία τιμή, που εξέρχεται.

           ┌─────┐
           │ V05 │
           └─────┘
              │
              ▽          ┌─────┐
        ┌───────────┐ ─▷ │ V04 │
        │  ┌─────┐  │     └─────┘
        │  │ V03 │  │
        │  └─────┘  │
        │  ┌─────┐  │
        │  │ V02 │  │
        │  └─────┘  │
        │  ┌─────┐  │
        │  │ V01 │  │
        │  └─────┘  │
        └───────────┘

.play algorithms/data/stack.go

* Δυαδικό Δέντρο

Αυτό το παράδειγμα προγράμματος, υλοποιεί ένα βασικό δυαδικό δέντρο.

- Δείτε περισσότερα στο [[https://en.wikipedia.org/wiki/Binary_tree][https://en.wikipedia.org/wiki/Binary_tree]]

*Διάγραμμα*

    Σε ένα δυαδικό δέντρο, τα δεδομένα τοποθετούνται, είτε αριστερά, 
    είτε δεξιά, στο δέντρο. Με την προσθήκη κάθε στοιχείου, το δέντρο
    ισορροπεί.

      0     1     2     3     4     5     6    ◁─ Σειρά εισαγωγής
    ┌────┐┌────┐┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 65 ││ 45 ││ 35 ││ 75 ││ 85 ││ 78 ││ 95 │
    └────┘└────┘└────┘└────┘└────┘└────┘└────┘

                   ┌────┐
                   │ 75 │                      ◁─ Τελικό δέντρο
                   └────┘
                 /        \
           ┌────┐          ┌────┐
           │ 45 │          │ 85 │
           └────┘          └────┘
           /    \          /    \
       ┌────┐  ┌────┐  ┌────┐  ┌────┐
       │ 35 │  │ 65 │  │ 78 │  │ 95 │
       └────┘  └────┘  └────┘  └────┘

.play algorithms/data/tree_binary.go
