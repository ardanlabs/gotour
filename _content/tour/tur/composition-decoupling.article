Ayırmak
Kompozisyon, tür gömme mekaniklerinin ötesine geçer ve sadece bir paradigmadan daha fazlasıdır.

* Ayırmak

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Videoyu İzle]]
- Maddi Yardıma İhtiyacınız mı Var? [[https://www.ardanlabs.com/scholarship/][Burs Formumuzu Kullanın]]

Gömme yeteneğinden yararlanmanın en iyi yolu, kompozisyonel tasarım deseni aracılığıyla 
olacaktır. Bu, yazılımınızdaki istikrarı sürdürmek için önemlidir, çünkü gelecek 
olan veri ve dönüşüm değişikliklerine uyum sağlama yeteneğine sahip olursunuz.

** Kod İncelemesi

- *Örnek* *1:* Yapı Kompozisyonu
- *Örnek* *2:* Arayüz ile Ayırmak
- *Örnek* *3:* Arayüz Kompozisyonu
- *Örnek* *4:* Arayüz Kompozisyonu ile Ayırmak
- *Örnek* *5:* Arayüz Kirliliğini Kaldırmak
- *Örnek* *6:* Daha Kesin API

.play composition/decoupling/example1.go
.play composition/decoupling/example2.go
.play composition/decoupling/example3.go
.play composition/decoupling/example4.go
.play composition/decoupling/example5.go
.play composition/decoupling/example6.go

** Ayırma Mekanizmaları

Fikir, daha küçük tiplerden daha büyük tipleri birleştirmek ve davranışın 
kompozisyonuna odaklanmaktır.

    type Xenia struct {
        Host    string
        Timeout time.Duration
    }

    func (*Xenia) Pull(d *Data) error {
        switch rand.Intn(10) {
        case 1, 9:
            return io.EOF
        case 5:
            return errors.New("Error reading data from Xenia")
        default:
            d.Line = "Data"
            fmt.Println("In:", d.Line)
            return nil
        }
    }

Xenia türü, veri çekmeniz gereken bir sistemi temsil eder. Uygulama önemli değildir. 
Önemli olan, Pull metodunun başarılı olabileceği, başarısız olabileceği veya çekilecek 
veri olmayabileceği gerçeğidir.

    type Pillar struct {
        Host    string
        Timeout time.Duration
    }

    func (*Pillar) Store(d *Data) error {
        fmt.Println("Out:", d.Line)
        return nil
    }

Pillar türü, veriyi saklamanız gereken bir sistemi temsil eder. Önemli 
olan Store metodunun başarılı veya başarısız olabileceği gerçeğidir.

Bu iki tür, Xenia'dan veri çıkarmak ve bu veriyi Pillar'a saklamak için gerekli olan 
temel davranışı sağlayan kodun primitif bir katmanını temsil eder.

    func Pull(x *Xenia, data []Data) (int, error) {
        for i := range data {
            if err := x.Pull(&data[i]); err != nil {
                return i, err
            }
        }

        return len(data), nil
    }

    func Store(p *Pillar, data []Data) (int, error) {
        for i := range data {
            if err := p.Store(&data[i]); err != nil {
                return i, err
            }
        }

        return len(data), nil
    }

Bu iki fonksiyon, Pull ve Store, bu primitif kod katmanını, ilgili sistemlerdeki veriyi 
çekme veya saklama yeteneğine odaklanarak genişletir. Bu fonksiyonlar şu anda çalışma 
zamanında işlem yapılması gereken sistemler olan Xenia ve Pillar türlerine 
odaklanmaktadır.

    func Copy(sys *System, batch int) error {
        data := make([]Data, batch)

        for {
            i, err := Pull(&sys.Xenia, data)
            if i > 0 {
                if _, err := Store(&sys.Pillar, data[:i]); err != nil {
                    return err
                }
            }

            if err != nil {
                return err
            }
        }
    }

Copy fonksiyonu, Pull ve Store fonksiyonları üzerine inşa edilerek her çalıştırma 
için bekleyen tüm veriyi taşımak için kullanılır. Eğer Copy fonksiyonuna dikkat 
ederseniz, ilk parametre olan şeyin System adında bir tür olduğunu fark edeceksiniz.

    type System struct {
        Xenia
        Pillar
    }

System türünün başlangıç ​​fikri, çekme ve saklama yeteneğini birleştirmektir. Bu durumda, 
Xenia ve Pillar'dan çekme ve saklama yeteneğini birleştirmektir.

    func main() {
        sys := System{
            Xenia: Xenia{
                Host:    "localhost:8000",
                Timeout: time.Second,
            },
            Pillar: Pillar{
                Host:    "localhost:9000",
                Timeout: time.Second,
            },
        }

        if err := Copy(&sys, 3); err != io.EOF {
            fmt.Println(err)
        }
    }

Sonunda, main fonksiyonu bir System'ın kompozisyonu içinde bir Xenia ve Pillar'ı 
oluşturmak için yazılabilir. Sonra System, Copy fonksiyonuna geçirilebilir ve veri 
iki sistem arasında akabilir.


Bu kodla, şimdi somut bir probleme somut bir çözümün ilk taslağına sahipsiniz.

** Arayüzlerle Ayırma

Bir sonraki adım, programdaki nelerin değişebileceğini anlamaktır. Bu durumda, 
değişebilecek şeyler sistemlerdir. Bugün Xenia ve Pillar, yarın Alice ve Bob olabilir. 
Bu bilgiyle, mevcut somut çözümü bu değişiklikten ayırmak istersiniz. Bunu yapmak için 
somut fonksiyonları polimorfik fonksiyonlara dönüştürmek istersiniz.

    func Pull(p Puller, data []Data) (int, error) {
        for i := range data {
            if err := p.Pull(&data[i]); err != nil {
                return i, err
            }
        }

        return len(data), nil
    }

    func Store(s Storer, data []Data) (int, error) {
        for i := range data {
            if err := s.Store(&data[i]); err != nil {
                return i, err
            }
        }

        return len(data), nil
    }

Şu anda Pull fonksiyonu bir Xenia değeri alır ve Store fonksiyonu bir Pillar değeri 
alır. Sonunda, önemli olan Xenia ve Pillar değildi, önemli olan çekme ve saklama 
bilen somut bir değerdi. Bu somut fonksiyonları, ne olduğuna değil, ne yapabildiğine 
dayalı olarak polimorfik hale getirebilirsiniz.

    type Puller interface {
        Pull(d *Data) error
    }

    type Storer interface {
        Store(d *Data) error
    }

Bu iki arayüz, somut verinin ne yapması gerektiğini açıklar ve bu türler, Pull ve Store 
fonksiyonlarının deklarasyonunda değiştirilir. Şimdi bu fonksiyonlar polimorfiktir. 
Alice ve Bob, bir Puller ve bir Storer olarak ilan edilip uygulandığında, bu 
fonksiyonlara geçirilebilirler.

Henüz işiniz bitmedi. Copy fonksiyonu da polimorfik olmalıdır.

    func Copy(ps PullStorer, batch int) error {
        data := make([]Data, batch)

        for {
            i, err := Pull(ps, data)
            if i > 0 {
                if _, err := Store(ps, data[:i]); err != nil {
                    return err
                }
            }

            if err != nil {
                return err
            }
        }
    }

Copy fonksiyonu artık bir System değeri istemiyor, ancak hem Pull hem de Store 
bilen somut bir değeri istiyor.

    type PullStorer interface {
        Puller
        Storer
    }

PullStorer arayüzü, kompozisyon kullanılarak deklare edilir. Küçük arayüzleri büyük 
olanlardan oluşturmayı hedefleyin.

Dikkat edin, PullStorer değişkeninin şimdi Pull ve Store fonksiyonlarına 
geçirildiğini görüyorsunuz. Tür bilgisi farklı olduğunda bunun nasıl mümkün olduğunu
düşünüyorsunuz?

    // func Pull(p Puller, data []Data) (int, error) {
    i, err := Pull(ps, data)

    // func Store(s Storer, data []Data) (int, error) {
    if _, err := Store(ps, data[:i]); err != nil {

Her zaman hatırlamanız gereken, programınızda hiçbir zaman bir arayüz değeri geçmiyorsunuz, 
çünkü var olmazlar ve değersizdirler. Yalnızca somut veriyi geçebilirsiniz. Bu nedenle, 
Pull ve Store fonksiyonlarına geçirilen şey, Pull ve Store yapabilen PullStorer değişkeninin 
içinde saklanan somut veridir. PullStorer içinde saklanan somut değerin Pull ve Store 
yapmayı bilmesi gerekmez mi?

.image /tour/eng/static/img/comp1.png

Bir System, bir Xenia ve Pillar'dan oluştuğundan, System, PullStorer arayüzünü uygular. 
Bu değişikliklerle, PullStorer arayüzünü uygulayan yeni somut türler oluşturabilirsiniz.

    type System1 struct {
        Xenia
        Pillar
    }

    type System2 struct {
        Alice
        Bob
    }

    type System3 struct {
        Xenia
        Bob
    }

    type System4 struct {
        Alice
        Pillar
    }

Daha fazla düşündüğünüzde, tüm olası kombinasyonlar için farklı System türlerini ilan 
etmek gerçekçi değil. Bu çalışacaktır, ancak bakım kabusu daha iyi bir çözüm gerektirir.

** Arayüz Kompozisyonu

Varsayalım ki somut sistem türünü iki arayüz türünden oluşturmayı seçtiniz.

    type System struct {
        Puller
        Storer
    }

Bu ilginç bir çözümdür. Bu, uygulamanın uygulama başlatma sırasında somut Puller'ı 
veya Storer'ı sisteme enjekte etmesine olanak tanır.

    func main() {
        sys := System{
            Puller: &Xenia{
                Host:    "localhost:8000",
                Timeout: time.Second,
            },
            Storer: &Pillar{
                Host:    "localhost:9000",
                Timeout: time.Second,
            },
        }

        if err := Copy(&sys, 3); err != io.EOF {
            fmt.Println(err)
        }
    }

Bu tek bir sistem türü, tüm olası somut tür kombinasyonları için 
PullStorer arayüzünü uygular.

.image /tour/eng/static/img/comp2.png

Bu değişiklikle, uygulama zaman içinde çevrimiçi gelebilecek yeni bir sisteme karşı 
tamamen bağımsız hale gelir.

** Keskin İnceleme

Sorulması gereken bir sonraki soru şudur: Polimorfik fonksiyonlar, aksi takdirde 
olabileceğinden daha kesin midir? Bu, atlanamayacak bir mühendislik sürecinin bir 
parçasıdır. Cevap hayır, iki değişiklik yapılabilir.

    func Copy(sys *System, batch int) error {

Copy fonksiyonu artık polimorfik olmak zorunda değil, çünkü yalnızca tek bir System 
türü olacaktır. PullStorer arayüz türü programdan kaldırılabilir. Unutmayın, polimorfizmi, 
arayüz türleriyle kompozisyonu kullandığınızda, tipin içine taşıdınız.

    func Copy(p Puller, s Storer, batch int) error {

Bu, Copy fonksiyonuna yapılabilecek başka bir değişikliktir. Bu değişiklik, fonksiyonu 
daha kesin ve tekrar polimorfik hale getirir. Şimdi fonksiyon, somut verinin ne yapabildiğine 
dayalı olarak tam olarak neye ihtiyaç duyduğunu soruyor.

.image /tour/eng/static/img/comp3.png

Bu değişiklikle birlikte, System türü de programdan kaldırılabilir.

    func main() {
        x := Xenia{
            Host:    "localhost:8000",
            Timeout: time.Second,
        }

        p := Pillar{
            Host:    "localhost:9000",
            Timeout: time.Second,
        }

        if err := Copy(&x, &p, 3); err != io.EOF {
            fmt.Println(err)
        }
    }

PullStorer ve System türlerini kaldırarak, program basitleşir. Ana fonksiyon, veriyi 
taşımak için gerekli olan somut Puller ve Storer değerlerini oluşturmaya odaklanabilir. 
Tür sistemi ve API'lar daha kesin hale gelir. Bu kesinlik fikri, Edsger W. Dijkstra'dan gelir.

"Soyutlama'nın amacı belirsiz olmak değil, tamamen kesin olabileceğiniz yeni bir semantik seviye oluşturmaktır." - Edsger W. Dijkstra

** Notlar

- Bu, tür gömme mekaniklerinden çok daha fazlasıdır.
- Tipleri açıklamadan ve kompozisyonu düşünerek iş akışlarını uygulayın.
- İlk önce çözmeye çalıştığınız sorunu anlayın. Bu, veriyi anlamayı içerir.
- Hedefiniz yazılımınızdaki değişiklikleri azaltmak ve minimize etmektir.
- Arayüzler, kompozisyonun en yüksek formunu sağlar.
- Tipleri ortak bir DNA'ya göre değil, ortak bir davranışa göre gruplandırmayın.
- Herkes, ne yaptığımıza ve kim olduğumuza odaklandığımızda birlikte çalışabilir.

** Alıntılar

"Iyi bir API sadece kullanımı kolay değil, aynı zamanda yanlış kullanımı zor olan bir şeydir." - JBD

"Her zaman gömebilirsiniz, ancak bir kez orada olduktan sonra büyük arayüzleri parçalayamazsınız. Arayüzleri küçük tutun." - JBD

"Arayüzlerle tasarlamayın, onları keşfedin." - Rob Pike

"Yanlış soyutlamadan daha ucuz olan şey kopyalamaktır." - Sandi Metz

** Tasarım İlkeleri

Kompozisyon için [[https://github.com/ardanlabs/gotraining/blob/master/topics/go/#interface-and-composition-design][tasarım ilkelerini]] öğrenin.

** Ek Okuma

- [[https://programmingisterrible.com/post/176657481103/repeat-yourself-do-more-than-one-thing-and][Repeat yourself, do more than one thing, and rewrite everything]] - tef  
- [[https://golang.org/doc/effective_go.html#embedding][Embedding]]   
- [[https://www.ardanlabs.com/blog/2014/05/methods-interfaces-and-embedded-types.html][Methods, Interfaces and Embedding]] - William Kennedy  
- [[https://www.ardanlabs.com/blog/2015/09/composition-with-go.html][Composition In Go]] - William Kennedy  
- [[https://www.ardanlabs.com/blog/2016/10/reducing-type-hierarchies.html][Reducing Type Hierarchies]] - William Kennedy  
- [[https://www.ardanlabs.com/blog/2016/10/avoid-interface-pollution.html][Avoid Interface Pollution]] - William Kennedy 

* Egzersizler

Egzersizleri tamamlamak için bir başlangıç noktası olarak şablona bakın. Olası bir çözüm sağlanmıştır.

** Egzersiz 1

Şablona dayalı olarak, önceden tanımlanmış arayüz türlerini uygulayan bir dizi somut 
türü deklare edin. Ardından, bu türlerin değerlerini oluşturun ve bunları belirli bir dizi 
görevi tamamlamak için kullanın.

.play composition/decoupling/exercise1.go
.play composition/decoupling/answer1.go
