Arayüzler (Interfaces)
Arayüzler, programlara yapı sağlar ve tasarımı bileşenler aracılığıyla teşvik eder.

* Arayüzler (Interfaces)

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Videoyu İzle]]
- Maddi Yardıma İhtiyacınız mı Var? [[https://www.ardanlabs.com/scholarship/][Burs Formumuzu Kullanın]]

Arayüzler, programlara yapı sağlar ve tasarımı bileşenler aracılığıyla teşvik eder. 
Temiz bölümler arasında etkinleştirir ve uygularlar. Arayüzlerin standardizasyonu, 
net ve tutarlı beklentiler belirleyebilir. Bağlamayı azaltmak, bileşenler arasındaki 
bağımlılıkları azaltmak anlamına gelir. Bu da doğruluk, kalite ve sürdürülebilirliğe 
yol açar.

** Kod İnceleme

- *Örnek* *1:* Polimorfizm Gerektiren Tekrarlanan Kod
- *Örnek* *2:* Polimorfizm
- *Örnek* *3:* Metod Setleri
- *Örnek* *4:* Değerin Adresi
- *Örnek* *5:* Değerle Depolama
- *Örnek* *6:* Tür Yineleme
- *Örnek* *7:* Koşullu Tür Yinelemeleri
- *Örnek* *8:* Boş Arayüz ve Tür Anahtarları
- *Örnek* *9:* Değerleri Depolama

.play interfaces/example1.go
.play interfaces/example2.go
.play interfaces/example3.go
.play interfaces/example4.go
.play interfaces/example5.go
.play interfaces/example6.go
.play interfaces/example7.go
.play interfaces/example8.go
.play interfaces/example9.go

** Arayüz Semantiği

Arayüzler, verinin ne yapabileceğine göre somut verileri bir araya getirmenizi sağlar. 
Bu, verinin ne olduğuna değil, ne yapabileceğine odaklanır. Arayüzler aynı zamanda kodumuzu 
değişiklikten soyutlamaya yardımcı olarak, ne yapabileceğine dayalı olarak somut veri 
isteyerek kendini bağımsızlaştırma yeteneği sağlar. Bu, tek bir veri türü ile sınırlı değildir.

En iyi şekilde, gelecek olan veri değişikliklerini anlamak ve arayüzleri kullanarak programımı 
bu değişiklikten soyutlamak zorundayım. Arayüzlerin davranışı tanımlaması ve durumu değil, 
eylemi ifade etmesi gerekiyor. Arayüzler fiil olmalı, isim değil.

Davranışa odaklanan genelleştirilmiş arayüzler en iyisidir. Birden fazla metoda sahip 
arayüzlerin birden fazla değişme nedeni vardır. İsimlere dayalı arayüzler, daha az 
tekrar kullanılabilir, daha fazla değişikliğe duyarlıdır ve arayüzün amacını bozar. 
Değişiklik hakkında belirsizlik, tahmin yapma lisansı değil, DUR ve daha fazla öğrenme 
direktifi olmalıdır. Dolandırıcılığa karşı savunan kod ile kazalara karşı koruyan kodu 
ayırt etmelisiniz.

Bir arayüz kullanılmalıdır:

- API kullanıcılarının bir uygulama ayrıntısı sağlamaları gerekiyorsa.
- API'ların içsel olarak korumaları gereken çok sayıda uygulaması varsa.
- Değişebilecek API parçaları belirlenmiş ve çözülmesi gerekiyorsa.

Bir arayüz kullanılmamalıdır:
    
- Sadece bir arayüz kullanmak için.
- Bir algoritmayı genelleştirmek için.
- Kullanıcılar kendi arayüzlerini bildirebiliyorsa.
- Arayüzün kodu nasıl daha iyi hale getirdiği belirsizse.

** Arayüzler Değersizdir

Anlamanız gereken ilk önemli şey, bir arayüz türünün değersiz bir türü bildirmesidir.

    type reader interface {
        read(b []byte) (int, error)
    }

Reader türü bir yapı türü değil, bir arayüz türüdür. Onun bildirimi duruma dayanmaz, 
davranışa dayanır. Arayüz türleri, arayüzü karşılamak için somut verilerin sergilemesi 
gereken davranışın bir metod setini bildirir. Arayüz türleriyle ilgili hiçbir şey 
somut değildir, bu nedenle değersizdir.

    var r reader

Değerli olmadıkları için, bir değişkenin (örneğin r) oluşturulması garip bir şeydir 
çünkü programlama modelimize göre, r var olmaz, değersizdir. r'nin kendisi üzerinde 
manipüle edebileceğiniz veya dönüştürebileceğiniz hiçbir şey yoktur. Bu anlamak için 
kritik bir konsepttir. Asla arayüz değerleriyle çalışmıyoruz, yalnızca somut değerlerle 
çalışıyoruz. Bir arayüzün derleyici temsili (içsel türü) olsa da, programlama modelimizden 
arayüzler değersizdir.

** Arayüzleri Uygulama

Go, yapılandırma üzerine geleneksel bir dildir. Bir somut türün bir arayüzü uygulaması 
söz konusu olduğunda istisna yoktur.

    type reader interface {
        read(b []byte) (int, error)
    }

    type file struct {
        name string
    }

    func (file) read(b []byte) (int, error) {
        s := "<rss><channel><title>Going Go</title></channel></rss>"
        copy(b, s)
        return len(s), nil
    }

Bu kod, file adlı bir türü bildirir ve ardından read adlı bir metod bildirir. 
Bu iki bildiri nedeniyle şunu söyleyebilirsiniz:

"Şimdi, file adlı somut tür, değer semantiği kullanarak reader arayüzünü uygular."

Söylenen her kelime önemlidir. Go'da bir arayüzü uygulamak için yapmanız gereken tek şey, 
bir arayüz tarafından tanımlanan davranışın tam metod setini bildirmektir. Bu durumda, 
reader arayüzü yalnızca read adlı tek bir davranışı bildirir.

    type reader interface {
        read(b []byte) (int, error)
    }

    type pipe struct {
        name string
    }

    func (pipe) read(b []byte) (int, error) {
        s := `{name: "Bill", title: "developer"}`
        copy(b, s)
        return len(s), nil
    }

Bu kod, pipe adlı bir türü bildirir ve ardından read adlı bir metod bildirir. 
Bu iki bildiri nedeniyle şunu söyleyebilirsiniz:

"Pipe adlı somut tür, değer semantiği kullanarak reader arayüzünü uygular."

Şimdi, reader arayüzünü uygulayan iki somut türe sahipsiniz. Her biri kendi benzersiz 
uygulamalarıyla. Bir tür dosya sistemlerini, diğeri ağları okuyor.

** Polimorfizm

Polimorfizm, bir kod parçasının işlemekte olduğu somut veriye bağlı olarak davranışını 
değiştirmesi demektir. Bu tanım, BASIC'in mucidi olan Tom Kurtz tarafından icat edilmiştir. 
Bu, ileriye doğru hareket ederken kullanacağımız tanımdır.

    // retrieve, herhangi bir cihazı okuyabilir ve verileri işleyebilir.
    func retrieve(r reader) error {
        data := make([]byte, 100)

        len, err := r.read(data)
        if err != nil {
            return err
        }

        fmt.Println(string(data[:len]))
        return nil
    }

Bu fonksiyonun hangi türde veri kabul ettiğine bir göz atın. Bir reader türü değeri istiyor 
gibi görünüyor. Bu mümkün değil çünkü reader bir arayüz ve arayüzler değersiz türlerdir. 
Bir reader değeri için sormuyorsa, işlev tam olarak ne ister? Sadece sorabileceği şeyi 
soruyor, somut veri.

retrieve fonksiyonu, polimorfik bir fonksiyondur çünkü somut veriye, verinin ne olduğuna 
(somut tür), değil verinin ne yapabileceğine (arayüz türü) dayanmaktadır.

    f := file{"data.json"}
    p := pipe{"cfg_service"}

    retrieve(f)
    retrieve(p)

İki somut değeri oluşturabilirsiniz, birini file türünde ve diğerini pipe türünde. Sonra 
her bir değerin bir kopyasını polimorfik fonksiyona iletebilirsiniz. Çünkü bu değerlerden 
her biri, reader arayüzü tarafından tanımlanan davranışın tam metod setini uygular.

Somut file değeri retrieve'a iletiltiğinde, değer, arayüz değerini temsil eden içsel 
bir tür içinde depolanır.

.image /tour/eng/static/img/i1.png

Arayüz değerinin ikinci kelimesi, depolanan değere işaret eder. Bu durumda, değer 
semantiği devrede olduğundan file değerinin bir kopyasıdır. İlk kelime, iTable olarak 
adlandırılan özel bir veri yapısına işaret eder.

iTable'ın 2 işlevi vardır:

- Depolanan değerin türünü açıklar. Benim durumumda, bu bir file değeridir.
- Depolanacak değerin türü için metod setinin somut uygulamalarına işaret eden fonksiyon işaretçilerini sağlar.

read çağrısı, arayüz değeri üzerinde yapıldığında, bir iTable araştırması yapılır ve 
bağlı olduğu türle ilişkilendirilen read metodunun somut uygulamasını bulmak için. 
Ardından, ikinci kelimeye depolanan değer üzerinde metod çağrısı yapılır.

retrieve'ın polimorfik bir işlev olduğunu söyleyebilirsiniz çünkü somut pipe değeri 
retrieve'e iletiltiğinde, şimdi read çağrısı arayüz değeri üzerinde davranışını değiştirir. 
Bu sefer, bu read çağrısı bir dosya değil, bir ağı okuyor.

** Metod Setleri Kuralları

Bir arayüzü işaretleyen işaretleyici semantiği kullanmak, arayüz uyumluluğuna 
bazı kısıtlamalar getirir.

    type notifier interface {
        notify()
    }

    type user struct {
        name  string
        email string
    }

    func (u *user) notify() {
        fmt.Printf("Sending User Email To %s<%s>\n", u.name, u.email)
    }

    func sendNotification(n notifier) {
        n.notify()
    }

    func main() {
        u := user{"Bill", "bill@email.com"}
        sendNotification(u)
    }

Notifier arayüzü, pointer semantiği kullanarak user türü tarafından uygulanır. 
Polimorfik çağrıyı yapmak için değer semantiği kullanıldığında, aşağıdaki derleyici 
hatası üretilir.

    "cannot use u (type user) as type notifier in argument to sendNotification:
    user does not implement notifier (notify method has pointer receiver)"

Bu, belirli bir türün metod kümesi üzerinde belirli kurallar olduğunu belirten 
spesifikasyondaki özel bir dizi kuraldır. Bu kurallar, bir türün değerleri ve 
işaretçileri için hangi metodların bağlı olduğunu tanımlar. Bunlar, programımızda 
en yüksek düzeyde bütünlüğü korumak için yerleştirilmiştir.

Bu, spesifikasyonda tanımlanan kurallardır:

- T türünde bir değer için, o tür için değer alıcıyla uygulanan metotlar sadece o değerin metod kümesine aittir.
- T türünde bir adres için, o tür için uygulanan tüm metodlar, o değerin metod kümesine aittir.
      
Başka bir deyişle, bir adresle (işaretçiyle) çalışırken, uygulanan tüm metodlar 
eklenir ve çağrılabilir hale gelir. Bir değerle çalışırken, yalnızca değer alıcıları 
ile uygulanan metodlar eklenir ve çağrılabilir hale gelir.

Önceki derslerde metodlar hakkında olan bölümde, bir alıcı tarafından ilan edilen 
veri semantiğine bakılmaksızın somut bir veri parçası üzerinde bir metodu çağırabilirsiniz. 
Bu, derleyicinin çağrıyı yapmak için uyarlanabilmesinden kaynaklanmaktadır. Bu durumda, 
bir değer bir arayüze depolandığında ve metodlar mevcut olduğunda hiçbir ayar yapılamaz.

Şimdi soru şu: Neden işaretçi alıcıları kullanarak uygulanan metodlar, T türündeki 
değerlere bağlanamaz? Burada bütünlük sorunu nedir?

Bir neden, T türündeki her değerin adreslenebilir olmadığını garantileyememenizdir. 
Bir değerin bir adresi yoksa, paylaşılamaz.

    type duration int

    func (d *duration) notify() {
            fmt.Println("Sending Notification in", *d)
    }

    func main() {
        duration(42).notify()
    }

Derleyici Hatası:

    cannot call pointer method on duration(42)
    cannot take the address of duration(42)

Bu örnekte, 42 değeri int türündeki bir sabit değeridir. Değer, bir duration türüne 
dönüştürülmüş olsa bile, bir değişken içine depolanmaz. Bu, değerin hiçbir zaman yığında 
veya heap'te olmadığı anlamına gelir. Bir adres yoktur. Sabitler yalnızca derleme zamanında 
yaşar.

İkinci neden, daha büyük bir nedendir. Derleyici size, değer semantiği kullanıyorsanız, 
işaretçi semantiği kullanmanıza izin vermez. Başka bir deyişle, bir değeri bir işaretçinin 
işaret ettiği bir değerin bir kopyasını yapmak güvenli değilse, bu durumda işaretçi semantiği 
kullanmak zorundasınızdır. Eğer metodu değer semantiği kullanarak uygularsanız, bu, bu tür 
bir değerin kopyasının güvenli olmadığını belirttiğiniz anlamına gelir.

    func main() {
        u := user{"Bill", "bill@email.com"}
        sendNotification(&u)
    }

Derleyici hatasını düzeltmek için, polimorfik işleme yapılan çağrıda işaretçi semantiğini 
kullanmalısınız ve u'yu paylaşmalısınız. Cevap, metodu değer semantiği kullanarak 
değiştirmek değildir.

** Arayüz Dilimi

Arayüz türünün bir dilimini bildirdiğinizde, farklı somut değerleri, yapabildiklerine 
dayalı olarak bir araya getirebilirim. Bu, Go'nun alt tür kavramına ihtiyaç duymamasının 
nedenidir. Bu, ortak bir DNA ile ilgili değil, ortak bir davranışla ilgilidir.

    type printer interface {
        print()
    }

    type canon struct {
        name string
    }

    func (c canon) print() {
        fmt.Printf("Printer Name: %s\n", c.name)
    }

    type epson struct {
        name string
    }

    func (e *epson) print() {
        fmt.Printf("Printer Name: %s\n", e.name)
    }

    func main() {
        c := canon{"PIXMA TR4520"}
        e := epson{"WorkForce Pro WF-3720"}

        printers := []printer{
            c,
            &e,
        }
        c.name = "PROGRAF PRO-1000"
        e.name = "Home XP-4100"

        for _, p := range printers {
            p.print()
        }
    }

Çıktı:

    Printer Name: PIXMA TR4520
    Printer Name: Home XP-4100

Bu kod, bir arayüz türü dilimi bildirdiğinde, farklı somut printer türlerinden oluşan 
bir koleksiyon oluşturmamı sağlar. Koleksiyon üzerinde döngü yaparak ve p.print çağrısını 
kullanarak polimorfizmi kullanır. Bu, kodun çalıştığı somut değere bağlı olarak davranışını 
değiştirir.

Örnek aynı zamanda veri semantiği seçiminin programın davranışını nasıl değiştirdiğini 
gösterir. Veriyi değer semantiği kullanarak depoladığınızda, orijinal değere yapılan değişiklik 
görülmez. Çünkü arayüz içinde bir kopya depolanır. İşaretçi semantiği kullanıldığında, orijinal 
değere yapılan değişiklikler görülür.

** Notlar

- Bir değer için metod kümesi, yalnızca değer alıcıyla uygulanan metodları içerir.
- Bir işaretçi için metod kümesi, hem işaretçi hem de değer alıcıyla uygulanan metodları içerir.
- İşaretçi alıcıyla uygulanan metodlar, yalnızca işaretçi değerleriyle arayüzü uygular.
- Değer alıcıyla uygulanan metodlar, hem bir değer hem de bir işaretçi alıcısıyla arayüzü uygular.
- Metod kümesi kuralları, arayüz türlerine uygulanır.
- Arayüzler referans türleridir, işaretçiyle paylaşmayın.
- Bu, Go'da polimorfik davranış oluşturduğumuz şekildir.

** Alıntılar

"Polimorfizm, belirli bir program yazarsınız ve bu programın davranışı üzerinde çalıştığı veriye bağlı olarak farklılık gösterir." - Tom Kurtz (BASIC'in mucidi)

"Boş arayüz hiçbir şey söylemez." - Rob Pike

"Tasarım, kodu bugün çalışır durumda tutmak ve daima değiştirilebilir kılma sanatıdır." - Sandi Metz

"Doğru bir soyutlama, kodu, her değişikliğin tüm kod tabanına yankılanmadığı bir şekilde ayırır." - Ronna Steinburg

** Ek Okuma

- [[https://golang.org/doc/effective_go.html#interfaces][Interfaces]]    
- [[https://blog.golang.org/laws-of-reflection][The Laws of Reflection]] - Rob Pike    
- [[https://www.ardanlabs.com/blog/2014/05/methods-interfaces-and-embedded-types.html][Methods, Interfaces and Embedded Types in Go]] - William Kennedy    
- [[https://rakyll.org/interface-pollution/][Interface Pollution]] - JBD    
- [[https://bravenewgeek.com/abstraction-considered-harmful/][Abstraction Considered Harmful]] - Tyler Treat    
- [[https://www.ardanlabs.com/blog/2018/03/interface-values-are-valueless.html][Interface Values Are Valueless]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2017/07/interface-semantics.html][Interface Semantics]] - William Kennedy    
- [[https://www.hyrumslaw.com/][Hyrum's Law]] - Hyrum  
- [[https://www.youtube.com/watch?v=Pjz9WrXeOW0][Engineering Innovation - Why Constraints Are Critical]] - André Eriksson (MUST WATCH)

* Egzersizler

Egzersizleri tamamlamak için şablona başlangıç noktası olarak kullanın. Bir olası çözüm sağlanmıştır.

** Egzersiz 1

*Kısım* *A:* speaker adında bir arayüz oluşturun ve speak adında bir metoda sahip olsun. 
İngilizce konuşan bir kişiyi temsil eden english adında bir yapı ve Çince konuşan bir 
kişiyi temsil eden chinese adında bir yapı oluşturun. Her bir yapı için speaker 
arayüzünü değer alıcı kullanarak uygulayın ve "Hello World" ve "你好世界" gibi bu konuşanları 
temsil eden stringler kullanın. speaker türünde bir değişken bildirin ve bu değişkeni 
bir english türü değerin adresine atayın ve metodu çağırın. Aynısını bir chinese türü değeri 
için de yapın.

*Kısım* *B:* sayHello adında yeni bir fonksiyon ekleyin, speaker türünde bir değeri kabul etsin. 
Bu fonksiyonu çağırmak için speak metodunu uygulayın. Ardından, her bir tür için yeni değerler 
oluşturun ve bu fonksiyonu kullanın.

.play interfaces/exercise1.go
.play interfaces/answer1.go
