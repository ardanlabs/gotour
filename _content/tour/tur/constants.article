Sabitler (Constants)
Go'nun daha benzersiz özelliklerinden biri, dilin sabitleri nasıl uyguladığıdır.

* Sabitler (Constants)

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Videoyu İzle]]
- Maddi Yardıma İhtiyacınız mı Var? [[https://www.ardanlabs.com/scholarship/][Burs Formumuzu Kullanın]]

Go'nun daha benzersiz özelliklerinden biri, dilin sabitleri nasıl uyguladığıdır. 
Dil spesifikasyonundaki sabitlerle ilgili kurallar, Go'ya özeldir. Bu kurallar, 
Go'nun yazdığımız kodu okunabilir ve sezgisel kılarken aynı zamanda tür güvenliğini 
korumasını sağlar.

Sabitler tür belirtilmiş veya tür belirtilmemiş olabilir. Bir sabit tür belirtilmemişse, 
bir çeşit olarak kabul edilir. Bir çeşit sabitleri derleyici tarafından örtük olarak 
dönüştürebilir. Bu, derleme zamanında gerçekleşir ve çalışma zamanında değil.

** Kod İncelemesi

- *Örnek* *1:* Sabitleri bildirme ve başlatma	
- *Örnek* *2:* Paralel tür sistemi (Çeşit) (eksik)
- *Örnek* *3:* iota			
- *Örnek* *4:* Örtük dönüşüm

.play constants/example1.go
.play constants/example2.go
.play constants/example3.go
.play constants/example4.go

    const ui = 12345     // çeşit: integer
    const uf = 3.141592  // çeşit: floating-point

Belirtilen özelliklere göre, tür belirtilmemiş sayı sabitlerinin hassasiyeti 256 bit'tir.
Bunlar bir türe dayanır.

    const ti int     = 12345     // tür: int
    const tf float64 = 3.141592  // tür: float64

Tür belirtilmiş sabitler hala sabit tür sistemini kullanır, ancak hassasiyetleri sınırlıdır.

    const myUint8 uint8 = 1000 // Compiler Error: constant 1000 overflows uint8

Bu çalışmaz çünkü 1000 sayısı bir uint8'e depolanmak için çok büyüktür.

    var answer = 3 * 0.333  // float64 = KindFloat(3) * KindFloat(0.333)

Sabit aritmetik, farklı türde sabitlerin kullanımını destekler. Tür Yükseltme, bu farklı 
senaryolarla başa çıkmak için kullanılır. Tüm bunlar örtük olarak gerçekleşir. Bu örnekteki 
"answer" değişkeni float64 türünde olacak ve 64 bit hassasiyetinde 0.999'u temsil edecektir.

    const third = 1 / 3.0  // KindFloat = KindFloat(1) / KindFloat(3.0)

Üçüncü sabit float türünde olacak ve 256 bit hassasiyetinde 1/3'ü temsil edecektir.

    const zero = 1 / 3  // KindInt = KindInt(1) / KindInt(3)

Sıfır sabiti integer türünde olacak ve bölme işleminin kalanı olmadığından 0 olarak ayarlanacaktır.

    const one int8 = 1
    const two = 2 * one  // int8(2) * int8(1)

Bu, tür belirtilmiş ve tür belirtilmemiş sabitler arasında sabit aritmetiğin bir 
örneğidir. Bu durumda, bir türün sabiti, bir çeşidin sabiti üzerine çıkar. İki sabit 
de int8 türünde olacak ve 2 olarak ayarlanacaktır.

    const maxInt = 9223372036854775807

Bu, 64 bit bir tamsayının maksimum değeridir.

    const bigger = 9223372036854775808543522345

`bigger` sabit, 64 bit bir tamsayıdan çok daha büyük bir değerdir, ancak bu değer, 
sabit bir çeşit int'e depolanabilir çünkü int çeşidine ait sabitler 64 bit hassasiyetle 
sınırlı değildir.

    const bigger int64 = 9223372036854775808543522345

Derleyici Hatası:

    constant 9223372036854775808543522345 overflows int64

Ancak, eğer "bigger" bir int64 türünde bir sabit olsaydı, bu derlenmezdi.

** IOTA

IOTA, ardışık tamsayı sabitlerini ayarlamak için destek sağlar. İsminin, APL programlama 
dilindeki ⍳ fonksiyonundan (Yunanca alfabenin dokuzuncu harfi ile temsil edilen iota) 
geldiği mümkündür. APL'de ⍳ fonksiyonu, belirli bir uzunluktaki ardışık, artan tamsayılar 
dizisini oluşturmak için kullanılır.

    const (
        A1 = iota  // 0 : Start at 0
        B1 = iota  // 1 : Increment by 1
        C1 = iota  // 2 : Increment by 1
    )
    fmt.Println(A1, B1, C1)

Çıktı:

    0 1 2

iota anahtar kelimesi bir sabit blok içinde çalışır ve 0 değeri ile başlar. Ardından 
blok içinde ilan edilen her ardışık sabit için iota 1 artar.

    const (
        A2 = iota  // 0 : Start at 0
        B2         // 1 : Increment by 1
        C2         // 2 : Increment by 1
    )
    fmt.Println(A2, B2, C2)

Çıktı:

    0 1 2

iota anahtar kelimesini tekrar kullanmanıza gerek yoktur. Tamsayı sabitlerinin ardışık 
doğası, bir kere uygulandığında varsayılır.

    const (
        A3 = iota + 1  // 1 : 0 + 1
        B3             // 2 : 1 + 1
        C3             // 3 : 2 + 1
    )
    fmt.Println(A3, B3, C3)

Çıktı:

    1 2 3

Matematiksel bir deseni uygulamak istemiyorsanız, bir miktar matematik yapabilir ve matematik, 
iota'nın artan bir değeri ile tekrar uygulanır.

    const (
        Ldate= 1 << iota  //  1 : Shift 1 to the left 0.  0000 0001
        Ltime             //  2 : Shift 1 to the left 1.  0000 0010
        Lmicroseconds     //  4 : Shift 1 to the left 2.  0000 0100
        Llongfile         //  8 : Shift 1 to the left 3.  0000 1000
        Lshortfile        // 16 : Shift 1 to the left 4.  0001 0000
        LUTC              // 32 : Shift 1 to the left 5.  0010 0000
    )

    fmt.Println(Ldate, Ltime, Lmicroseconds, Llongfile, Lshortfile, LUTC)

Çıktı:

    1 2 4 8 16 32

Bu özelliği, Log paketi gibi bayrakları ayarlamak için kullanabilirsiniz. Bu durumda, iota'nın 
artan değerleriyle bit işlemleri uygulanarak bayrak değerleri hesaplanıyor.

** Notlar

- Sabitler değişkenler değildir.
- Sadece derlemede var olurlar.
- Tür belirtilmemiş sabitler, tür belirtilmiş sabitler ve değişkenlerin yapılamayacağı yerde örtük olarak dönüştürülebilirler.
- Tür belirtilmemiş sabitleri, bir Tür değil bir Çeşit olarak düşünün.
- Açık ve örtük dönüşümleri öğrenin.
- Sabitlerin gücünü ve standart kütüphanedeki kullanımlarını keşfedin.

** Ekstra Okuma

- [[https://golang.org/ref/spec#Constants][Constants specification]]    
- [[https://blog.golang.org/constants][Constants]] - Rob Pike    
- [[https://www.ardanlabs.com/blog/2014/04/introduction-to-numeric-constants-in-go.html][Introduction To Numeric Constants In Go]] - William Kennedy    
		
* Egzersizler

Egzersizleri tamamlamak için şablonu bir başlangıç noktası olarak kullanın. Olası bir çözüm sağlanmıştır.

** Egzersiz 1

*Kısım* *A:* Belirtilmemiş ve belirtilmiş bir sabit bildirin ve değerlerini görüntüleyin.

*Kısım* *B:* İki literal sabiti bir belirtilmiş değişkene bölecek ve değeri görüntüleyeceksiniz.

.play constants/exercise1.go
.play constants/answer1.go
