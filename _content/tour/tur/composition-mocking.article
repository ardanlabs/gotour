Mocking
Derleyici, somut bir değerin bir arayüzü uygulayıp uygulamadığını belirlemek için statik kod analizi yapabildiği için, somut türü bildiren geliştiricinin aynı zamanda arayüzleri sağlaması gerekmez.

* Mocking

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Videoyu İzle]]
- Maddi Yardıma İhtiyacınız mı Var? [[https://www.ardanlabs.com/scholarship/][Burs Formumuzu Kullanın]]

Gömme avantajından yararlanmanın en iyi yolu, bileşim tasarım deseni aracılığıyla olur. 
Fikir, daha büyük tipleri daha küçük tiplerden oluşturmak ve davranışın bileşimine 
odaklanmaktır.

** Kod İnceleme

- *Örnek* *1:* Mocking

.play composition/mocking/example1.go

** Arayüz Sahipliği

Go'nun diğer dillerden farklı olan bir şey, konvansiyon üzerine yapılandırma fikridir. 
Bu, Go'nun arayüz uyumluluğunu nasıl ele aldığıyla kendini gerçekten gösterir. Derleyici, 
somut bir değerin bir arayüzü uygulayıp uygulamadığını belirlemek için statik kod analizi 
yapabildiği için, somut türü bildiren geliştirici aynı zamanda arayüzleri sağlamak zorunda 
değildir.

    package pubsub

    type PubSub struct {
        host string
    }

    func New(host string) *PubSub {
        return &PubSub{
            host: host,
        }
    }

    func (ps *PubSub) Publish(key string, v interface{}) error {
        // PRETEND THERE IS A SPECIFIC IMPLEMENTATION.
        return nil
    }

    func (ps *PubSub) Subscribe(key string) error {
        // PRETEND THERE IS A SPECIFIC IMPLEMENTATION.
        return nil
    }

Yeni bir API uyguladınız ve Publish ve Subscribe için somut bir uygulama sağlıyorsunuz. 
Arayüzler sağlanmıyor çünkü bu API'nin ihtiyacı yok. Bu tek bir somut uygulamadır.

Bu yeni API'yi kullanmak isteyen uygulama geliştiricisi, bu uygulamayı testler 
sırasında taklit etme ihtiyacı olduğunda bir arayüz isterse ne olur? Go'da, bu 
geliştirici arayüzü bildirebilir ve derleyici uyumluluğu tanımlayabilir.

    package main

    type publisher interface {
        Publish(key string, v interface{}) error
        Subscribe(key string) error
    }

    type mock struct{}

    func (m *mock) Publish(key string, v interface{}) error {
        // ADD MY MOCK FOR THE PUBLISH CALL.
        return nil
    }

    func (m *mock) Subscribe(key string) error {
        // ADD MY MOCK FOR THE SUBSCRIBE CALL.
        return nil
    }

Bu ana paketteki kod bir arayüz bildiriyor. Bu arayüz, uygulamanın pubsub paketinden 
kullandığı API'yi temsil eder. Geliştirici, test için kendi pubsub uygulamasını uygulamıştır. 
Buradaki önemli nokta, bu uygulama geliştiricisinin doğrudan herhangi bir somut uygulama 
kullanmaması, ancak kendi arayüzü üzerinden kendisini ayrıştırmasıdır.

    func main() {
        pubs := []publisher{
            pubsub.New("localhost"),
            &mock{},
        }

        for _, p := range pubs {
            p.Publish("key", "value")
            p.Subscribe("key")
        }
    }

Bir örnek sağlamak için, main fonksiyonu, pubsub uygulaması ve mock uygulaması ile başlatılan 
bir koleksiyon oluşturur. publisher arayüzü buna izin verir. Ardından, bir for döngüsü 
aracılığıyla uygulama kodunun herhangi bir somut uygulamadan soyutlandığını göstermek 
için kullanılır.
