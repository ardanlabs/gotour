Costanti
Una delle caratteristiche uniche di Go è il modo in cui il linguaggio implementa le costanti.

* Costanti

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Guarda il video]]
- Se necessiti di assistenza finanziaria, utilizza il nostro [[https://www.ardanlabs.com/scholarship/][form per richiedere una borsa di studio]]

Una delle caratteristiche uniche di Go è il modo in cui il linguaggio implementa le costanti.
Le regole delle costanti nelle specifiche del linguaggio sono uniche. Esse fornisconoThey provide
la flessibilità che Go necessita per rendere il codice leggibile ed intuitivo mentre mantiene ancora la sicurezza del tipo.

Costanti psosono essere tipizzate o non tipizzate. Quando una costante è non tipizzata, è considerata di un certo tipo.
Costanti di un tipo possono essere implicitamente convertite dal compilatore. Questo avviene al momento della compilazione e non a runtime.

** Code Review

- *Esempio* *1:* Dichiara e inizializza costanti
- *Esempio* *2:* Type system paralello (Kind) (mancante)
- *Esempio* *3:* iota
- *Esempio* *4:* Conversione implicita

.play constants/example1.go
.play constants/example2.go
.play constants/example3.go
.play constants/example4.go

    const ui = 12345     // genere: integer
    const uf = 3.141592  // genere: floating-point

Costanti numeriche non tipizzate hanno la precisione di 256 bits come riportato dalla specifica.
Esse sono basate sul genere.

    const ti int     = 12345     // type: int
    const tf float64 = 3.141592  // type: float64

Costanti tipizzate usano il type system delle costanti, ma la lore precisione è ristretta.

    const myUint8 uint8 = 1000 // Compiler Error: constant 1000 overflows uint8

Questo non funziona perchè il numero 1000 è troppo grande per essere conservato in un uint8.

    var answer = 3 * 0.333  // float64 = KindFloat(3) * KindFloat(0.333)

Costanti aritmetiche supportano l'uso di differenti tipi di costanti. La promozione del genere Kind Promotion
è usata per gestire questi scenari differenti. Questi avvengono implicitamente. La variabile in questo esempio sarà
di tipo float64 e rappresenta 0.999 alla precisione di 64 bits.

    const third = 1 / 3.0  // KindFloat = KindFloat(1) / KindFloat(3.0)

La terza costante sarà di tipo float e rappresenta 1/3 alla precisione di 256 bits.

    const zero = 1 / 3  // KindInt = KindInt(1) / KindInt(3)

La costante sarà di genere integer e impostato a 0 poichè le divisioni intere non hanno resto.

    const one int8 = 1
    const two = 2 * one  // int8(2) * int8(1)

Questo è un esempio di cotante aritmentica tra costanti tipizzata e non tipizzate.
In questo caso, una costante di un tipo promossa verso una costante di un genere.
Le due costanti saranno di tipo int8 e impostate a 2.

    const maxInt = 9223372036854775807

Questo è il massimo valore di integer per un intero a 64 bit.

    const bigger = 9223372036854775808543522345

La costante più grande è un valore molto più grande di un intero a 64 bit, ma esso può essere conservato in una costante
di genere int poichè costanti di genere int non sono limitate alla precisione a 64 bits.

    const bigger int64 = 9223372036854775808543522345

Compiler Error:

    constant 9223372036854775808543522345 overflows int64

Comunque, bigger fosse una costante di tipo int64, non compilerebbe.

** IOTA

IOTA fonrisce supporto per settare costanti intere successive. E' possibile che il nome venga dalla funzione intera ⍳ dal linguaggio di programmazione APL.
In APL, la funzione ⍳ (rappresentata con la nona lettera dell' alfabeto Greco, iota) è usata per creare array di valori zero di consecutivi,
interi ascendenti di lunghezza specificata.

    const (
        A1 = iota  // 0 : Parte da 0
        B1 = iota  // 1 : Incrementa di 1
        C1 = iota  // 2 : Incrementa di 1
    )
    fmt.Println(A1, B1, C1)

Output:

    0 1 2

La keyword iota funziona dentro un blocco di costanti e parte dal valore 0. Poi per ciascuna costante successivadichiarata nel blocco, iota incrementa di 1.

    const (
        A2 = iota  // 0 : Parte da 0
        B2         // 1 : Incrementa di 1
        C2         // 2 : Incrementa di 1
    )
    fmt.Println(A2, B2, C2)

Output:

    0 1 2

Tu non hai necessità di ripetere l'uso della keyword iota. La natura delle costanti intere successive sono assunte una volta applicato.

    const (
        A3 = iota + 1  // 1 : 0 + 1
        B3             // 2 : 1 + 1
        C3             // 3 : 2 + 1
    )
    fmt.Println(A3, B3, C3)

Output:

    1 2 3

Se tu non vuoi applicare un modello matematico, puoi eseguire della matematica e la matematica è riapplicata con un incremento di iota.

    const (
        Ldate= 1 << iota  //  1 : Shift 1 to the left 0.  0000 0001
        Ltime             //  2 : Shift 1 to the left 1.  0000 0010
        Lmicroseconds     //  4 : Shift 1 to the left 2.  0000 0100
        Llongfile         //  8 : Shift 1 to the left 3.  0000 1000
        Lshortfile        // 16 : Shift 1 to the left 4.  0001 0000
        LUTC              // 32 : Shift 1 to the left 5.  0010 0000
    )

    fmt.Println(Ldate, Ltime, Lmicroseconds, Llongfile, Lshortfile, LUTC)

Output:

    1 2 4 8 16 32

Puoi usare questa caratteristica come un Log package fa per settare dei flags. In questo caso, operazioni sui bit
vengono applicate con incrementi di valore di iota per calcolare i valori del flag.

** Note

- Constanti non sono variabili.
- Esse esistono solo alla compilazione.
- Costanti non tipizzate sono implicitamente convertite dove costanti tipizzate e variabili non possono.
- Pensa a costanti non tipizzate come se avessero un genere non un tipo.
- Impara sulle conversioni esplicite ed implicite.
- Guarda la potenza delle costanti e il loro uso nella libreria standard.

** Letture extra

- [[https://golang.org/ref/spec#Constants][Constants specification]]    
- [[https://blog.golang.org/constants][Constants]] - Rob Pike    
- [[https://www.ardanlabs.com/blog/2014/04/introduction-to-numeric-constants-in-go.html][Introduction To Numeric Constants In Go]] - William Kennedy    
		
* Esercizi

Usa il template come punto di partenza per completare gli esercizi. Una soluzione possibile è fornita.

** Esercizio 1

*Parte* *A:* Dichiara una costante non tipizzata e una tipizzata e mostra i loro valori.

*Parte* *B:* Dividi due costanti literal in una variabile tipizzata e mostra il valore.

.play constants/exercise1.go
.play constants/answer1.go
