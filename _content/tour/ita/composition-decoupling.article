Disaccoppiamento
La composizione va oltre la meccanica dell'incorporamento del tipo ed è più di un paradigma.

* Disaccoppiamento

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Guarda il video]]
- Se necessiti di assistenza finanziaria, utilizza il nostro [[https://www.ardanlabs.com/scholarship/][form per richiedere una borsa di studio]]

Il modo migliore di avvantaggiarsi dell'incorporamento è attraverso il design pattern della composizione.
E' la chiave per mantenere stabilità nel tuo software mantenendo l'abilità di adattare ai dati e ai cambiamenti che arriveranno.

** Code Review

- *Example* *1:* Composizione Struct
- *Example* *2:* Disaccoppiamento con interfaccia
- *Example* *3:* Composizione interfacce
- *Example* *4:* Disaccoppiamento con composizione di interfacce
- *Example* *5:* Rimozione Interface pollution
- *Example* *6:* API più precise

.play composition/decoupling/example1.go
.play composition/decoupling/example2.go
.play composition/decoupling/example3.go
.play composition/decoupling/example4.go
.play composition/decoupling/example5.go
.play composition/decoupling/example6.go

** Meccanica del disaccoppiamento

L'idea è di comporre tipi grandi da tipi piccoli e focalizzarsi sulla composizione del comportamento.

    type Xenia struct {
        Host    string
        Timeout time.Duration
    }

    func (*Xenia) Pull(d *Data) error {
        switch rand.Intn(10) {
        case 1, 9:
            return io.EOF
        case 5:
            return errors.New("Error reading data from Xenia")
        default:
            d.Line = "Data"
            fmt.Println("In:", d.Line)
            return nil
        }
    }

Il tipo Xenia rappresenta un sistema da cui è necessario estrarre i dati. L'implementazione non è importante.
Quello che è importante è che il metodo Pull può avere successo, fallire, o non avere dati da estrarre .

    type Pillar struct {
        Host    string
        Timeout time.Duration
    }

    func (*Pillar) Store(d *Data) error {
        fmt.Println("Out:", d.Line)
        return nil
    }

Il tipo Pillar rappresenta un sistema in cui devi inserire dati.
Quello che è importante è che il metodo Store può avere successo o fallire.

Questi due tipi rappresentano uno strato primitivo di codice che fornisce il comportamento base richiesto per risolvere un problema di business
di prendere dati da Xenia e conservarli dentro Pillar.

    func Pull(x *Xenia, data []Data) (int, error) {
        for i := range data {
            if err := x.Pull(&data[i]); err != nil {
                return i, err
            }
        }

        return len(data), nil
    }

    func Store(p *Pillar, data []Data) (int, error) {
        for i := range data {
            if err := p.Store(&data[i]); err != nil {
                return i, err
            }
        }

        return len(data), nil
    }

Il prossimo layer di codice è rappresentato da queste due funzioni, Pull e Store.
Essi costruiscono il layer primitivo per accettare una collezione di dati da prendere o da conservare nei rispettivi sistemi.
Queste funzioni si focalizzano su tipi concreti di Xenia e Pillar poiché questi sono i sistemi con cui il programma deve lavorare.

    func Copy(sys *System, batch int) error {
        data := make([]Data, batch)

        for {
            i, err := Pull(&sys.Xenia, data)
            if i > 0 {
                if _, err := Store(&sys.Pillar, data[:i]); err != nil {
                    return err
                }
            }

            if err != nil {
                return err
            }
        }
    }

La funzione Copy costruita sopra le funzioni Pull e Store per muovere tutti i dati è in attesa per ciascun lancio. Se noti il primo parametro da copiare si chiama System.

    type System struct {
        Xenia
        Pillar
    }

L'idea iniziale del tipo System è di comporre un sistema che sa come fare con Pull e Store.
In questo caso, comporre l'abilità di Pull e Store da Xenia e Pillar.

    func main() {
        sys := System{
            Xenia: Xenia{
                Host:    "localhost:8000",
                Timeout: time.Second,
            },
            Pillar: Pillar{
                Host:    "localhost:9000",
                Timeout: time.Second,
            },
        }

        if err := Copy(&sys, 3); err != io.EOF {
            fmt.Println(err)
        }
    }

Infine, la funzione main può essere scritta per costruire una Xenia e Pillar dentro la composizione di System.
Poi System può essere passato alla funzione Copy e i dati iniziano a fluire tra i due sistemi.

Con tutto questo codice, tu adesso hai la prima bozza di una soluzione concreta ad un problema concreto.

** Disaccoppiare con le Interfacce

Il prossimo passo è capire cosa potrebbe cambiare nel programma. In questo caso, cosa può cambiare è il sistema stesso.
Oggi sono Xenia e Pillar, domani possono essere Alice e Bob.
Con questa conoscenza, tu puoi voler disaccoppiare l'esistente soluzione concreta da questo cambiamento.
Per fare questo, tu vuoi cambiare la funzione concreta in una funzione polimorfica.

    func Pull(p Puller, data []Data) (int, error) {
        for i := range data {
            if err := p.Pull(&data[i]); err != nil {
                return i, err
            }
        }

        return len(data), nil
    }

    func Store(s Storer, data []Data) (int, error) {
        for i := range data {
            if err := s.Store(&data[i]); err != nil {
                return i, err
            }
        }

        return len(data), nil
    }

Attualmente, la funzione  Pull accetta un valore Xenia e la funzione Store accetta
un valore Pillar. Alla fine, non era importante se non era Xenia e Pillar, quello che è importante
è il valore concreto che conosce come fare il Pull e Store. Puoi cambiare queste funzioni per essere polimorfiche chiedendo
dati in base a ciò che può fare non per cosa è.

    type Puller interface {
        Pull(d *Data) error
    }

    type Storer interface {
        Store(d *Data) error
    }

Queste due interfacce descrivono cosa devono fare i dati concreti e sono questi tipi che vengono rimpiazzati nella
dichiarazione delle funzioni Pull e Store . Adesso queste funzioni sono polimorfiche.
Quando Alice e Bob sono dichiarati e implementati come Puller e
Storer, essi possono essere passati nelle funzioni.

Non hai ancora finito. Anche la funzione Copy deve essere polimorfica.

    func Copy(ps PullStorer, batch int) error {
        data := make([]Data, batch)

        for {
            i, err := Pull(ps, data)
            if i > 0 {
                if _, err := Store(ps, data[:i]); err != nil {
                    return err
                }
            }

            if err != nil {
                return err
            }
        }
    }

La funzione Copy function non chiede più un valore System, ma qualsiasi valore concreto
che sappia come fare Pull e Store.

    type PullStorer interface {
        Puller
        Storer
    }

L'interfaccia PullStorer è dichiarata attraverso la composizione. E' composta dalle interfacce Puller e Storer.
Lavora componendo interfacce grandi usando quelle piccole.

Nota come la variabile PullStorer è adesso passata nelle funzioni Pull e Store.
Come è possibile quando il tipo della informazione è diverso ?

    // func Pull(p Puller, data []Data) (int, error) {
    i, err := Pull(ps, data)

    // func Store(s Storer, data []Data) (int, error) {
    if _, err := Store(ps, data[:i]); err != nil {

Devi sempre ricordare, non passerai mai un valore di interfaccia al programma
poiché non esistono e non hanno valore. Puoi solo passare dati concreti. Così i dati concreti contenuti dentro la
variabile di interfaccia ps è quella che viene passata a Pull e Store.
Non è vero che il valore concreto conservato all'interno di ps deve
sapere come estrarre e conservare?

.image /tour/eng/static/img/comp1.png

Poichè System è composto da Xenia e Pillar, System implementa l'interfaccia PullStorer.
Con questi cambiamenti, puoi adesso creare nuovi tipi concreti che implementano l'interfaccia PullStorer.

    type System1 struct {
        Xenia
        Pillar
    }

    type System2 struct {
        Alice
        Bob
    }

    type System3 struct {
        Xenia
        Bob
    }

    type System4 struct {
        Alice
        Pillar
    }

Quando ci pensi su, dichiarare differenti tipi System per tutte le possibili combinazioni non è realistico.
Questo funzionerà, ma l'incubo del mantenimento richiede una soluzione migliore.

** Composizione interfaccia

E se decidessi di comporre il mio tipo di sistema concreto da due tipi di interfacce ?

    type System struct {
        Puller
        Storer
    }

Questa è una soluzione interessante.
Ciò consentirebbe all'applicazione di iniettare un Puller o uno Store concreti in System all' avvio della applicazione.

    func main() {
        sys := System{
            Puller: &Xenia{
                Host:    "localhost:8000",
                Timeout: time.Second,
            },
            Storer: &Pillar{
                Host:    "localhost:9000",
                Timeout: time.Second,
            },
        }

        if err := Copy(&sys, 3); err != io.EOF {
            fmt.Println(err)
        }
    }

Questo tipo di System implementa l'interfaccia PullStorer per tutte le possibili combinazioni di tipi concreti.

.image /tour/eng/static/img/comp2.png

Con questo cambio, l'applicazione è completamente disaccopiata dai cambiamenti al nuovo sistema che potebbero avvenire durante il tempo.

** Revisione di precisione

La prossima domanda da fare è, sono le funzioni polimorfiche precise come dovrebbero essere?
Questa è una parte del processo di ingegnerizzazione che non può essere ignorato.
La risposta è no, due cambiamenti possono essere fatti.

    func Copy(sys *System, batch int) error {

La funzione Copy non necessita di essere polimorfica perchè ci sarà un solo tipo System.
L'interfaccia PullStorer può essere rimossa dal programma.
Ricorda, sposti il polimorfismo dentro il tipo quando usi la composizione con le interfacce.

    func Copy(p Puller, s Storer, batch int) error {

Questo è un altro cambiamento che può essere fatto dalla funzione Copy. Questa modifica rende la funzione ancora più precisa e polimorfica.
Adesso la funziona sta chiedendo esattamente cosa è necessario basandosi su cosa i dati concreti possono fare.

.image /tour/eng/static/img/comp3.png

Con questo cambiamento la struct System può essere rimossa anche dal programma.

    func main() {
        x := Xenia{
            Host:    "localhost:8000",
            Timeout: time.Second,
        }

        p := Pillar{
            Host:    "localhost:9000",
            Timeout: time.Second,
        }

        if err := Copy(&x, &p, 3); err != io.EOF {
            fmt.Println(err)
        }
    }

Rimuovendo i tipi PullStorer e System, il programma si semplifica. La funzione main
può concentrarsi sulla costruzione di un Puller e Storer concreti necessari per spostare i dati.
Il tipo system e le API sono più precise.
Questa idea di precisione viene da Edsger W. Dijkstra

"Lo scopo dell'astrazione non è quello di essere vago, ma di creare un nuovo livello semantico in cui si possa essere assolutamente precisi". - Edsger W. Dijkstra

** Note

- Questo è molto di più della meccanica del' incorporamento dei tipi.
- Dichiara tipi e implementa flussi con la composizione in mente.
- Comprendi prima il problema che stai provando a risolvere. Questo significa comprendere i dati.
- Lo scopo è ridurre e minimizzare cambiamenti a cascata in tutto il tuo software.
- Interfacce forniscono il più alto livello di composizione.
- Non raggruppare tipi in base ad un comune DNA ma in base a un comportamento comune.
- Tutti possono lavorare insieme quando ci concentriamo su cosa facciamo e non su cosa siamo.

** Citazioni

"Una buona API non è solo facile da usare ma difficile da abusare." - JBD

"Puoi sempre incorporare, ma non puoi decomporre grandi interfacce una volta che sono là fuori. Mantieni le interfacce piccole." - JBD

"Non progettare con interfacce, scoprile." - Rob Pike

"La duplicazione è molto più economica di una astrazione sbagliata. - Sandi Metz

** Line guida di progettazione

Impara sulle [[https://github.com/ardanlabs/gotraining/blob/master/topics/go/#interface-and-composition-design][linee guida di progettazione]] per composizione.

** Letture extra

- [[https://programmingisterrible.com/post/176657481103/repeat-yourself-do-more-than-one-thing-and][Ripeti a te stesso, fare più di una cosa e riscrivere tutto]] - tef
- [[https://golang.org/doc/effective_go.html#embedding][Incorporazione]]
- [[https://www.ardanlabs.com/blog/2014/05/methods-interfaces-and-embedded-types.html][Methodi, Interfacce e incorporamento]] - William Kennedy
- [[https://www.ardanlabs.com/blog/2015/09/composition-with-go.html][Composizione In Go]] - William Kennedy
- [[https://www.ardanlabs.com/blog/2016/10/reducing-type-hierarchies.html][Ridurre la gerarchia dei tipi]] - William Kennedy
- [[https://www.ardanlabs.com/blog/2016/10/avoid-interface-pollution.html][Evitare l'inquinamento dell' interfaccia]] - William Kennedy

* Esercizi

Use il template come punto di partenza per completare gli esercizi. Viene fornita una possibile soluzione.

** Esercizio 1

Usando il template, dichiara un set di tipi concreti che implementano un set di tipi di interfacce predefinite.
Poi crea valori di questi tipi  e usali per completare un set di task predefiniti.

.play composition/decoupling/exercise1.go
.play composition/decoupling/answer1.go
