Operazioni di ordinamento
Questa sezione fornisce esempi che eseguono operazioni di ordinamento

* Bubble Sort

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Guarda il video]]
- Se necessiti di assistenza finanziaria, utilizza il nostro [[https://www.ardanlabs.com/scholarship/][form per richiedere una borsa di studio]]

Il programma di esempio implementa un funzione che esegue l'ordinamento bubble sort
su un set di numeri interi.

- Vedi su [[https://en.wikipedia.org/wiki/Bubble_sort][https://en.wikipedia.org/wiki/Bubble_sort]]

*Diagramma*

    Il Bubble sort è un semplice algoritmo di ordinamento che ripete i passi
    attraverso un lista di input elemento per elemento, comparando l'elemento
    corrente con quello successivo, scambiando i loro valori se necessario.

    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Array iniziale
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 10 ││ 05 ││ 25 ││ 15 ││ 30 │ ◁── Dopo la prima iterazione
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 05 ││ 10 ││ 15 ││ 25 ││ 30 │ ◁── Dopo la seconda iterazione / Ordinato
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/bubble.go

* Ordinamento di inserimento

Il programma di esempio implementa una funzione che esegue un inserimento ordinato su un set di interi.

- Vedi su [[https://en.wikipedia.org/wiki/Insertion_sort][https://en.wikipedia.org/wiki/Insertion_sort]]

*Diagramma*

    Ordinamento di inserimento itera un numero di volte pari alla lunghezza
    dell' array meno uno. Per un array di cinque numeri, l'ordinamento itererà
    4 volte. Partendo dall' indice 1, l'ordinamento muove quel numeor alla
    sinistra sistemandolo nella posizione ordinata.

    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Array iniziale
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Spostamento [1]=30 verso sinistra
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Dopo la prima iterazione
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Spostamento [2]=05 verso sinistra
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Dopo la seconda iterazione
    │ 05 ││ 10 ││ 30 ││ 25 ││ 15 │ ◁── Spostamento [3]=25 verso sinistra
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Dopo la terza iterazione
    │ 05 ││ 10 ││ 25 ││ 30 ││ 15 │ ◁── Spostamento [4]=15 verso sinistra
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Dopo la quarta iterazione
    │ 05 ││ 10 ││ 15 ││ 25 ││ 30 │ ◁── Array ordinato
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/insertion.go

* Heap Sort

Il programma di esempio implementa una funzione che esegue un ordinamento heap sort
su un set di interi.

- Vedi su [[https://en.wikipedia.org/wiki/Heapsort][https://en.wikipedia.org/wiki/Heapsort]]

*Diagramma*

Heap sort divide i numeri in input in un array ordinato e in uno disordinato.
L'algoritmo iterativamente restringe la regione disordinata estraendo l'elemento più grande da esso e inserendolo in quello ordinato.
L'algoritmo viene eseguito in due fasi.

    Fase I
    Divide la lista a metà e lavora la metà iniziale della lista, muovendo il
    valore più grande che trova e poi il secondo più grande.

    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Array iniziale
    │ 63 ││ 16 │ | │ 40 ││ 71 ││ 73 │ ◁── Controlla [1]=16 < [4]=73 : Scambia
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Dopo la prima iterazione
    │ 63 ││ 73 │ | │ 40 ││ 71 ││ 16 │ ◁── Controlla [0]=63 < [3]=71 : Scambia
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Dopo la seconda iterazione
    │ 73 ││ 71 │ | │ 40 ││ 63 ││ 16 │ ◁── Fase I completata
    └────┘└────┘ | └────┘└────┘└────┘

    Fase II
    Prende la lista e inizia a muovere i numeri in una altra lista ordinata.
    Prende il numero nella prima posizione e e lo rimuove dalla nuova lista che
    contiene l'ordinamento finale. Poi muove il numero più grande che trova e lo
    mette all' inizio della lista.

    ┌────┐┌────┐┌────┐┌────┐┌────┐ |  ◁── Array inziale
    │ 73 ││ 71 ││ 40 ││ 63 ││ 16 │ |
    └────┘└────┘└────┘└────┘└────┘ |
    ┌────┐┌────┐┌────┐┌────┐ | ┌────┐ ◁── Dopo la prima iterazione
    │ 71 ││ 63 ││ 40 ││ 16 │ | │ 73 │ ◁── Estrae il 73 e il 71 davanti
    └────┘└────┘└────┘└────┘ | └────┘
    ┌────┐┌────┐┌────┐ | ┌────┐┌────┐ ◁── Dopo la seconda iterazione
    │ 63 ││ 16 ││ 40 │ | │ 71 ││ 73 │ ◁── Muove il 71 e il 63 davanti
    └────┘└────┘└────┘ | └────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Dopo la terza iterazione
    │ 40 ││ 16 │ | │ 63 ││ 71 ││ 73 │ ◁── Muove il 63 e il 40 davanti
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐ | ┌────┐┌────┐┌────┐┌────┐ ◁── Dopo la quarta iterazione
    │ 16 │ | │ 40 ││ 63 ││ 71 ││ 73 │ ◁── Muove il 40 e il 16 davanti
    └────┘ | └────┘└────┘└────┘└────┘
     | ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Dopo la quinta iterazione
     | │ 16 ││ 40 ││ 63 ││ 71 ││ 73 │ ◁── Muove il 16 / Array ordinato
     | └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/heap.go

* Quick Sort

Il programma di esempio implementa una funzione che esegue un ordinamento quick sort su un set di numeri interi.

- Vedi su [[https://en.wikipedia.org/wiki/Quicksort][https://en.wikipedia.org/wiki/Quicksort]]

*Diagramma*

    Quicksort è un algoritmo dividi e conquista. Esso funziona selezionando un
    elemento 'pivot' da un array e partizionando gli altri elementi in sotto array,
    a seconda che siano più piccoli o più grandi del pivot.

    -------------------------------------------------------------------
    Esempio 1
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Array iniziale
    │ 45 ││ 39 ││ 37 ││ 15 ││ 41 │ ◁── Pivot valore 41
    └────┘└────┘└────┘└────┘└────┘ ◁── Ordina elementi 0 - 4
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 39 ││ 37 ││ 15 ││ 41 ││ 45 │ ◁── Primo ordinamento completo
    └────┘└────┘└────┘└────┘└────┘

    Ultimi due elementi ordinati, concentriamoci su i primi tre.

    ┌────┐┌────┐┌────┐
    │ 39 ││ 37 ││ 15 │ ◁── Pivot valore 15
    └────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 15 ││ 37 ││ 39 ││ 41 ││ 45 │ ◁── Ordinato
    └────┘└────┘└────┘└────┘└────┘

    -------------------------------------------------------------------
    Esempio 2
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Array iniziale
    │ 34 ││ 55 ││ 59 ││ 73 ││ 09 │ ◁── Pivot valore 09
    └────┘└────┘└────┘└────┘└────┘ ◁── Ordina elementi 0 - 4
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 55 ││ 59 ││ 73 ││ 34 │ ◁── Primo ordinamento completato
    └────┘└────┘└────┘└────┘└────┘

    Primo elemento ordinato, concentriamoci sugli ultimi quattro.

    ┌────┐┌────┐┌────┐┌────┐
    │ 55 ││ 59 ││ 73 ││ 34 │ ◁── Pivot valore 34
    └────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 59 ││ 73 ││ 55 │ ◁── Secondo ordinamento completato
    └────┘└────┘└────┘└────┘└────┘

     Primi due elementi ordinati, concentriamoci sugli ultimi tre.

    ┌────┐┌────┐┌────┐
    │ 59 ││ 73 ││ 55 │ ◁── Pivot valore 55
    └────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 55 ││ 73 ││ 59 │ ◁── Terzo ordinamento completato
    └────┘└────┘└────┘└────┘└────┘

    Primi tre elementi ordinati, concentriamoci sugli ultimi due.

    ┌────┐┌────┐ ◁── Pivot valore 59
    │ 73 ││ 59 │ ◁── Tezo ordinamento completato
    └────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 55 ││ 59 ││ 73 │ ◁── Array ordinato
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/quick.go
