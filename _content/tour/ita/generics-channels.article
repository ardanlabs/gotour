Channels
Scopri come il team Go potrebbe aggiungere un package di modelli di concorrenza alla libreria standard grazie ai generici.

* Generics - Channels

Scopri come il team Go potrebbe aggiungere un package di modelli di concorrenza alla libreria standard grazie ai generici.

** Video

Guarda il discorso che ho tenuto sui generics che ti guida attraverso tutti i passaggi
negli esempi in questa sezione del Tour.

.html generics-video.html

** Code Review

- *Example* *1*: Work Function
- *Example* *2*: Pooling

.play generics/channels/example1.go
.play generics/channels/example2.go

** Spiegazione

Ciò richiederebbe la dichiarazione di channels e funzioni utilizzando tipi generici.

    type workFn[Result any] func(context.Context) Result

In questo esempio viene dichiarato un tipo che rappresenta una funzione che accetta un context
e restituisce un valore di tipo generico Result. Questa dichiarazione di funzione descrive a
funzione che implementa il lavoro concorrente che verrà eseguito e il risultato
di quel lavoro.

    func doWork[Result any](ctx context.Context, work workFn[Result]) chan Result {
        ch := make(chan Result, 1)
        
        go func() {
            ch <- work(ctx)
            fmt.Println("doWork : work complete")
        }()
        
        return ch
    }

Ora scrivi una funzione denominata doWork che esegua la funzione specificata di lavoro
concorrente e restituisce un channel in modo che il chiamante possa ricevere il risultato del lavoro
svolto dalla funzione. Viene dichiarato un tipo generico denominato Result
rappresentante il tipo restituito per la funzione di lavoro e il tipo per il channel.

Nell'implementazione della funzione doWork, un canale bufferizzato è uno
costruito con il tipo generico Result. Questo è il channel restituito al chiamante
per ricevere il risultato del lavoro concorrente . Nel mezzo della funzione, una goroutine
è costruito per eseguire la funzione concorrente. Una volta che la funzione
ritorna, l'argomento restituito viene rispedito al chiamante attraverso il canale.

Per testare l'uso della funzione doWork, crea un piccolo programma.

    func main() {
        duration := 100 * time.Millisecond
        
        ctx, cancel := context.WithTimeout(context.Background(), duration)
        defer cancel()
        
        dwf := func(ctx context.Context) string {
            time.Sleep(time.Duration(rand.Intn(200)) * time.Millisecond)
            return "work complete"
        }

        result := doWork(ctx, dwf)
        
        select {
            case v := <-result:
                fmt.Println("main:", v)
            case <-ctx.Done():
                fmt.Println("main: timeout")
        }
    }

Output:

    doWork : work complete
    main: work complete

Il programma inizia dichiarando un context che scadrà in 100 millisecondi.
Quindi viene dichiarata una funzione di lavoro che attende fino a 200 millisecondi
restituendo la stringa "work complete". Con il context e la funzione lavorativa,
viene effettuata una chiamata a doWork e viene restituito un canale di tipo string e
assegnato alla variabile result.

Il compilatore è in grado di determinare il tipo concreto da utilizzare per il tipo generico
Result esaminando il tipo restituito della funzione di lavoro letterale a cui viene passata
la funzione doWork. Questo è geniale perché significa che non dovevi passare il tipo
nella chiamata a doWork.

Con il channel di tipo string assegnato alla variabile result, un select case è usato
per attendere che il risultato venga restituito in tempo o che si verifichi il timeout.
La funzione doWork può essere utilizzata per eseguire questo lavoro concorrente per qualsiasi tipo concreto
richiesto.

Questa stessa idea potrebbe essere applicata a un pool di goroutine che possono eseguire il lavoro
su un input generico e restituire un risultato generico.

type workFn[Input any, Result any] func(input Input) Result

In questo esempio, modificare il tipo di funzione per accettare un input generico e restituire a
risultato generico.

    func poolWork[Input any, Result any](size int, work workFn[Input, Result]) (chan Input, func()) {
        var wg sync.WaitGroup
        wg.Add(size)
        
        ch := make(chan Input)
        
        for i := 0; i < size; i++ {
            go func() {
                defer wg.Done()
                for input := range ch {
                    result := work(input)
                    fmt.Println("pollWork :", result)
                }
            }()
        }
        
        cancel := func() {
            close(ch)
            wg.Wait()
        }

        return ch, cancel
    }

Nella funzione poolWork, vengono dichiarati gli stessi due tipi generici per rappresentare il
tipo di input e il tipo di ritorno per la funzione di lavoro. Un WaitGroup è costruito per gestire
il ciclo di vita delle Goroutine nel pool. Quindi viene costruito un channel del
tipo di ingresso generico. Questo channel viene usato dalle Goroutine nel pool per ricevere i file
dati di input per la funzione lavorante.

Quindi viene creato il pool di Goroutine con ciascuna Goroutine in attesa in
una operazione di ricezione utilizzando un ciclo for-range rispetto al channel.
Infine, esiste una funzione di annullamento costruito per consentire al chiamante di chiudere il pool
e attendere che tutte le Goroutine segnalino che sono terminate.

Per testare l'uso della funzione poolWork, crea un secondo piccolo programma.

    func main() {
        size := runtime.GOMAXPROCS(0)
        
        pwf := func(input int) string {
            time.Sleep(time.Duration(rand.Intn(200)) * time.Millisecond)
            return fmt.Sprintf("%d : received", input)
        }

        ch, cancel := poolWork(size, pwf)
        defer cancel()
        
        for i := 0; i < 4; i++ {
            ch <- i
        }
    }

Output:

    pollWork : 3 : received
    pollWork : 2 : received
    pollWork : 1 : received
    pollWork : 0 : received

La dimensione del pool viene calcolata in base al numero di Goroutine che possono essere eseguite in
parallelo. Quindi viene costruita una funzione di lavoro che dorme per un periodo di tempo casuale
e quindi restituire una stringa che rappresenta l'input.

Fatto ciò, viene eseguita la funzione poolWork e il canale e la funzione di cancellazione vengono restituite.
La funzione di cancellazione viene posticipata e viene costruito un ciclo per inviare
4 valori nel pool. L'output sarà diverso ogni volta che esegui il programma
poiché questo lavoro si svolge in maniera concorrente.

Questi piccoli esempi forniscono alcune informazioni su come potrebbe essere un pacchetto concorrente
implementato.