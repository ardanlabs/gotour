Puntatori
I puntatori hanno lo scopo di condividere valori oltre i confini del programma.

* Pointers

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Guarda il video]]
- Se necessiti di assistenza finanziaria, utilizza il nostro [[https://www.ardanlabs.com/scholarship/][form per richiedere una borsa di studio]]

I puntatori hanno lo scopo di condividere valori oltre i confini del programma.
Ci sono diversi tipi di confini del programma. Il più comune è tra le chiamate di funzione.
C'è anche un confine tra le Goroutine di cui avrai delle note successivamente.

** Code Review

- *Example* *1:* Pass by Value
- *Example* *2:* Sharing Data I
- *Example* *3:* Sharing Data II
- *Example* *4:* Escape Analysis
- *Example* *5:* Stack Grow

.play pointers/example1.go
.play pointers/example2.go
.play pointers/example3.go
.play pointers/example4.go
.play pointers/example5.go

Quando un programma Go viene avviato, il runtime Go crea una Goroutine. Le goroutine sono
thread leggeri a livello di applicazione con molte delle stesse semantiche dei
thread di sistema. Il loro compito è gestire l'esecuzione fisica di un insieme distinto di
istruzioni. Ogni programma Go ha almeno 1 Goroutine che chiamiamo Goroutine principale.

Ad ogni Goroutine viene assegnato il proprio blocco di memoria chiamato stack.
Ogni stack inizia con un'allocazione di 2048 byte (2k).
È molto piccolo, ma gli stack possono aumentare di dimensione nel tempo.

.image /tour/eng/static/img/p1.png

Ogni volta che viene chiamata una funzione, viene preso un blocco di spazio nello stack
per aiutare la Goroutine a eseguire le istruzioni associate a quella funzione.
Ogni singolo blocco di memoria è chiamato frame.

La dimensione di un frame per una determinata funzione viene calcolata in fase di compilazione.
Nessun valore può essere costruito nello stack a meno che il compilatore non conosca la dimensione
di quel valore in fase di compilazione.
Se il compilatore non conosce la dimensione di un valore in fase di compilazione,
il valore deve essere costruito nell'heap.

Gli stack sono autopulenti e il valore zero aiuta con l'inizializzazione dello stack.
Ogni volta che si effettua una chiamata di funzione, un frame di memoria viene bloccato,
la memoria per quel frame viene inizializzata, questo è il modo in cui lo stack si autopulisce.
Al ritorno di una funzione, la memoria per il frame viene lasciata intatta poiché
non è noto se tale memoria sarà nuovamente necessaria.
Sarebbe inefficiente inizializzare la memoria sui return.

*Passaggio* *per* *valore*

Tutti i dati vengono spostati nel programma in base al valore.
Ciò significa che quando i dati vengono passati oltre i confini del programma,
a ciascuna funzione o Goroutine viene assegnata la propria copia dei dati.
Esistono due tipi di dati con cui lavorerai, il valore stesso (int, stringa, utente)
o l'indirizzo del valore.
Gli indirizzi sono dati che devono essere copiati e archiviati oltre i limiti del programma.

Il codice seguente tenta di spiegare meglio questo aspetto.

    func main() {

        // Declare variable of type int with a value of 10.
        count := 10

        // To get the address of a value, use the & operator.
        println("count:\tValue Of[", count, "]\tAddr Of[", &count, "]")

        // Pass a copy of the "value of" count (what’s in the box)
        // to the increment1 function.
        increment1(count)

        // Print out the "value of" and "address of" count.
        // The value of count will not change after the function call.
        println("count:\tValue Of[", count, "]\tAddr Of[", &count, "]")

        // Pass a copy of the "address of" count (where is the box)
        // to the increment2 function. This is still considered a pass by
        // value and not a pass by reference because addresses are values.
        increment2(&count)

        // Print out the "value of" and "address of" count.
        // The value of count has changed after the function call.
        println(
            "count:\tValue Of[", 
            count, "]\tAddr Of[", &count, "]")
    }

    // increment1 declares the function to accept its own copy of
    // and integer value.
    func increment1(inc int) {

        // Increment the local copy of the caller’s int value.
        inc++
        println("inc1:\tValue Of[", inc, "]\tAddr Of[", &inc, "]")
    }

    // increment2 declares the function to accept its own copy of
    // an address that points to an integer value.
    // Pointer variables are literal types and are declared using *.
    func increment2(inc *int) {

        // Increment the caller’s int value through the pointer.
        *inc++
        println(
            "inc2:\tValue Of[", 
            inc, "]\tAddr Of[", &inc, 
            "]\tPoints To[", *inc, "]")
    }

Output:

    count:  Value Of[ 10 ]  Addr Of[ 0xc000050738 ]
    inc1:   Value Of[ 11 ]  Addr Of[ 0xc000050730 ]
    count:  Value Of[ 10 ]  Addr Of[ 0xc000050738 ]
    inc2:   Value Of[ 0xc000050738 ] Addr Of[ 0xc000050748 ] Points To[ 11 ]
    count:  Value Of[ 11 ]  Addr Of[ 0xc000050738 ]

** Note

- Usare i puntatori per condividere i dati.
- I valori in Go vengono sempre passati per valore.
- "Valore di", cosa c'è nella scatola. "Indirizzo di" ( & ), dove si trova la casella.
- L'operatore (*) dichiara una variabile puntatore e il "Valore a cui punta il puntatore".

** Escape Analysis

L'algoritmo utilizzato dal compilatore per determinare se un valore deve essere costruito
nello stack o nell'heap è chiamato "escape analysis".
Il nome dell'algoritmo fa sembrare che i valori vengano prima costruiti nello stack e
poi sfuggano (o si spostino) nell'heap quando necessario.
Questo non è il caso. La costruzione di un valore avviene solo una volta e
l'algoritmo di analisi di fuga decide dove sarà (stack o heap).
Solo la costruzione sull'heap è chiamata allocazione in Go.

Comprendere l’escape analysis significa comprendere la proprietà del valore.
L'idea è che quando un valore viene costruito nell'ambito di una funzione, quella
funzione possiede il valore. Da lì fai la domanda: il valore in costruzione
deve ancora esistere quando la funzione proprietaria ritorna il risultato?
Se la risposta è no, il valore può essere costruito nello stack.
Se la risposta è sì, è necessario costruire il valore nell' heap.

Nota: La regola sulla proprietà è una buona regola di base per identificare
il codice che causa le allocazioni. Tuttavia, è necessario comprendere che l'escape analysis
presenta difetti che possono comportare allocazioni non ovvie.
Inoltre, l'algoritmo coglie l'opportunità di sfruttare le ottimizzazioni del compilatore
per risparmiare sulle allocazioni.

    // user represents a user in the system.
    type user struct {
        name  string
        email string
    }

    func stayOnStack() user {
        u := user{
            name:  "Bill",
            email: "bill@email.com",
        }

        return u
    }

La funzione stayOnStack utilizza la semantica del valore per restituire un valore user al chiamante.
In altre parole, il chiamante ottiene la propria copia del valore user in fase di costruzione.

Quando la funzione stayOnStack viene chiamata e ritorna, il valore user che costruisce
non deve più esistere, poiché il chiamante ottiene la propria copia. Pertanto, la costruzione
del valore user all'interno di stayOnStack può avvenire nello stack.
Nessuna allocazione.

    type user struct {
        name  string
        email string
    }

    func escapeToHeap() *user {
        u := user{
            name:  "Bill",
            email: "bill@email.com",
        }

        return &u
    }

La funzione escapeToHeap utilizza la semantica del puntatore per restituire un valore user al chiamante.
In altre parole, il chiamante ottiene l'accesso condiviso (un indirizzo) al valore user in fase di costruzione.

Quando la funzione escapeToHeap viene chiamata e ritorna, il valore user che essa costruisce deve ancora esistere,
poiché il chiamante ottiene l'accesso condiviso al valore.
Pertanto, la costruzione del valore utente all'interno di escapeToHeap non può avvenire nello stack,
deve avvenire nell'heap. Allocazione.

Pensa a cosa accadrebbe se il valore utente nell'ultimo esempio fosse costruito nello stack
quando si utilizza la semantica del puntatore sul return.

.image /tour/eng/static/img/p2.png

Il chiamante otterrebbe una copia di un indirizzo dello stack dal frame sottostante e l'integrità andrebbe persa.
Una volta che il controllo ritorna alla funzione chiamante, la memoria nello stack dove esiste il valore user
è nuovamente riutilizzabile. Il momento in cui la funzione chiamante effettua un'altra chiamata di funzione,
un nuovo frame viene inizializzato e la memoria verrà sovrascritta,
distruggendo il valore condiviso.

Questo è il motivo per cui pensi che lo stack sia autopulente. Inizializzazione del valore zero
aiuta a pulire ogni stack frame di cui hai bisogno senza l'uso del Garbage Collector. Lo stack
è autopulente poiché viene preso e inizializzato un frame per l'esecuzione di ciascuna
chiamata di funzione. Lo stack viene pulito durante le chiamate di funzione e non sui return perché
il compilatore non sa se quella memoria sullo stack sarà ancora necessaria.

L'Escape analysis decide se un valore viene costruito nello stack (impostazione predefinita) o nell'heap (escape).
Con la funzione stayOnStack, sto passando una copia del valore al chiamante, così
è sicuro mantenere il valore nello stack. Con la funzione escapeToHeap,
passo una copia dell'indirizzo del valore al chiamante (condividendo lo stack), quindi
non è sicuro mantenere il valore nello stack.

Ci sono molti piccoli dettagli relativi alla a, quindi per saperne di più leggi il post
nel capitolo 14 intitolato Meccanica della escape analysis.

Nota: a partire dalla versione 1.17, Go ha modificato l'ABI (interfaccia binaria dell'applicazione) per
implementare un nuovo modo di passare gli argomenti di input e output delle funzioni utilizzando i registri
invece della memoria nello stack. Questo è abilitato per Linux, MacOS e Windows
sulle architetture x86 a 64 bit. Questo significa che alcuni argomenti di funzione non saranno
copiati nello stack, ma alcuni potrebbero dipendere dalla fattibilità dell'utilizzo dei registri.
Ciò non cambia nessuna delle semantiche descritte in questo capitolo.

** Note

- Quando un valore può essere referenziato dopo che la funzione che lo ha costruito ritorna l'esecuzione al chiamante
- Quando il compilatore determina che un valore è troppo grande per essere inserito nello stack.
- Quando il compilatore non conosce la dimensione di un valore in fase di compilazione.
- Quando un valore viene disaccoppiato tramite l'uso di funzioni o di interfacce

** Semantiche di Garbage Collection

Una volta che un valore è costruito nell'heap, il Garbage Collector (GC) deve essere
coinvolto. La parte più importante del GC è l'algoritmo di stimolazione. Esso determina
la frequenza/ritmo che il GC deve eseguire per mantenere l'heap più piccolo
possibile insieme al miglior throughput dell'applicazione.

- [[https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html][Garbage Collection Semantics Part I]] - William Kennedy

** Stack contro Heap

"Lo stack è per i dati che devono persistere solo per la durata della funzione che li
costruisce e viene recuperato senza alcun costo quando la funzione termina.
Lo heap è per i dati che devono persistere dopo che la funzione che li ha costruiti è terminata,
e vengono recuperati da una garbage collection a volte costosa." - Ayan George

** Crescita dello Stack

La dimensione di ciascun frame per ogni funzione viene calcolata in fase di compilazione.
Ciò significa che, se il compilatore non conosce la dimensione di un valore in fase di compilazione,
il valore deve essere costruito nell'heap.
Un esempio di ciò è l'utilizzo della funzione incorporata make per costruire uno slice
la cui dimensione è basata su una variabile.

    b := make([]byte, size) // Backing array allocates on the heap.

Go utilizza un'implementazione di stack contiguo per determinare il modo
in cui gli stack crescono e si riducono.
Un'alternativa che Go avrebbe potuto utilizzare è un'implementazione
dello stack segmentato, utilizzata in alcuni sistemi operativi.

Ogni chiamata di funzione arriva con un piccolo preambolo che chiede:
"C'è abbastanza spazio nello stack per questo nuovo frame?". Se sì, allora
nessun problema e il frame viene preso e inizializzato. In caso contrario, è
necessario costruire un nuovo stack più grande e la memoria sullo stack esistente
deve essere copiata su quello nuovo. Ciò richiede modifiche ai puntatori che
fanno riferimento alla memoria nello stack. I vantaggi della memoria contigua e
gli attraversamenti lineari con hardware moderno rappresentano il compromesso per il costo della copia.

A causa dell’uso di stack contigui, nessuna Goroutine può avere un puntatore allo stack di qualche altra Goroutine.
Ci sarebbe un sovraccarico eccessivo per il runtime per tenere traccia di ogni puntatore
a ogni stack e riadattare tali puntatori alla nuova posizione.

** ELetture extra

**Meccanica del puntatore*

- [[https://golang.org/doc/effective_go.html#pointers_vs_values][Pointers vs. Values]]    
- [[https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html][Language Mechanics On Stacks And Pointers]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2014/12/using-pointers-in-go.html][Using Pointers In Go]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2013/07/understanding-pointers-and-memory.html][Understanding Pointers and Memory Allocation]] - William Kennedy    

*Stack*

- [[https://docs.google.com/document/d/1wAaf1rYoM4S4gtnPh0zOlGzWtrZFQ5suE8qr2sD8uWQ/pub][Contiguous Stack Proposal]]  

*Escape* *Analysis* *e* *Inlining*

- [[https://docs.google.com/document/d/1CxgUBPlx9iJzkz9JWkb6tIpTe5q32QDmz8l0BouG0Cw][Go Escape Analysis Flaws]]  
- [[https://github.com/golang/go/wiki/CompilerOptimizations][Compiler Optimizations]]

*Garbage* *Collection*

- [[http://gchandbook.org/][The Garbage Collection Handbook]]  
- [[https://github.com/golang/proposal/blob/master/design/44167-gc-pacer-redesign.md][GC Pacer Redesign - 2021]] - Michael Knyszek  
- [[https://en.wikipedia.org/wiki/Tracing_garbage_collection][Tracing Garbage Collection]]  
- [[https://blog.golang.org/go15gc][Go Blog - 1.5 GC]] 
- [[https://www.youtube.com/watch?v=aiv1JOfMjm0&index=16&list=PL2ntRZ1ySWBf-_z-gHCOR2N156Nw930Hm][Go GC: Solving the Latency Problem]]  
- [[http://rubinius.com/2013/06/22/concurrent-garbage-collection][Concurrent garbage collection]]  
- [[https://docs.google.com/document/d/1wmjrocXIWTr1JxU-3EQBI6BK6KgtiFArkG47XK73xIQ/edit][Go 1.5 concurrent garbage collector pacing]]  
- [[https://github.com/golang/proposal/blob/master/design/17503-eliminate-rescan.md][Eliminating Stack Re-Scanning]]  
- [[https://groups.google.com/forum/m/#!topic/golang-nuts/KJiyv2mV2pU][Why golang garbage-collector not implement Generational and Compact gc?]] - Ian Lance Taylor  
- [[https://blog.golang.org/ismmkeynote][Getting to Go: The Journey of Go's Garbage Collector]] - Rick Hudson  
- [[https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html][Garbage Collection In Go : Part I - Semantics]] - William Kennedy  
- [[https://www.ardanlabs.com/blog/2019/05/garbage-collection-in-go-part2-gctraces.html][Garbage Collection In Go : Part II - GC Traces]] - William Kennedy  
- [[https://www.ardanlabs.com/blog/2019/07/garbage-collection-in-go-part3-gcpacing.html][Garbage Collection In Go : Part III - GC Pacing]] - William Kennedy  
- [[https://blog.twitch.tv/en/2019/04/10/go-memory-ballast-how-i-learnt-to-stop-worrying-and-love-the-heap-26c2462549a2/][Go memory ballast: How I learnt to stop worrying and love the heap]] - Ross Engers  

*Static* *Single* *Assignment* *Optimizations*

- [[https://www.youtube.com/watch?v=D2-gaMvWfQY][GopherCon 2015: Ben Johnson - Static Code Analysis Using SSA]]  
- [[https://godoc.org/golang.org/x/tools/go/ssa][Package SSA]]    
- [[https://www.youtube.com/watch?v=FnGCDLhaxKU][Understanding Compiler Optimization]]

* Esercizi

Utilizza il modello come punto di partenza per completare gli esercizi. Un possibile viene fornita la soluzione.

** Esercizio 1

*Parte* *A:* Dichiara e inizializza una variabile di tipo int con il valore 20.
Visualizza l'"indirizzo" e il "valore" della variabile.

*Parte* *B:* Dichiara e inizializza una variabile puntatore di tipo int a cui punta
l'ultima variabile che hai appena creato. Visualizza l'"indirizzo", il "valore" e il
"valore a cui punta il puntatore".

** Esercizio 2

Dichiara un tipo di struct e crea un valore di questo tipo. Dichiara una funzione che
può cambiare il valore di alcuni campi in questo tipo struct. Visualizza il valore prima
e dopo la chiamata alla tua funzione.

.play pointers/exercise1.go
.play pointers/answer1.go
.play pointers/exercise2.go
.play pointers/answer2.go
