Functions
Functions are at the core of the language and they provide a mechanism to group and organize our code to separate and distinct pieces of functionality.

* Functions

Functions are at the core of the language and they provide a mechanism to group
and organize our code to separate and distinct pieces of functionality. They can
be used to provide an API to the packages we write and are a core component
to concurrency.

** Code Review

- *Example* *1:* Return multiple values
- *Example* *2:* Blank identifier
- *Example* *3:* Redeclarations
- *Example* *4:* Anonymous Functions/Closures
- *Example* *5:* Recover panics

.play functions/example1.go
.play functions/example2.go
.play functions/example3.go
.play functions/example4.go
.play functions/example5.go

** Notes

- Functions can return multiple values and most return an error value.
- The error value should always be checked as part of the programming logic.
- The blank identifier can be used to ignore return values.

** Extra Reading

- [[https://golang.org/doc/effective_go.html#functions][Effictive Go]] 
- [[https://www.ardanlabs.com/blog/2013/10/functions-and-naked-returns-in-go.html][Functions and Naked returns in Go]]  
- [[https://www.ardanlabs.com/blog/2013/06/understanding-defer-panic-and-recover.html][Understanding defer panics and recover]]

* Exercises

Use the template as a starting point to complete the exercises. A possible
solution is provided.

** Exercise 1

*Part* *A:* Declare a struct type to maintain information about a user. Declare a
function that creates value of and returns pointers of this type and an error
value. Call this function from main and display the value.

*Part* *B:* Make a second call to your function but this time ignore the value
and just test the error value.

.play functions/exercise1.go		
.play functions/answer1.go
