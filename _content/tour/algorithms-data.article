Data
This section covers algorithms on data manipulation

* Data

TODO - Intro

** Hash Table

Hash table

        hashKey(key) ────────┐
                             │
                             ↓
    ┌────┬─────┬─────┬────┬─────┬─────┬─────┬─────┐
    │    │     │     │    │     │     │     │     │  ←── bucket
    └────┴─────┴─────┴────┴─────┴─────┴─────┴─────┘
             │               │
             ↓               ↓
       ┌─────────────┐  ┌─────────────┐
       │ key │ value │  │ key │ value │  ←── entry
       ├─────────────┤  ├─────────────┤
       │ key │ value │  │ key │ value │
       ├─────────────┤  └─────────────┘
       │ key │ value │
       ├─────────────┤
       │ key │ value │
       ├─────────────┤
       │ key │ value │
       └─────────────┘


- hashKey(key) returns a number between 0 to len(buckets)-1
- We use a slice of entries as a bucket to handles cases where two or more keys
  are hashed to the same bucket
- See more at [[https://en.wikipedia.org/wiki/Hash_table][https://en.wikipedia.org/wiki/Hash_table]]

.play algorithms/data/hash/hash.go

** List

Double linked list with Go

.play algorithms/data/list/list.go

** Queue

Implementing a Queue with Go

.play algorithms/data/queue/queue.go

** Stack

Implementing a Stack with Go

.play algorithms/data/stack/stack.go

** Tree

Implementing a binary tree with Go

.play algorithms/data/tree/binary/example/tree.go