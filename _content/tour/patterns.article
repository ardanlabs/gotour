Concurrency Patterns
There are lots of different patterns we can create with goroutines and channels.

* Concurrency Patterns
There are lots of different patterns we can create with goroutines and channels. Two interesting patterns are resource pooling and concurrent searching.

** Notes

- The work code provides a pattern for giving work to a set number of goroutines without losing the guarantee.
- The resource pooling code provides a pattern for managing resources that goroutines may need to acquire and release.
- The search code provides a pattern for using multiple goroutines to perform concurrent work.

** Links

- [[https://github.com/gobridge/concurrency-patterns][Concurrency patterns]]    
- [[https://blog.golang.org/pipelines][Go Concurrency Patterns: Pipelines and cancellation]] - Sameer Ajmani    
- [[https://talks.golang.org/2012/concurrency.slide#1][Go Concurrency Patterns]] - Rob Pike    
- [[https://blog.golang.org/context][Go Concurrency Patterns: Context]] - Sameer Ajmani    
- [[https://blog.golang.org/advanced-go-concurrency-patterns][Advanced Go Concurrency Patterns]] - Sameer Ajmani    
- [[https://talks.golang.org/2012/chat.slide][Go: code that grows with grace]] - Andrew Gerrand    

Functional Options : type DialOption func(-dialOptions)  
[[https://github.com/grpc/grpc-go/blob/master/clientconn.go][clientconn.go]]


.play patterns/chat/chat.go
.play patterns/chat/main/main.go

.play patterns/task/task.go
.play patterns/task/main/main.go

.play patterns/pool/pool.go
.play patterns/pool/main/main.go


.play patterns/logger/logger.go
.play patterns/logger/main/main.go

** Ardan Labs Kit

[[https://github.com/ardanlabs/kit][Open]]


All material is licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache License Version 2.0, January 2004]].
