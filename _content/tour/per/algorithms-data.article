ساختارهای داده
این بخش نمونه‌های ساختارهای داده را ارائه می‌دهد.

* Hash Map

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][تماشای ویدئو]]
- نیاز به کمک مالی دارید؟ از [[https://www.ardanlabs.com/scholarship/][فرم Scholarship]] ما استفاده کنید.

این برنامه نمونه‌ای از جدول هش پایه را پیاده‌سازی می‌کند.

- تابع hashKey(key) یک عدد بین 0 تا len(buckets)-1 برمی‌گرداند.
- ما از یک برش از ورودی‌ها به عنوان یک سبد استفاده می‌کنیم تا مواردی که دو یا چند کلید به همان سبد هش می‌شوند، را اداره کنیم.

- برای اطلاعات بیشتر به این لینک مراجعه کنید: [[https://en.wikipedia.org/wiki/Hash_table][https://en.wikipedia.org/wiki/Hash_table]]

*دیاگرام*

    با یک hash map، داده‌ها بر اساس سبد و سپس موقعیت داخل سبد فهرست می‌شوند.

    hashKey(key) ──────────────┐
                               │
                               ▽
     ┌────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐
     │    │     │     │     │     │     │     │     │  ◁── bucket
     └────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘
             │                 │
             ▽                 ▽
       ┌─────────────┐   ┌─────────────┐
       │ key │ value │   │ key │ value │  ◁── entry
       ├─────────────┤   ├─────────────┤
       │ key │ value │   │ key │ value │
       ├─────────────┤   └─────────────┘
       │ key │ value │
       ├─────────────┤
       │ key │ value │
       ├─────────────┤
       │ key │ value │
       └─────────────┘

.play algorithms/data/hash_map.go

* لیست مرتبط

این برنامه نمونه‌ای از یک لیست مرتبط دوطرفه اساسی پیاده‌سازی می‌کند.

- برای اطلاعات بیشتر به این لینک مراجعه کنید: [[https://en.wikipedia.org/wiki/Linked_list][https://en.wikipedia.org/wiki/Linked_list]]

*دیاگرام*

    در یک لیست مرتبط، مقادیر با استفاده از
    اشاره‌گرها به یکدیگر مرتب شده و به ترتیب‌های مختلفی به یکدیگر متصل می‌شوند.

    ┌─────┐     ┌─────┐     ┌─────┐     ┌─────┐     ┌─────┐
    │ Val │ ◁─▷ │ Val │ ◁─▷ │ Val │ ◁─▷ │ Val │ ◁─▷ │ Val │
    └─────┘     └─────┘     └─────┘     └─────┘     └─────┘
       △                                               △
       │                                               │
       ────────────────────        ─────────────────────
                          │        │
                          │        │
                       ┌───────────────┐
                       │ First │  Last │
                       └───────────────┘

.play algorithms/data/list.go

* صف

این برنامه نمونه‌ای از یک صف دایره‌ای اساسی پیاده‌سازی می‌کند.

- برای اطلاعات بیشتر به این لینک مراجعه کنید: [[https://en.wikipedia.org/wiki/Queue_(abstract_data_type)][https://en.wikipedia.org/wiki/Queue_(abstract_data_type)]]

*دیاگرام*

    در یک صف، اولین مقداری که وارد می‌شود، اولین مقداری است که خارج می‌شود.

               ┌──────────────────────────────────────────┐
    ┌─────┐    │ ┌─────┐    ┌─────┐    ┌─────┐    ┌─────┐ │    ┌─────┐
    │ V06 │ ─▷ │ │ V05 │ ─▷ │ V04 │ ─▷ │ V03 │ ─▷ │ V02 │ │ ─▷ │ V01 │
    └─────┘    | └─────┘    └─────┘    └─────┘    └─────┘ |    └─────┘
               └──────────────────────────────────────────┘

.play algorithms/data/queue_circular.go

* پشته

این برنامه نمونه‌ای از یک پشته اساسی پیاده‌سازی می‌کند.

- برای اطلاعات بیشتر به این لینک مراجعه کنید: [[https://en.wikipedia.org/wiki/Stack_(abstract_data_type)][https://en.wikipedia.org/wiki/Stack_(abstract_data_type)]]

*دیاگرام*

    در یک پشته، اولین مقداری که وارد می‌شود، آخرین مقداری است که خارج می‌شود.

           ┌─────┐
           │ V05 │
           └─────┘
              │
              ▽          ┌─────┐
        ┌───────────┐ ─▷ │ V04 │
        │  ┌─────┐  │    └─────┘
        │  │ V03 │  │
        │  └─────┘  │
        │  ┌─────┐  │
        │  │ V02 │  │
        │  └─────┘  │
        │  ┌─────┐  │
        │  │ V01 │  │
        │  └─────┘  │
        └───────────┘

.play algorithms/data/stack.go

* درخت دودویی

این برنامه نمونه‌ای از یک درخت دودویی اساسی پیاده‌سازی می‌کند.

- برای اطلاعات بیشتر به این لینک مراجعه کنید: [[https://en.wikipedia.org/wiki/Binary_tree][https://en.wikipedia.org/wiki/Binary_tree]]

*دیاگرام*

    در یک درخت دودویی، داده‌ها به یکی از دو
    طرف چپ یا راست درخت اختصاص می‌یابد. با اضافه کردن هر گره، درخت تعادل می‌یابد.

      0     1     2     3     4     5     6    ◁─ ترتیب اضافه کردن
    ┌────┐┌────┐┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 65 ││ 45 ││ 35 ││ 75 ││ 85 ││ 78 ││ 95 │
    └────┘└────┘└────┘└────┘└────┘└────┘└────┘

                   ┌────┐
                   │ 75 │                      ◁─ درخت نهایی
                   └────┘
                 /        \
           ┌────┐          ┌────┐
           │ 45 │          │ 85 │
           └────┘          └────┘
           /    \          /    \
       ┌────┐  ┌────┐  ┌────┐  ┌────┐
       │ 35 │  │ 65 │  │ 78 │  │ 95 │
       └────┘  └────┘  └────┘  └────┘

.play algorithms/data/tree_binary.go
