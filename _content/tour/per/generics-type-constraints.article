نوع به عنوان محدودیت
این یک مفهوم جدید در Go است که محدودیت می‌تواند بر اساس یک مجموعه از انواع مشخص باشد.این تنها برای ژنریک‌ها کار می‌کند.

* ویدئو

تماشای سخنرانی من در مورد ژنریک‌ها که تمام مثال‌ها را در این بخش از تور را مرور می‌کند.

.html generics-video.html

** مرور کد

- *مثال* *1*: محدودیت مبتنی بر نوع
- *مثال* *2*: محدودیت نوع پیش‌تعیین شده "comparable"
- *مثال* *3*: ترکیب محدودیت‌های نوع و رفتار

.play generics/type-constraints/example1.go
.play generics/type-constraints/example2.go
.play generics/type-constraints/example3.go

** توضیح داده شده

توابع ژنریک یک نوع جدید از محدودیت ایجاد می‌کنند که نمی‌توانند توسط اعلان مجموعه متدهای رفتار حل شوند.

    func Add[T ???](v1 T, v2 T) T {
        return v1 + v2
    }

در اینجا یک تابع ژنریک وجود دارد که می‌خواهد دو مقدار از نوع T را بپذیرد، آن‌ها را با یکدیگر جمع کند، و سپس مجموع را به تماس‌گر برگرداند. این یک مشکل جالب است زیرا کامپایلر باید تماس به تابع را برای تنها مقادیری که می‌توانند در یک عمل جمع مورد استفاده قرار گیرند محدود کند. در حال حاضر مکانیکی برای اعلان این نوع محدودیت وجود ندارد.

تصمیم گرفته شد که از رابطه برای اعلان محدودیت استفاده شود و چیزی جدید اضافه شود.

    type addOnly interface {
        string | int | int8 | int16 | int32 | int64 | float64
    }

می‌توانید یک رابط اعلان کنید که یک مجموعه از انواع را تشکیل دهد که محدودیت را تشکیل می‌دهند. سپس این رابط را برای تابع ژنریک اعمال کنید.


    func Add[T addOnly](v1 T, v2 T) T {
        return v1 + v2
    }


حالا کامپایلر می‌تواند تایید کند که مجموعه‌ای از انواع با عملیات‌هایی که تابع برای انجام عملیات‌هایی روی مقادیر این انواع نیاز دارد، سازگار است. وقتی رابط از انواع تعریف شده در خود زبان (built-in) استفاده می‌کند، رابط‌ها قابل استفاده میان بسته‌ها هستند. اما وقتی لیست انواع نمایانگر انواع تعریف شده توسط کاربر از بسته است، باید به یاد داشته باشید که این توابع ژنریک به انواع بسته بندی متصل شده‌اند و چیز دیگری نیستند.

رابط‌های اعلان شده با مجموعه‌ای از انواع نمی‌توانند در یک تابع چندشکلی سنتی استفاده شوند. این هرچند که منطقی نباشد، اما چیزی نیست که به معنای واقعی Go باشد، به این معنی که این تغییر در رابطهای زبانی همسان نیست.

یکی از ایده‌ها این است که برای محدودیت‌های عملیات مشترک شناخته‌شده، شناسه‌های پیش‌تعیین شده داشته باشیم.

    func index[T comparable](list []T, find T) int {
        for i, v := range list {
            if v == find {
                return i
            }
        }
        
        return -1
    }

محدودیت قابل مقایسه توسط زبان اعلان شده است و محدودیتی را اعمال می‌کند که انواع باید قادر باشند که در یک عبارت مقایسه‌ای استفاده شوند. در این مثال، هر دو v و find متغیرهای نوع T هستند و مقایسه می‌شوند. ایده این است که یک بسته در کتابخانه استاندارد می‌تواند مجموعه‌ای مشترک از محدودیت‌ها را ارائه دهد.

هیچ محدودیتی برای اعلان یک رابط با همزمان داشتن یک مجموعه از انواع و مجموعه متد‌های رفتار وجود ندارد.

    type matcher[T any] interface {
        type person, food
        match(v T) bool
    }
        
    func match[T matcher[T]](list []T, find T) int {
        for i, v := range list {
            if v.match(find) {
                return i
            }
        }
        
        return -1
    }

یک رابط ژنریک اعلان شده که در آن T نوع مقداری است که به یک متد با نام match منتقل می‌شود. این رابط همچنین استفاده از خود را فقط به مقادیر از نوع‌های تعریف شده توسط کاربر محدود می‌کند که شامل نوع‌های person و food می‌شود.

وقتی به تابع match نگاه می‌کنید، نیاز واضحی به محدود کردن تابع به انواع person و food وجود ندارد. اگر این چنین باشد، تابع match باید یک تابع چندشکلی سنتی باشد، نه یک تابع ژنریک. اگر دلیل معقولی وجود داشته باشد، تابع ژنریک می‌تواند برای اعمال این نوع محدودیت استفاده شود.

یک نکته جانبی، نمی‌دانم که آیا این قابلیت ضروری است یا منطقی است یا خیر. این چیزی است که جامعه در طول زمان باید بفهمد.

** تمرین 1

یک تابع ژنریک به نام copyfy را پیاده‌سازی کنید که تنها محدود به ایجاد کپی‌ها از آرایه‌های نوع string یا int باشد.

.play generics/type-constraints/exercise1.go 
.play generics/type-constraints/answer1.go
