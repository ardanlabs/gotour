Mocking
از آنجا که کامپایلر می‌تواند تجزیه و تحلیل کد استاتیک را انجام دهد تا بفهمد آیا یک مقدار محکم یک رابط را پیاده‌سازی می‌کند یا خیر، توسعه‌دهنده‌ای که نوع محکم را اعلام می‌کند نیازی به ارائه رابط‌ها هم ندارد.

* Mocking

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][تماشای ویدئو]]
- نیاز به کمک مالی دارید؟ از [[https://www.ardanlabs.com/scholarship/][فرم Scholarship]] ما استفاده کنید.

بهترین راه برای بهره‌برداری از تعبیه‌سازی، از طریق الگوی طراحی ترکیبی است. ایده این است که از اجزای کوچکتر، انواع بزرگ‌تری را تشکیل داده و بر ترکیب رفتار تمرکز کنید.

** بررسی کد

- *Example* *1:* Mocking

.play composition/mocking/example1.go

** Interface Ownership

یکی از ویژگی‌های متفاوت Go نسبت به زبان‌های دیگر، ایده توافق بر تنظیم است. این واقعاً در روش Go برای مطابقت با رابط‌ها نشان داده می‌شود. به دلیل اینکه کامپایلر می‌تواند تجزیه و تحلیل کد استاتیک را انجام دهد تا بفهمد آیا یک مقدار محکم یک رابط را پیاده‌سازی می‌کند یا خیر، توسعه‌دهنده‌ای که نوع محکم را اعلام می‌کند نیازی به ارائه رابط‌ها هم ندارد.

    package pubsub

    type PubSub struct {
        host string
    }

    func New(host string) *PubSub {
        return &PubSub{
            host: host,
        }
    }

    func (ps *PubSub) Publish(key string, v interface{}) error {
        // PRETEND THERE IS A SPECIFIC IMPLEMENTATION.
        return nil
    }

    func (ps *PubSub) Subscribe(key string) error {
        // PRETEND THERE IS A SPECIFIC IMPLEMENTATION.
        return nil
    }

شما به تازگی یک API جدید پیاده‌سازی کرده‌اید که یک پیاده‌سازی محکم برای عملیات انتشار و مشترک‌سازی فراهم می‌کند. هیچ رابطی ارائه نشده است زیرا این API به یک رابط نیاز ندارد. این یک پیاده‌سازی محکم واحد است.

اما اگر توسعه‌دهنده برنامه که می‌خواهد از این API جدید استفاده کند، به دلیل نیاز به تقلید این پیاده‌سازی در زمان آزمون‌ها، نیاز به یک رابط داشته باشد؟ در Go، این توسعه‌دهنده می‌تواند رابط را اعلام کند و کامپایلر مطابقت آن را شناسایی کند.

    package main

    type publisher interface {
        Publish(key string, v interface{}) error
        Subscribe(key string) error
    }

    type mock struct{}

    func (m *mock) Publish(key string, v interface{}) error {
        // ADD MY MOCK FOR THE PUBLISH CALL.
        return nil
    }

    func (m *mock) Subscribe(key string) error {
        // ADD MY MOCK FOR THE SUBSCRIBE CALL.
        return nil
    }

این کد در بسته‌ی اصلی یک رابط را اعلام می‌کند. این رابط نماینده‌ی API است که برنامه از بسته‌ی pubsub استفاده می‌کند. توسعه‌دهنده، یک پیاده‌سازی خود برای pubsub را برای آزمون پیاده‌سازی کرده است. کلید این است که توسعه‌دهنده برنامه به طور مستقیم از هیچ پیاده‌سازی محکمی استفاده نمی‌کند، بلکه از طریق رابط خود، خود را از آن جدا می‌کند.

    func main() {
        pubs := []publisher{
            pubsub.New("localhost"),
            &mock{},
        }

        for _, p := range pubs {
            p.Publish("key", "value")
            p.Subscribe("key")
        }
    }

برای ارائه یک مثال، تابع اصلی یک مجموعه را ساختاردهی می‌کند که با پیاده‌سازی pubsub و پیاده‌سازی موک شروع می‌شود. رابط publisher این کار را ممکن می‌سازد. سپس یک حلقه for range پیاده‌سازی می‌شود تا نشان دهد چگونه کد برنامه از هر نوع پیاده‌سازی محکمی جدا شده است.