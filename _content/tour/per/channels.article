کانال‌ها
کانال‌ها به Goroutine‌ها اجازه می‌دهند تا از طریق استفاده از معنای سیگنالینگ با یکدیگر ارتباط برقرار کنند.

* کانال ها

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][تماشای ویدئو]]
- نیاز به کمک مالی دارید؟ از [[https://www.ardanlabs.com/scholarship/][فرم Scholarship]] ما استفاده کنید.

مهم است که کانال را نه به عنوان یک ساختار داده، بلکه به عنوان یک مکانیزم برای سیگنالینگ در نظر بگیرید. این مطابق با این ایده است که شما از یک کانال ارسال و دریافت می‌کنید، نه خواندن و نوشتن. اگر مشکلی که پیش روی شماست نمی‌تواند با سیگنالینگ حل شود، اگر کلمه سیگنالینگ از دهان شما بیرون نمی‌آید، باید استفاده از کانال‌ها را زیر سوال ببرید.

** بررسی کد

- *مثال* *1:* Wait for result
- *مثال* *2:* Fan out
- *مثال* *3:* Wait for task
- *مثال* *4:* Pooling
- *مثال* *5:* Fan out semaphore
- *مثال* *6:* Bounded work pooling
- *مثال* *7:* Drop
- *مثال* *8:* Cancellation
- *مثال* *9:* Retry timeout
- *مثال* *10:* Channel cancellation

.play channels/example1.go
.play channels/example2.go
.play channels/example3.go
.play channels/example4.go
.play channels/example5.go
.play channels/example6.go
.play channels/example7.go
.play channels/example8.go
.play channels/example9.go
.play channels/example10.go

** مکانیزم های کانال

هزینه داشتن ضمانت در سطح سیگنالینگ تاخیر ناشناخته است. فرستنده نمی داند چقدر باید منتظر بماند تا گیرنده سیگنال را بپذیرد. مجبور شدن به انتظار برای گیرنده، تاخیر مسدودکننده ایجاد می کند. در این مورد، مقادیر ناشناخته تاخیر مسدودکننده. فرستنده باید برای مدت زمان نامعلومی منتظر بماند تا گیرنده برای دریافت سیگنال در دسترس قرار گیرد.

انتظار برای گیرنده به معنای مکانیکی، عملیات دریافت قبل از ارسال اتفاق می افتد. با کانال ها، دریافت نانو ثانیه قبل اتفاق می افتد، اما قبل از آن است. این بدان معنی است که گیرنده سیگنال را می گیرد و سپس دور می شود و به فرستنده اجازه می دهد تا با ضمانت پیش برود.

چه اتفاقی می‌افتد اگر فرآیند نتواند برای مدت زمان نامعلومی منتظر بماند؟ اگر آن نوع تاخیر کار نکند چه می شود؟ سپس ضمانت نمی تواند در سطح سیگنالینگ باشد، باید خارج از آن باشد. مکانیک پشت این کار این است که ارسال اکنون قبل از دریافت اتفاق می افتد. فرستنده می تواند سیگنال را بدون نیاز به در دسترس بودن گیرنده انجام دهد. بنابراین فرستنده می تواند دور شود و منتظر نماند. در نهایت، امیدوارید، گیرنده ظاهر شود و سیگنال را دریافت کند.

این کاهش هزینه تاخیر در ارسال است، اما عدم اطمینان در مورد دریافت سیگنال ها و در نتیجه دانستن اینکه آیا در بالادست گیرنده ها مشکلی وجود دارد یا خیر، ایجاد می کند. این می تواند باعث شود فرآیند کاری را بپذیرد که هرگز شروع یا تمام نشده است. در نهایت، می تواند باعث فشار پس زمینه عظیم و خرابی سیستم ها شود.

دومین چیزی که باید روی آن تمرکز کنید این است که آیا برای ارسال سیگنال نیاز به ارسال داده دارید؟ اگر سیگنال نیاز به انتقال داده داشته باشد، سیگنالینگ 1 به 1 بین Goroutines است. اگر Goroutine جدیدی نیز نیاز به دریافت سیگنال داشته باشد، باید سیگنال دوم ارسال شود.

اگر نیازی به انتقال داده با سیگنال نیست، سیگنال می تواند 1 به 1 یا 1 به چند بین Goroutines باشد. سیگنالینگ بدون داده در درجه اول برای لغو یا خاموشی استفاده می شود. این کار با بستن کانال انجام می شود.

سومین چیزی که باید روی آن تمرکز کنید وضعیت کانال است. یک کانال می تواند در یکی از 3 حالت باشد.

یک کانال می تواند در حالت nil با ساختن کانال به حالت مقدار صفر آن باشد. ارسال و دریافت در برابر کانال ها در این حالت مسدود می شود. این برای موقعیت هایی مناسب است که می خواهید توقف های کوتاه مدت کار را پیاده سازی کنید.

یک کانال می تواند در حالت باز با استفاده از تابع make داخلی باشد. ارسال و دریافت در برابر کانال ها در این حالت تحت شرایط زیر کار می کند:

کانال های بدون بافر:
ضمانت ها در سطح سیگنالینگ با دریافت قبل از ارسال. ارسال و دریافت Goroutines باید در یک مکان و زمان مشابه برای پردازش سیگنال گرد هم آیند.

کانال های بافر شده:
ضمانت ها خارج از سطح سیگنالینگ با ارسال قبل از دریافت. اگر بافر پر نباشد، ارسال ها می توانند کامل شوند در غیر این صورت مسدود می شوند. اگر بافر خالی نباشد، دریافت ها می توانند کامل شوند در غیر این صورت مسدود می شوند.
یک کانال می تواند در حالت بسته با استفاده از تابع close داخلی باشد. برای آزاد کردن حافظه نیازی به بستن کانال ندارید، این برای تغییر وضعیت است. ارسال در کانال بسته باعث وحشت می شود، اما دریافت در کانال بسته بلافاصله بازگشت می کند.

با تمام این اطلاعات، می توانید بر روی الگوهای کانال تمرکز کنید. تمرکز بر روی سیگنالینگ مهم است. ایده این است که آیا بر اساس نگرانی های تاخیر به ضمانت در سطح سیگنالینگ نیاز دارید یا خیر. اگر بر اساس مدیریت لغوها یا عدم آن، به انتقال داده با سیگنال نیاز دارید یا خیر. می خواهید نحو را به این معناشناسی تبدیل کنید.

** راهنماهای طراحی

- اطلاعات بیشتر در [[https://github.com/ardanlabs/gotraining/blob/master/topics/go/#channel-design][design guidelines]] for channels.

** دیاگرام ها

*ضمانت* *تحویل*

ضمانت تحویل بر اساس یک سوال است: «آیا به ضمانتی نیاز دارم که سیگنال ارسال شده توسط یک goroutine خاص دریافت شده باشد؟»

.image /tour/eng/static/img/guarantee_of_delivery.png

*سیگانلینگ* *با* *یا* *بدون* *داده*

زمانی که می‌خواهید با داده سیگنال ارسال کنید، سه گزینه پیکربندی کانال وجود دارد که می‌توانید بسته به نوع ضمانتی که نیاز دارید انتخاب کنید.

.image /tour/eng/static/img/signaling_with_data.png

سیگنالینگ بدون داده هدف اصلی لغو را برآورده می کند. این امکان را برای یک goroutine فراهم می کند تا به goroutine دیگری سیگنال دهد تا کاری را که انجام می دهد لغو کند و ادامه دهد. لغو را می توان با استفاده از کانال های بدون بافر و بافر شده پیاده سازی کرد.

.image /tour/eng/static/img/signaling_without_data.png

*حالت*

رفتار یک کانال به طور مستقیم تحت تأثیر وضعیت فعلی آن است. وضعیت یک کانال می تواند `nil`, `open` یا `closed` باشد.

.image /tour/eng/static/img/state.png

** Extra Reading

- [[https://www.ardanlabs.com/blog/2017/10/the-behavior-of-channels.html][The Behavior Of Channels]] - William Kennedy  
- [[https://golang.org/ref/mem#tmp_7][Channel Communication]]    
- [[https://blog.golang.org/share-memory-by-communicating][Share Memory By Communicating]] - Andrew Gerrand    
- [[https://www.ardanlabs.com/blog/2014/02/the-nature-of-channels-in-go.html][The Nature Of Channels In Go]] - William Kennedy    
- [[http://matt-welsh.blogspot.com/2010/07/retrospective-on-seda.html][A Retrospective on SEDA]] - Matt Welsh    
- [[https://www.youtube.com/watch?v=KBZlN0izeiY][Understanding Channels]] - Kavya Joshi    

** Buffer Bloat - 2011

مراقب استفاده از بافرهای بزرگ با ایده کاهش تاخیر باشید.

- بافرهای بزرگ از اطلاع رسانی به موقع فشار پس زمینه جلوگیری می کنند.
- آنها توانایی شما را برای کاهش به موقع فشار پس زمینه از بین می برند.
- آنها می توانند تاخیر را افزایش دهند و آن را کاهش ندهند.
- از کانال های بافر شده برای حفظ پیوستگی استفاده کنید.
- از آنها فقط برای عملکرد استفاده نکنید.
- از آنها برای رسیدگی به انفجارهای داده به خوبی تعریف شده استفاده کنید.
- از آنها برای مقابله با مسائل سرعت نور بین انتقالات استفاده کنید.

*ویدئوها*

- [[https://www.youtube.com/watch?v=qbIozKVz73g][Bufferbloat: Dark Buffers in the Internet]]  
- [[http://www.bufferbloat.net/projects/cerowrt/wiki/Bloat-videos][Buffer Bloat Videos]]  

* تمرینات

از الگو به عنوان نقطه شروع برای تکمیل تمرین ها استفاده کنید. یک راه حل ممکن ارائه شده است.

** تمرین 1

یک برنامه بنویسید که در آن دو goroutine ده بار یک عدد صحیح را به جلو و عقب منتقل می کنند. نمایش زمانی که هر goroutine عدد صحیح را دریافت می کند. عدد صحیح را با هر پاس افزایش دهید. هنگامی که عدد صحیح برابر با ده شد، برنامه را به طور کامل خاتمه دهید.

.play channels/exercise1.go 
.play channels/answer1.go

** تمرین 2

یک برنامه بنویسید که از الگوی fan out برای تولید 100 عدد تصادفی به طور همزمان استفاده می کند.
هر goroutine را طوری تنظیم کنید که یک عدد تصادفی تولید کند و آن عدد را از طریق یک کانال بافر شده به goroutine اصلی برگرداند. اندازه کانال بافر را طوری تنظیم کنید که هیچ ارسال هرگز مسدود نشود. بیش از آنچه نیاز دارید بافر اختصاص ندهید. goroutine اصلی را طوری تنظیم کنید که هر عدد تصادفی را که دریافت می کند نمایش دهد و سپس برنامه را خاتمه دهد.

.play channels/exercise2.go 
.play channels/answer2.go

** تمرین 3

یک برنامه بنویسید که تا 100 عدد تصادفی را به طور همزمان تولید می کند. همه 100 مقدار را ارسال نکنید تا تعداد ارسال/دریافت ها نامشخص باشد.

.play channels/exercise3.go 
.play channels/answer3.go
 
** تمرین 4

یک برنامه بنویسید که تا 100 عدد تصادفی را به طور همزمان با استفاده از یک worker pool تولید می کند. مقادیر زوج را رد کنید. به کارگران دستور دهید که با جمع آوری 100 عدد فرد خاموش شوند.

.play channels/exercise4.go 
.play channels/answer4.go
