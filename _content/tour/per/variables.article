متغیرها
متغیرها قلب زبان های برنامه نویسی هستن که کار خواندن و نوشتن مقادیر در حافظه را انجام می دهند.

* متغیرها

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][تماشای ویدئو]]
- نیاز به کمک مالی دارید؟ از [[https://www.ardanlabs.com/scholarship/][فرم Scholarship]] ما استفاده کنید.

متغیر ها قلب زبان های برنامه نویسی هستن که کار خواندن و نوشتن مقادیر در حافظه را انجام می دهند. در زبان گو دسترسی به حافظه یک تایپ امن است.
منظورمان این است که کامپایل خیلی جدی اجازه نمی دهد متغیر را خارج از scope تعریف کنید.

** بررسی کد

- *مثال* *1*: یک برنامه ساده که متغیر را تعریف کرده است.

.play variables/example1.go

** تایپ های داخلی (Built-in)
تایپ ها خوانایی و یکپارچگی را فراهم میکند:

- مقدار حافظه برای تخصیص چقدر است? (e.g. 1, 2, 4, 8 bytes)
- حافطه چه چیزی را نشان می دهد? (e.g. int, uint, bool,..)

تایپ ها می توانند in64 یا int32 باشند:

- uint8 یک نوع عدد unsigned با تخصیص ۱ بایت از حافظه می باشد
- int32 یک نوع عدد signed با مصرف ۴ بایت از حافظه می باشد. زمانیکه شما تایپ (uint, int) تعریف میکنید بسته به معماری سیستم عامل حافظه تخصیص می یابد:

- معماری 32 بیتی: یک int از نوع signed که ۴ بایت حافظه به آن تخصیص می یابد.
- معماری 64 بیتی: یک int از نوع signed که ۸ بایت از حافظه به آن تخصیص  می یابد.

** اندازه کلمه

کلمه اندازه نشان دهنده مقدار تخصیص حافظه مورد نیاز برای ذخیره اعداد صحیح است
و اشاره گر برای یک معماری معین. مثلا:

- معماری 32 بیتی: اندازه کلمه 4 بایت تخصیص حافظه است
- معماری 64 بیتی: اندازه کلمه 8 بایت تخصیص حافظه است

این مهم است زیرا Go دارای ساختارهای داده داخلی (maps, channels, slices, interfaces, functions) دارد که اعداد صحیح و اشاره‌گرها را ذخیره می‌کنند.
 اندازه این ساختارهای داده بر اساس معماری استفاده شده برای ساخت برنامه تعیین می‌شود.

در Go، مقدار حافظه اختصاص داده شده برای یک مقدار از نوع int، یک اشاره‌گر یا یک کلمه همیشه بر روی همان معماری یکسان خواهد بود.

** مفهوم مقدار صفرم
هر مقداری که در Go ایجاد می‌کنید حداقل به حالت مقدار صفر خود مقداردهی اولیه می‌شود مگر اینکه مقدار مقداردهی اولیه را در زمان ایجاد مشخص کنید. مقدار صفر به معنای تنظیم هر بیت در هر بایت به صفر است.

این کار برای اطمینان از اصالت داده انجام می‌شود و به صورت رایگان نیست. زمانی طول می‌کشد تا الکترون‌ها از طریق دستگاه حرکت کنند تا بیت‌ها را مجدداً تنظیم کنند، اما همیشه باید اصالت را از عملکرد بالاتر در نظر بگیرید.

    مقدار صفرم                تایپ
    Boolean            false
    Integer            0
    Float              0
    Complex            0i
    String             "" (خالی)
    Pointer            nil

** تعریف و راه اندازی
کلمه کلیدی var می‌تواند برای ایجاد مقادیر به حالت مقدار صفر برای تمام انواع مورد استفاده قرار گیرد.

    var a int
    var b string
    var c float64
    var d bool

    fmt.Printf("var a int \t %T [%v]\n", a, a)
    fmt.Printf("var b string \t %T [%v]\n", b, b)
    fmt.Printf("var c float64 \t %T [%v]\n", c, c)
    fmt.Printf("var d bool \t %T [%v]\n\n", d, d)

خروجی:

    var a int    	int [0]
    var b string 	string []
    var c float64	float64 [0]
    var d bool   	bool [false]

رشته‌ها از مجموعه‌ای از بایت‌ها استفاده می‌کنند که مجموعه کاراکترهای UTF8 را نمایان می‌کنند.

یک رشته (string) در Go یک ساختار داده داخلی دو کلمه‌ای است که شامل موارد زیر است:

- کلمه اول یک اشاره به آرایه پشتیبان از بایت‌هاست.
- کلمه دوم طول یا تعداد بایت‌ها در آرایه پشتیبان را نمایان می‌کند.
- اگر رشته به حالت مقدار صفر خود تنظیم شود، آنگاه کلمه اول نال (nil) و کلمه دوم صفر (0) خواهد بود.

با استفاده از اپراتور تعریف متغیر کوتاه، شما می‌توانید به صورت همزمان یک مقدار تعریف کنید، بسازید و مقداردهی اولیه کنید.

    aa := 10       // int [10]
    bb := "hello"  // string [hello]
    cc := 3.14159  // float64 [3.14159]
    dd := true     // bool [true]

    fmt.Printf("aa := 10 \t %T [%v]\n", aa, aa)
    fmt.Printf("bb := \"hello\" \t %T [%v]\n", bb, bb)
    fmt.Printf("cc := 3.14159 \t %T [%v]\n", cc, cc)
    fmt.Printf("dd := true \t %T [%v]\n\n", dd, dd)

خروجی:

    aa := 10         int [10]
    bb := "hello"    string [hello]
    cc := 3.14159    float64 [3.14159]
    dd := true       bool [true]

** Conversion در مقابل Casting

زبان گو چیزی به نام casting ندارد. به جای اینکه کامپایلر را به نقشه‌بردن یک مجموعه بایت به نمایشگر دیگری دعوت کنید، بایت‌ها باید به یک مکان حافظه جدید برای نمایشگر جدید کپی شوند.

    aaa := int32(10)
    fmt.Printf("aaa := int32(10) %T [%v]\n", aaa, aaa)

    خروجی:
    aaa := int32(10) int32 [10]

Go واقعاً یک بسته در کتابخانه استاندارد به نام unsafe دارد اگر نیاز به انجام یک عملیات تبدیل واقعی دارید. واقعاً باید از استفاده از آن اجتناب کنید و به خودتان صادق باشید که چرا در نظر دارید از آن استفاده کنید. انجام یک تبدیل برای این نوع عملیات‌ها بالاترین سطح اصالت را فراهم می‌کند.

** نکات

- هدف تمامی برنامه‌ها و تمامی بخش‌های آن برنامه‌ها، تبدیل داده از یک فرم به فرم دیگر است.
- کد اصولاً حافظه را تخصیص می‌دهد، از حافظه می‌خواند و به حافظه می‌نویسد.
- درک نوع (تایپ) برای نوشتن کد خوب و درک کد بسیار حیاتی است.
- اگر داده را نفهمیدید، مسئله را نمی‌فهمیدید.
- با درک داده، مسئله را بهتر می‌فهمید.
- زمانی که متغیرها به حالت مقدار صفر خود تعریف می‌شوند، از کلمه کلیدی var استفاده کنید.
- زمانی که متغیرها تعریف و مقداردهی اولیه می‌شوند، از اپراتور تعریف متغیر کوتاه استفاده کنید.

** خواندن موارد بیشتر

- [[https://golang.org/ref/spec#Boolean_types][Built-In Types]]    
- [[https://golang.org/doc/effective_go.html#variables][Variables]]    
- [[https://www.ardanlabs.com/blog/2013/08/gustavos-ieee-754-brain-teaser.html][Gustavo's IEEE-754 Brain Teaser]] - William Kennedy    
- [[https://www.youtube.com/watch?v=sFUSP8Au_PE][What's in a name]]    
- [[http://arcanesentiment.blogspot.com/2015/01/a-brief-history-of-type.html][A brief history of “type”]] - Arcane Sentiment    

* تمرینات

از قالب به عنوان نقطه شروع برای انجام تمرینات استفاده کنید. یک راه‌حل ممکن ارائه شده است.

** تمرین 1

*بخش* *A:* سه متغیر را اعلام کنید که به مقدار صفر خود مقداردهی شوند و
سه متغیر دیگر را با مقدار ابتدایی اعلام کنید. متغیرهایی از نوع string، int و bool اعلام کنید.
مقادیر این متغیرها را نمایش دهید.

*بخش* *B:* یک متغیر جدید از نوع float32 اعلام کنید و متغیر را با تبدیل مقدار ابتدایی عدد Pi (3.14) مقداردهی اولیه کنید.

.play variables/exercise1.go
.play variables/answer1.go
