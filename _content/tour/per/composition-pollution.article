Interface Pollution
آلودگی رابط از واقعیت ناشی می‌شود که افراد نرم‌افزار را با طراحی رابط‌ها تعریف می‌کنند به جای آنکه آن‌ها را کشف کنند.

* Interface Pollution

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Watch The Video]]
- Need Financial Assistance, Use Our [[https://www.ardanlabs.com/scholarship/][Scholarship Form]]

آلودگی رابط از واقعیت ناشی می‌شود که افراد نرم‌افزار را با طراحی رابط‌ها تعریف می‌کنند به جای آنکه آن‌ها را کشف کنند.

** بررسی کد

- *مثال* *1:* ایجاد Interface Pollution
- *مثال* *2:* حذف Interface Pollution

.play composition/pollution/example1.go
.play composition/pollution/example2.go

** Interface Pollution

آلودگی رابط از واقعیت ناشی می‌شود که افراد نرم‌افزار را با طراحی رابط‌ها تعریف می‌کنند به جای آنکه آن‌ها را کشف کنند. ابتدا باید یک راه حل محکم برای مشکل طراحی کنید. سپس، اگر لازم باشد، می‌توانید کشف کنید که برنامه در کجا نیاز به چندریختی است.

این‌ها چیزهایی است که از دیگر توسعه‌دهندگان شنیده‌ام:

"من از رابط‌ها استفاده می‌کنم چون مجبور هستیم از رابط‌ها استفاده کنیم."

نه، ما مجبور نیستیم از رابط‌ها استفاده کنیم. ما زمانی از رابط‌ها استفاده می‌کنیم که عملی و معقول باشد. استفاده از رابط‌ها هزینه‌هایی دارد: سطح میانی و اختصاصی که هنگام ذخیره مقادیر محکم در داخل آن‌ها ایجاد می‌شود. مگر اینکه هزینهٔ اختصاص ارزشی داشته باشد که با جدا کردن از هم به دست می‌آورم، نباید از رابط‌ها استفاده کنید.

"من نیاز دارم که بتوانم کد خود را تست کنم، بنابراین باید از رابط‌ها استفاده کنم".

نه. ابتدا باید API خود را برای کاربر طراحی کنید، نه برای تست. اگر API قابل تست نباشد، باید سوال بپرسید که آیا قابل استفاده است یا خیر. همچنین، لایه‌های مختلفی از API‌ها وجود دارند. API‌های پایین‌تر سطح که به صورت ناصرفاً برای بیان تست‌پذیری تمرکز می‌کنند می‌توانند و باید تمرکز کنند. اما API‌های بالاتر سطح که به صورت عمومی قابل دسترس هستند، باید بر روی قابلیت استفاده تمرکز کنند.

توابعی که داده‌های خام را دریافت کرده و داده‌های خام را برمی‌گردانند، قابل تست بودن بیشتری دارند. از تحویل داده جدا کنید و تبدیل داده را از محلی که داده از آن جا می‌آید و به آن جا می‌رود جدا کنید. این یک تمرین بازآرایی است که باید در طول چرخهٔ توسعهٔ کد انجام دهید.

در زیر، یک مثال ارائه شده است که با استفاده نادرست از یک رابط، آلودگی رابط ایجاد می‌کند که در واقع نیازمندی به آن وجود ندارد.

    type Server interface {
        Start() error
        Stop() error
        Wait() error
    }

رابط `Server` یک قرارداد برای سرورهای TCP تعریف می‌کند. مشکل در اینجا این است که من نیازی به یک قرارداد ندارم، شما نیاز به یک پیاده‌سازی دارید. همچنین، احتمالاً تنها یک پیاده‌سازی وجود خواهد داشت، به خصوص از آنجا که شما خودتان آن را پیاده‌سازی می‌کنید. شما نیازی ندارید که شخص دیگری این را برای شما پیاده‌سازی کند.

علاوه بر این، این رابط بر اساس اسم و نه فعل است. انواع محکم اسم هستند زیرا مشکل واقعی را نمایندگی می‌کنند. رابط‌ها رفتار را توصیف می‌کنند و "سرور" رفتار نیست.

در زیر چند راه برای شناسایی آلودگی رابط آمده است:

- یک بسته یک رابط را تعریف می‌کند که با کل API از نوع محکم خود تطبیق دارد.
- رابط‌ها صادر می‌شوند، اما انواع محکمی که رابط را پیاده‌سازی می‌کنند، صادر نمی‌شوند.
- تابع کارخانه برای نوع محکم، مقدار رابط را با مقدار نوع محکم غیرصادرشده داخل آن برمی‌گرداند.
- رابط قابل حذف است و هیچ تغییری برای کاربر API ایجاد نمی‌کند.
- رابط قادر به جدا کردن API از تغییر نیست.

راهنمایی‌های مرتبط با آلودگی رابط:

استفاده از یک رابط:

- زمانی که کاربران API نیاز به ارائه جزئیات پیاده‌سازی دارند.
- زمانی که API‌ها دارای چندین پیاده‌سازی هستند که نیاز به نگهداری دارند.
- زمانی که بخش‌هایی از API که ممکن است تغییر کنند، شناسایی شده‌اند و نیاز به جداسازی دارند.

سوال برای یک رابط:

- زمانی که هدف اصلی آن فقط تولید API قابل تست است (ابتدا API قابل استفاده را بنویسید).
- زمانی که پشتیبانی از API برای جدا شدن از تغییر را فراهم نمی‌کند.
- زمانی که واضح نیست که چگونه رابط کد را بهبود می‌بخشد.