توابع
توابع در مرکز زبان قرار دارند و این امکان را فراهم می‌کنند که کد خود را به قسمت‌های مجزا و متمایز از عملکرد تقسیم و سازماندهی کنیم.

* توابع

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][تماشای ویدئو]]
- نیاز به کمک مالی دارید؟ از [[https://www.ardanlabs.com/scholarship/][فرم Scholarship]] ما استفاده کنید.

توابع در مرکز زبان قرار دارند و این امکان را فراهم می‌کنند که کد خود را به قسمت‌های مجزا و متمایز از عملکرد تقسیم و سازماندهی کنیم. آنها می‌توانند برای ارائه یک رابط به پکیج‌هایی که می‌نویسیم و یک جزء اصلی از همزمانی باشند، استفاده شوند.

توابع در Go نقش مرکزی در ساختار دهی کد و ترویج نرم‌افزاری تمیز، قابل نگهداری و کارآمد ایفا می‌کنند. درک این که چگونه توابع را اعلام، تعریف و استفاده کنیم برای نوشتن برنامه‌های موثر Go بسیار حیاتی است.

** مرور کد

- *مثال* *1:* برگرداندن مقادیر چندگانه
- *مثال* *2:* شناسایی خالی
- *مثال* *3:* تعریف مجدد
- *مثال* *4:* Anonymous Functions/Closures
- *مثال* *5:* بازیابی خطاها

.play functions/example1.go
.play functions/example2.go
.play functions/example3.go
.play functions/example4.go
.play functions/example5.go

توابع بلوک‌های اساسی برنامه‌ها هستند و برای مدولاریت و قابلیت استفاده مجدد بهتر، کد را کپسوله و سازماندهی می‌کنند. توابع بلوک‌های کد هستند که یک کار خاص یا مجموعه‌ای از کارهای مرتبط را انجام می‌دهند. در ادامه یک بررسی کلی از توابع در Go داریم:

** تعریف تابع

برای تعریف یک تابع در Go، از کلمه کلیدی `func` استفاده می‌شود که بعد از آن نام تابع، یک لیست از پارامترها که در پرانتز قرار دارند، و یک نوع بازگشتی اختیاری دنبال می‌شود. ساختار عمومی به این صورت است:

   func functionName(parameter1 type, parameter2 type, ...) return_type {
       // Function body
   }

For example:

   func add(x int, y int) int {
       return x + y
   }

** پارامترها و مقادیر بازگشتی

توابع می‌توانند صفر یا بیشتر پارامتر را بپذیرند که این مقادیر هنگام فراخوانی تابع به آن منتقل می‌شوند. هر پارامتر شامل یک نام و یک نوع است. در مثال بالا، `add` دو پارامتر صحیح به نام‌های `x` و `y` دریافت می‌کند.

توابع می‌توانند صفر یا یک مقدار (یا هیچ مقدار، در صورتی که می‌توانید نوع بازگشتی را حذف کنید) بازگشت دهند. دستور `return` برای مشخص کردن مقداری که باید بازگشت داده شود، استفاده می‌شود. در مثال بالا، `add` یک عدد صحیح بازمی‌گرداند.

Go اجازه می‌دهد که توابع مقادیر چندگانه بازگشت دهند. این در مواردی مفید است که می‌خواهید بیش از یک نتیجه از یک تابع بازگردانید. به عنوان مثال:

   func divide(x, y float64) (float64, error) {
       if y == 0 {
           return 0, errors.New("division by zero")
       }
       return x / y, nil
   }

در این مثال، تابع `divide` همچنین یک نتیجه اعشاری و یک خطا (در صورت وقوع تقسیم بر صفر) باز می‌گرداند.

Go به شما امکان می‌دهد که نام‌ها را برای مقادیر بازگشتی در امضای یک تابع مشخص کنید. مقادیر بازگشتی با نام به طور خودکار مقداردهی اولیه می‌شوند و می‌توانند در داخل تابع به عنوان متغیرهای عادی استفاده شوند. این مخصوصاً در مواجهه با توابع پیچیده یا کنترل خطا بسیار مفید است. به عنوان مثال:

   func divide(x, y float64) (result float64, err error) {
       if y == 0 {
           err = errors.New("division by zero")
           return
       }
       result = x / y
       return
   }

** فراخوانی توابع

برای فراخوانی یک تابع در Go، شما از نام تابع پس از آن یک لیست از آرگومان‌ها که در پرانتز قرار دارند استفاده می‌کنید. اگر تابع دارای مقادیر بازگشتی چندگانه باشد، می‌توانید آنها را در متغیرها ذخیره کنید. به عنوان مثال:

   sum := add(3, 5)            // Call the add function and assign its result to sum
   result, err := divide(8, 2) // Call the divide function and capture both result and error

** پارامترهای متغیر توابع

Go از توابع متغیر پشتیبانی می‌کند که به شما امکان می‌دهد تا تعداد متغیری از آرگومان‌ها را به یک تابع ارسال کنید. برای تعریف یک پارامتر متغیر، از سه نقطه (`...`) پس از نوع پارامتر استفاده می‌کنید. به عنوان مثال:

   func calculateSum(nums ...int) int {
       sum := 0
       for _, num := range nums {
           sum += num
       }
       return sum
   }

شما می‌توانید این تابع را با هر تعداد اعداد صحیح فراخوانی کنید.

** توابع ناشناس

Go از توابع ناشناس نیز به عنوان closures پشتیبانی می‌کند. این توابع بدون نام هستند و می‌توانند به متغیرها اختصاص داده و به عنوان آرگومان‌ها به توابع دیگر ارسال شوند. Closures معمولاً در Go برای وظایفی مانند تعریف توابع درونی یا برنامه‌نویسی همروند با استفاده از goroutine‌ها به کار می‌روند.

   add := func(x, y int) int {
       return x + y
   }

   result := add(3, 5)

** تابع به عنوان یک نوع

در Go، توابع همچنین می‌توانند به عنوان انواع مورد استفاده قرار گیرند. این به شما امکان می‌دهد تا توابعی را تعریف کنید که توابع دیگر را به عنوان آرگومان‌ها بپذیرند یا آنها را به عنوان نتایج بازگردانند. این یک ویژگی قدرتمند برای پیاده‌سازی توابع بالارده و تابع‌های فرعی (callbacks) است.

   type MathFunc func(int, int) int

   func operate(x, y int, op MathFunc) int {
       return op(x, y)
   }

** تأخیر و پانیک

Go دو تابع ویژه به نام‌های `defer` و `panic` را برای مدیریت شرایط استثنایی و مدیریت منابع ارائه می‌دهد. `defer` برای زمانبندی تماس تابع به منظور اجرا شدن قبل از بازگشت تابع استفاده می‌شود، در حالی که `panic` برای ایجاد یک خطای اجرایی و عملیات رفتار از پشته استفاده می‌شود.

** یادداشت‌ها

- توابع می‌توانند مقادیر متعددی را بازگردانند و بیشتر از یک مقدار خطا بازگردانند.
- مقدار خطا همیشه باید به عنوان بخشی از منطق برنامه‌نویسی بررسی شود.
- شناسه خالی برای نادیده گرفتن مقادیر بازگشتی مورد استفاده قرار می‌گیرد.
- دستوراتی که برای تعریف توابع استفاده می‌شوند: `func`، `receiver`، `identifier`، `[parameter(s)]`، `[return(s)]`، `بلوک کد`.
- پارامترهای متغیر، آرگومان‌های متغیر و بازگردانی یک آرایه.
- توابع نوعی از داده هستند: می‌توانید توابع را به عنوان پارامترها، آرگومان‌ها و بازگشتی‌ها استفاده کنید.
- `defer` برای زمانبندی تماس تابع در تابع دیگری استفاده می‌شود.
- `panic` خطای اجرایی را ایجاد کرده و پشته را بازگشت می‌دهد.
- بازگشت‌های نامگذاری‌شده کمتر قابل خواندن هستند و بازگشت‌های معمولی نمی‌باشند.

** مطالب اضافی

- [[https://golang.org/doc/effective_go.html#functions][Effective Go]] 
- [[https://www.ardanlabs.com/blog/2013/10/functions-and-naked-returns-in-go.html][Functions and Naked returns in Go]]  
- [[https://www.ardanlabs.com/blog/2013/06/understanding-defer-panic-and-recover.html][Understanding defer panics and recover]]

** تمرین ۱

*قسمت* *الف:* یک نوع ساختار برای نگه‌داری اطلاعات یک کاربر اعلام کنید. یک تابع اعلام کنید که مقداری از این نوع ایجاد می‌کند و اشاره‌گرهای آن را به عنوان مقدار بازگردانی می‌دهد و مقدار خطا را. این تابع را از تابع `main` فراخوانی کرده و مقدار را نمایش دهید.

*قسمت* *ب:* یک تماس دوم به تابع خود بزنید، اما این بار مقدار را نادیده بگیرید و فقط مقدار خطا را بررسی کنید.

.play functions/exercise1.go		
.play functions/answer1.go
