محدودیت‌های برش
ممکن است زمانهایی وجود داشته باشد که نیاز به محدود کردن نوع ژنریک به برش (slice) باشد.

* ویدیو

مشاهده می‌کنید که من در مورد ژنریک‌ها چه چیزی ارائه داده‌ام که شما را از طریق تمام مثال‌های این بخش از تور راه می‌دهد.

.html generics-video.html

** بررسی کد

- *مثال* *1*: تابع عمل

.play generics/slice-constraints/example1.go

** توضیح داده شده

در اینجا نوع اعداد تعریف شده توسط کاربر، نوع زیرینی دارد که یک برش از اعداد صحیح است.

    type Numbers []int

کامپایلر به شما اجازه می‌دهد که متغیرهای مبتنی بر یک برش از اعداد صحیح را به متغیرهایی با نوع Numbers تبدیل کنید. این معمولاً خوب است و آنچه که شما می‌خواهید است. به دلیل این قابلیت، می‌توانید یک تابع ژنریک بنویسید که بتواند روی یک برش عمل کند و نوع زیرین را رعایت کند.

    type operateFunc[T any] func(t T) T

    func operate[T any](slice []T, fn operateFunc[T]) []T {
        ret := make([]T, len(slice))
            for i, v := range slice {
            ret[i] = fn(v)
        }
        
        return ret
    }

در اینجا تابع operate یک نوع ژنریک T اعلام می‌کند که می‌تواند هر چیزی باشد. از این نوع برای اعلام یک پارامتر به نام slice استفاده می‌شود که یک برش از همان نوع T را می‌پذیرد. همچنین تابع یک تابع ژنریک از همان نوع T را نیز می‌پذیرد و همچنین یک برش از T را برمی‌گرداند.

    type Numbers []int
    
    func Double(n Numbers) Numbers {
        fn := func(n int) int {
            return 2 * n
        }
    
        numbers := operate(n, fn)
        fmt.Printf("%T", numbers)
        return numbers
    }

خروجی:

    []int

تابع دابل (Double) یک مقدار از نوع اعداد (Numbers) را قبول کرده و آن مقدار را به تابع عمل (operate) منتقل می‌کند. در این مورد، کامپایلر از نوع زیرین (underlying type) در نوع T بهره می‌برد و مقدار اعداد (Numbers) می‌تواند به تابع منتقل شود. با این حال، چیزی که برگشت داده می‌شود، یک برش از نوع عدد صحیح (int) است که در خروجی دیده می‌شود.

اگر نیاز دارید که اطمینان حاصل شود تنها مقدار اعداد (Numbers) قابل ارسال است و توسط تابع عمل (operate) برگشت داده می‌شود، می‌توانید تغییرات زیر را انجام دهید.

```go
type Slice[T any] interface {
    ~ []T
}
```

این رابط یک محدودیت اعلام می‌کند تا نوع ژنریک را به یک برش واقعی از نوع T محدود کند. استفاده از عنصر تقریبی (~) محدود به تمام انواعی است که نوع زیرین آنها T است. با این رابط، می‌توانید تابع عمل (operate) را تغییر دهید.

    type operateFunc[T any] func(t T) T
    type Slice[T any] interface {
        ~ []T
    }

    // func operate[T any](slice []T, fn operateFunc[T]) []T {
    //     ret := make([]T, len(slice))
    //     for i, v := range slice {
    //         ret[i] = fn(v)
    //     }
    //     return ret
    // }

    func operate[S Slice[T], T any](slice S, fn operateFunc[T]) S {
        ret := make(S, len(slice))
        for i, v := range slice {
            ret[i] = fn(v)
        }
        
        return ret
    }

حالا تابع عمل (operate) را تغییر دهید تا دو نوع ژنریک اعلام کند. نوع S که یک مقدار برش از نوع T را نمایان می‌کند، و T که یک نوع است که می‌تواند هر چیزی باشد. تابع یک مقدار از نوع S برمی‌گرداند.

    type Numbers []int
    
    func Double(n Numbers) Numbers {
        fn := func(n int) int {
            return 2 * n
        }
    
        numbers := operate(n, fn)
        fmt.Printf("%T", numbers)
        
        return numbers
    }

خروجی:

    main.Numbers

در این مورد، وقتی که مقدار اعداد (Numbers) را به تابع عمل (operate) منتقل می‌کنید، برشی که برگشت داده می‌شود از نوع اعداد (Numbers) است. نوع زیرین نادیده گرفته می‌شود و نوع تعریف شده توسط کاربر احترام گذاشته می‌شود.