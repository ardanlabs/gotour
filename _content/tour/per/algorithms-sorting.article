عملیات مرتب‌سازی
این بخش نمونه‌هایی ارائه می‌دهد که عملیات مرتب‌سازی را انجام می‌دهند.

* مرتب‌سازی حبابی

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][تماشای ویدئو]]
- نیاز به کمک مالی دارید؟ از [[https://www.ardanlabs.com/scholarship/][فرم Scholarship]] ما استفاده کنید.

این برنامه نمونه یک تابع را پیاده‌سازی می‌کند که مرتب‌سازی حبابی علیه مجموعه‌ای از اعداد صحیح را انجام می‌دهد.

- اطلاعات ببیشتر در [[https://en.wikipedia.org/wiki/Bubble_sort][https://en.wikipedia.org/wiki/Bubble_sort]]

*دیاگرام*

    مرتب‌سازی حبابی یک الگوریتم ساده مرتب‌سازی است
    که به صورت مکرر از ابتدا تا انتهای لیست ورودی، عنصر به عنصر، عنصر فعلی
    را با عنصر بعدی مقایسه می‌کند و اگر لازم باشد مقادیر آنها را جابجا می‌کند.

    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── آرایه شروعی
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 10 ││ 05 ││ 25 ││ 15 ││ 30 │ ◁── بعد از اولین تکرار
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 05 ││ 10 ││ 15 ││ 25 ││ 30 │ ◁── بعد از دومین تکرار / مرتب شده
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/bubble.go

* مرتب‌سازی درجی

این برنامه نمونه یک تابع را پیاده‌سازی می‌کند که مرتب‌سازی درجی را بر روی یک مجموعه از اعداد صحیح انجام می‌دهد.

- اطلاعات ببیشتر در [[https://en.wikipedia.org/wiki/Insertion_sort][https://en.wikipedia.org/wiki/Insertion_sort]]

*دیاگرام*

    مرتب‌سازی درجی تعداد تکرارهایی مشابه طول آرایه منهای یک دارد. برای یک 
    آرایه با 5 عدد، مرتب‌سازی 4 بار انجام می‌شود. از اندیس 1 شروع کرده، مرتب‌سازی
    آن عدد را به سمت چپ می‌اندازد و آن را در یک موقعیت مرتب‌سازی شده قرار می‌دهد.

    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── آرایه شروعی
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── جابجایی [1]=30 به چپ
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── بعد از اولین تکرار
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── جابجایی [2]=05 به چپ
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── بعد از دومین تکرار
    │ 05 ││ 10 ││ 30 ││ 25 ││ 15 │ ◁── جابجایی [3]=25 به چپ
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── بعد از سومین تکرار
    │ 05 ││ 10 ││ 25 ││ 30 ││ 15 │ ◁── جابجایی [4]=15 به چپ
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── بعد از چهارمین تکرار
    │ 05 ││ 10 ││ 15 ││ 25 ││ 30 │ ◁── مرتب شده
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/insertion.go

* Heap مرتب‌سازی

این برنامه نمونه یک تابع را پیاده‌سازی می‌کند که مرتب‌سازی Heap را بر روی یک مجموعه از اعداد صحیح انجام می‌دهد.

- اطلاعات ببیشتر در  [[https://en.wikipedia.org/wiki/Heapsort][https://en.wikipedia.org/wiki/Heapsort]]

*دیاگرام*

مرتب‌سازی Heap ورودی خود را به دو آرایه مرتب‌شده و مرتب‌نشده تقسیم می‌کند. الگوریتم به طور تکراری منطقه مرتب‌نشده را با استخراج بزرگترین عنصر از آن کوچک می‌کند و آن را به آرایه مرتب‌شده اضافه می‌کند. این الگوریتم از دو فاز تشکیل شده است.

    فاز اول 
    لیست را به دو نیمه تقسیم کرده و با کار کردن در نیمه‌ی اول لیست،
    بزرگترین مقدار را در ابتدای لیست جابجا می‌کنیم و سپس دومین بزرگترین مقدار را.

    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── آرایه شروعی
    │ 63 ││ 16 │ | │ 40 ││ 71 ││ 73 │ ◁── بررسی [1]=16 < [4]=73 : جابجایی
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── بعد از اولین تکرار
    │ 63 ││ 73 │ | │ 40 ││ 71 ││ 16 │ ◁── بررسی [0]=63 < [3]=71 : جابجایی
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── بعد از دومین تکرار
    │ 73 ││ 71 │ | │ 40 ││ 63 ││ 16 │ ◁── فاز اول تکمیل شد
    └────┘└────┘ | └────┘└────┘└────┘

    فاز دوم
    لیست را بگیرید و شروع به جابجایی اعداد
    به بیرون و به یک لیست مرتب جدید کنید. عدد در موقعیت اول را بگیرید و از لیست 
    صلی حذف کنید و آن را به لیست جدیدی که حاوی مرتب‌سازی نهایی خواهد بود، انتقال
    دهید. سپس دوباره بزرگترین عددی که پیدا می‌کنیم را در ابتدای لیست جابجا کنید.

    ┌────┐┌────┐┌────┐┌────┐┌────┐ |  ◁── آرایه شروعی
    │ 73 ││ 71 ││ 40 ││ 63 ││ 16 │ |
    └────┘└────┘└────┘└────┘└────┘ |
    ┌────┐┌────┐┌────┐┌────┐ | ┌────┐ ◁── بعد از اولین تکرار
    │ 71 ││ 63 ││ 40 ││ 16 │ | │ 73 │ ◁── 73 را به بیرون منتقل کرده و 71 را در جلو جایگذاری کنید
    └────┘└────┘└────┘└────┘ | └────┘
    ┌────┐┌────┐┌────┐ | ┌────┐┌────┐ ◁── بعد از دومین تکرار
    │ 63 ││ 16 ││ 40 │ | │ 71 ││ 73 │ ◁── 71 را به بیرون منتقل کرده و 63 را در جلو جایگذاری کنید
    └────┘└────┘└────┘ | └────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── بعد از سومین تکرار
    │ 40 ││ 16 │ | │ 63 ││ 71 ││ 73 │ ◁── 63 را به بیرون منتقل کرده و 40 را در جلو جایگذاری کنید
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐ | ┌────┐┌────┐┌────┐┌────┐ ◁── بعد از چهارمین تکرار
    │ 16 │ | │ 40 ││ 63 ││ 71 ││ 73 │ ◁── 40 را به بیرون منتقل کرده و 16 را در جلو جایگذاری کنید
    └────┘ | └────┘└────┘└────┘└────┘
     | ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── بعد از پنجمین تکرار
     | │ 16 ││ 40 ││ 63 ││ 71 ││ 73 │ ◁── 16 را به بیرون منتقل کرده / مرتب شده
     | └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/heap.go

* مرتب‌سازی سریع

این برنامه نمونه یک تابع را پیاده‌سازی می‌کند که مرتب‌سازی سریع را بر روی یک مجموعه از اعداد صحیح انجام می‌دهد.

- اطلاعات ببیشتر در  [[https://en.wikipedia.org/wiki/Quicksort][https://en.wikipedia.org/wiki/Quicksort]]

*دیاگرام*

    مرتب‌سازی سریع یک الگوریتم تقسیم و
    حکمرانی است. این با انتخاب یک عنصر 'محوری' از آرایه شروع می‌کند و سایر عناصر
    را بر اساس اینکه آیا کمتر یا بزرگتر از محور هستند، به دو زیرآرایه تقسیم می‌کند.

    -------------------------------------------------------------------
    مثال 1
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── آرایه شروعی
    │ 45 ││ 39 ││ 37 ││ 15 ││ 41 │ ◁── مقدار محور 41
    └────┘└────┘└────┘└────┘└────┘ ◁── مرتب‌سازی عناصر 0 - 4
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 39 ││ 37 ││ 15 ││ 41 ││ 45 │ ◁── مرتب‌سازی اول کامل شد
    └────┘└────┘└────┘└────┘└────┘

    دو عنصر آخر مرتب شده‌اند، تمرکز روی سه عنصر اول است.

    ┌────┐┌────┐┌────┐
    │ 39 ││ 37 ││ 15 │ ◁── مقدار محور 15
    └────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 15 ││ 37 ││ 39 ││ 41 ││ 45 │ ◁── مرتب‌سازی دوم کامل شد
    └────┘└────┘└────┘└────┘└────┘

    -------------------------------------------------------------------
    مثال 2
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── آرایه شروعی
    │ 34 ││ 55 ││ 59 ││ 73 ││ 09 │ ◁── مقدار محور 09
    └────┘└────┘└────┘└────┘└────┘ ◁── مرتب‌سازی عناصر 0 - 4
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 55 ││ 59 ││ 73 ││ 34 │ ◁── مرتب‌سازی اول کامل شد
    └────┘└────┘└────┘└────┘└────┘

    عنصر اول مرتب شده است، تمرکز روی چهار عنصر آخر است.

    ┌────┐┌────┐┌────┐┌────┐
    │ 55 ││ 59 ││ 73 ││ 34 │ ◁── مقدار محور 34
    └────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 59 ││ 73 ││ 55 │ ◁── مرتب‌سازی دوم کامل شد
    └────┘└────┘└────┘└────┘└────┘

    دو عنصر اول مرتب شده‌اند، تمرکز روی سه عنصر آخر است.

    ┌────┐┌────┐┌────┐
    │ 59 ││ 73 ││ 55 │ ◁── مقدار محور 55
    └────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 55 ││ 73 ││ 59 │ ◁── مرتب‌سازی سوم کامل شد

    سه عنصر اول مرتب شده‌اند، تمرکز روی دو عنصر آخر است.

    ┌────┐┌────┐ ◁── مقدار محور 59
    │ 73 ││ 59 │ ◁── مرتب‌سازی سوم کامل شد
    └────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 55 ││ 59 ││ 73 │ ◁── مرتب‌سازی نهایی
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/quick.go
