Slices
Slices are an incredibly important data structure in Go. They form the basis for how we manage and manipulate data in a flexible, performant and dynamic way. It is incredibly important for all Go programmers to learn how to uses slices.

* Slices - Arrays, Slices and Maps

Slices are an incredibly important data structure in Go. They form the basis for how we manage and manipulate data in a flexible, performant and dynamic way. It is incredibly important for all Go programmers to learn how to uses slices.

* Notes

- Slices are like dynamic arrays with special and built-in functionality.
- There is a difference between a slices length and capacity and they each service a purpose.
- Slices allow for multiple "views" of the same underlying array.
- Slices can grow through the use of the built-in function append.

* Links

- [[https://blog.golang.org/go-slices-usage-and-internals][Go Slices: usage and internals]] - Andrew Gerrand    
- [[https://blog.golang.org/strings][Strings, bytes, runes and characters in Go]] - Rob Pike    
- [[https://blog.golang.org/slices][Arrays, slices (and strings): The mechanics of 'append']] - Rob Pike        
- [[https://www.ardanlabs.com/blog/2013/08/understanding-slices-in-go-programming.html][Understanding Slices in Go Programming]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2013/08/collections-of-unknown-length-in-go.html][Collections Of Unknown Length in Go]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2013/09/iterating-over-slices-in-go.html][Iterating Over Slices In Go]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2013/09/slices-of-slices-of-slices-in-go.html][Slices of Slices of Slices in Go]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2013/12/three-index-slices-in-go-12.html][Three-Index Slices in Go 1.2]] - William Kennedy    
- [[https://github.com/golang/go/wiki/SliceTricks][SliceTricks]]    
- [[https://go-review.googlesource.com/c/go/+/347917][runtime: Make slice growth formula a bit smoother]] - Go Team 

* Code Review


- *Example* *1:* Declare and Length

.play slices/example1/example1.go
			   

- *Example* *2:* Reference Types
.play slices/example2/example2.go
			   

- *Example* *3:* Appending slices
.play slices/example4/example4.go
			   

- *Example* *4:* Taking slices of slices
.play slices/example3/example3.go
			   
- *Example* *5:* Slices and References
.play slices/example5/example5.go

- *Example* *6:* Strings and slices
.play slices/example6/example6.go
			   

- *Example* *7:* Variadic functions
.play slices/example7/example7.go
			   

- *Example* *8:* Range mechanics
.play slices/example8/example8.go
			   
- *Example* *9:* Efficient Traversals
.play slices/example9/example9.go
			   

* Advanced Code Review


- *Example* *1:* Three index slicing
.play slices/advanced/example1/example1.go
			 

* Exercises

Exercise 1

*Part* *A* Declare a nil slice of integers. Create a loop that appends 10 values to the slice. Iterate over the slice and display each value.

*Part* *B* Declare a slice of five strings and initialize the slice with string literal values. Display all the elements. Take a slice of index one and two and display the index position and value of each element in the new slice.

.play slices/exercises/template1/template1.go
			  

* Answer
.play slices/exercises/exercise1/exercise1.go
			 
All material is licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache License Version 2.0, January 2004]].
