Slices
The slice is Go’s most important data structure and it’s represented as a three word data structure.

* Slices - Arrays, Slices and Maps

Slices are an incredibly important data structure in Go. They form the basis for how we manage and manipulate data in a flexible, performant and dynamic way. It is incredibly important for all Go programmers to learn how to uses slices.

Figure 1

.image /tour/static/img/sl1.png

** Code Review 

- *Example* *1:* Declare and Length

.play slices/example1/example1.go
			   

- *Example* *2:* Reference Types
.play slices/example2/example2.go
			   

- *Example* *3:* Appending slices
.play slices/example4/example4.go
		   

- *Example* *4:* Taking slices of slices
.play slices/example3/example3.go
			   
- *Example* *5:* Slices and References
.play slices/example5/example5.go

- *Example* *6:* Strings and slices
.play slices/example6/example6.go
			   

- *Example* *7:* Variadic functions
.play slices/example7/example7.go
			   

- *Example* *8:* Range mechanics
.play slices/example8/example8.go
			   
- *Example* *9:* Efficient Traversals
.play slices/example9/example9.go
			   
- *Example* *1:* Three index slicing
.play slices/advanced/example1/example1.go

Constructing a slice can be done in several ways.

Listing 1

    // Slice of string set to its zero value state.
    var slice []string

    // Slice of string set to its empty state.
    slice := []string{}

    // Slice of string set with a length and capacity of 5.
    slice := make([]string, 5)

    // Slice of string set with a length of 5 and capacity of 8.
    slice := make([]string, 5, 8)

    // Slice of string set with values with a length and capacity of 5.
    slice := []string{"A", "B", "C", "D", "E"}

I can see the built-in function make allows me to pre-allocate both length and capacity for the backing array. If the compiler knows the size at compile time, the backing array could be constructed on the stack.

** Slice Length vs Capacity
The length of a slice represents the number of elements that can be read and written to. The capacity represents the total number of elements that exist in the backing array from that pointer position.

Because of syntactic sugar, slices look and feel like an array.

Listing 2

    slice := make([]string, 5)
    slice[0] = "Apple"
    slice[1] = "Orange"
    slice[2] = "Banana"
    slice[3] = "Grape"
    slice[4] = "Plum"

I can tell the difference between slice and array construction since an array has a known size at compile time and slices necessarily don’t.

If I try to access an element beyond the slice’s length, I will get a runtime error.

Listing 3

    slice := make([]string, 5)
    slice[5] = "Raspberry"

Compiler Error:

    Error: panic: runtime error: index out of range slice[5] = "Runtime error"

In this example, the length of the slice is 5 and I’m attempting to access the 6th element, which does not exist.

** Data Semantic Guideline For Slices
As a guideline, if the data I’m working with is a slice, then use value semantics to move the data around my program. This includes declaring fields on a type. 

Listing 4

    func Foo(data []byte) []byte

    type Foo struct {
        X []int
        Y []string
        Z []bool
    }

This goes for all of Go’s internal data structures (slices, maps, channels, interfaces, and functions).

One reason to switch to pointer semantics is if I need to share the slice for a decoding or unmarshaling operation. Using pointers for these types of operations are ok, but document this if it’s not obvious.

** Contiguous Memory Layout
The idea behind the slice is to have an array, which is the most efficient data structure as it relates to the hardware. However, I still need the ability to be dynamic and efficient with the amount of data I need at runtime and future growth.

Listing 5

    func main() {
        slice := make([]string, 5, 8)
        slice[0] = "Apple"
        slice[1] = "Orange"
        slice[2] = "Banana"
        slice[3] = "Grape"
        slice[4] = "Plum"

        inspectSlice(slice)
    }

    func inspectSlice(slice []string) {
        fmt.Printf("Length[%d] Capacity[%d]\n", len(slice), cap(slice))
        for i := range slice {
            fmt.Printf("[%d] %p %s\n", i, &slice[i], slice[i])
        }
    }

Output:

    Length[5] Capacity[8]
    [0] 0xc00007e000 Apple
    [1] 0xc00007e010 Orange
    [2] 0xc00007e020 Banana
    [3] 0xc00007e030 Grape
    [4] 0xc00007e040 Plum

The inspectSlice function shows how a slice does have a contiguous backing array with a predictable stride. It also shows how a slice has a length and capacity which may be different. Notice how the print function only iterates over the length of a slice.

** Appending With Slices
The language provides a built-in function called append to add values to an existing slice.

Listing 6

    var data []string

    for record := 1; record <= 102400; record++ {
        data = append(data, fmt.Sprintf("Rec: %d", record))
    }

The append function works with a slice even when the slice is initialized to its zero value state. The API design of append is what’s interesting because it uses value semantic mutation. Append gets its own copy of a slice value, it mutates its own copy, then it returns a copy back to the caller.

Why is the API designed this way? This is because the idiom is to use value semantics to move a slice value around a program. This must still be respected even with a mutation operation. Plus, value semantic mutation is the safest way to perform mutation since the mutation is being performed on the function’s own copy of the data in isolation.

Append always maintains a contiguous block of memory for the slice’s backing array, even after growth. This is important for the hardware.

Figure 2

.image /tour/static/img/sl2.png

Every time the append function is called, the function checks if the length and capacity of the slice is the same or not. If it’s the same, it means there is no more room in the backing array for the new value. In this case, append creates a new backing array (doubling or growing by 25%) and then copies the values from the old array into the new one. Then the new value can be appended.

Figure 3

.image /tour/static/img/sl3.png

If it’s not the same, it means that there is an extra element of capacity existing for the append. An element is taken from capacity and added to the length of the slice. This makes an append operation very efficient.

When the backing array has 1024 elements of capacity or less, new backing arrays are constructed by doubling the size of the existing array. Once the backing array grows past 1024 elements, growth happens at 25%. 

** Slicing Slices
Slices provide the ability to avoid extra copies and heap allocations of the backing array when needing to isolate certain elements of the backing array for different operations.

The slicing syntax represents the list notation [a:b) which means, include elements from index a through b, but not including b.

Listing 7

    slice1 := []string{"A", "B", "C", "D", "E"}
    slice2 := slice1[2:4]

The variable slice2 is a new slice value that is now sharing the same backing array that slice1 is using. However, slice2 only allows me to access the elements at index 2 and 3 (C and D) of the original slice’s backing array. The length of slice2 is 2 and not 5 like in slice1 and the capacity is 3 since there are now 3 elements from that pointer position.

Figure 4

.image /tour/static/img/sl4.png

A better way to think about slicing is to focus on the length using this notation  [a:a+len]  index a through a plus the length. This will reduce errors in calculating new slices.

Using this inspect function.

Listing 8

    func inspectSlice(slice []string) {
        fmt.Printf("Length[%d] Capacity[%d]\n", len(slice), cap(slice))
        for i, s := range slice {
            fmt.Printf("[%d] %p %s\n",
                i,
                &slice[i],
                s)
        }
    }

I can see this in action.

Listing 9

    slice1 := []string{"A", "B", "C", "D", "E"}
    slice2 := slice1[2:4]
    inspectSlice(slice1)
    inspectSlice(slice2)

Output:

    Length[5] Capacity[5]
    [0] 0xc00007e000 A
    [1] 0xc00007e010 B
    [2] 0xc00007e020 C
    [3] 0xc00007e030 D
    [4] 0xc00007e040 E
    Length[2] Capacity[3]
    [0] 0xc00007e020 C     <-- SAME AS INDEX 2 IN SLICE 1
    [1] 0xc00007e030 D     <-- SAME AS INDEX 3 IN SLICE 1

Notice how the two different slices are sharing the same backing array. I can see this by comparing addresses.

The nice thing here is there are no allocations. The compiler knows the size of the backing array for slice1 at compile time. Passing a copy of the slice value down into the inspectSlice function keeps everything on the stack.

** Mutations To The Backing Array
When I use slice2 to change the value of the string at index 0, any slice value that is sharing the same backing array (where the address for that index is part of that slice’s length) will see the change.


Listing 10

    slice1 := []string{"A", "B", "C", "D", "E"}
    slice2 := slice1[2:4]
    slice2[0] = "CHANGED"
    inspectSlice(slice1)
    inspectSlice(slice2)

Output:

    Length[5] Capacity[5]
    [0] 0xc00007e000 A
    [1] 0xc00007e010 B
    [2] 0xc00007e020 CHANGED
    [3] 0xc00007e030 D
    [4] 0xc00007e040 E
    Length[2] Capacity[3]
    [0] 0xc00007e020 CHANGED
    [1] 0xc00007e030 D

I always have to be aware when I am modifying a value at an index position if the backing array is being shared with another slice.

Figure 5

.image /tour/static/img/sl5.png

What if I use the built-in function append instead?


Listing 11

    slice1 := []string{"A", "B", "C", "D", "E"}
    slice2 := slice1[2:4]
    slice2 = append(slice2, "CHANGED")
    inspectSlice(slice1)
    inspectSlice(slice2)

Output:

    Length[5] Capacity[5]
    [0] 0xc00007e000 A
    [1] 0xc00007e010 B
    [2] 0xc00007e020 C
    [3] 0xc00007e030 D
    [4] 0xc00007e040 CHANGED
    Length[3] Capacity[3]
    [0] 0xc00007e020 C
    [1] 0xc00007e030 D
    [2] 0xc00007e040 CHANGED

The append function creates the same side effect, but it’s hidden. In this case, bringing in more length from capacity for slice2 has caused the value at address 0xc00007e040 to be changed. Unfortunately, slice1 had this address already as part of its length.

Figure 6

.image /tour/static/img/sl6.png

One way to avert the side effect is to use a three index slice when constructing slice2 so the length and capacity is the same at 2.


Listing 12

    slice1 := []string{"A", "B", "C", "D", "E"}
    slice2 := slice1[2:4:4]
    inspectSlice(slice1)
    inspectSlice(slice2)

Output:

    Length[5] Capacity[5]
    [0] 0xc00007e000 A
    [1] 0xc00007e010 B
    [2] 0xc00007e020 C
    [3] 0xc00007e030 D
    [4] 0xc00007e040 E
    Length[2] Capacity[2]
    [0] 0xc00007e020 C
    [1] 0xc00007e030 D

The syntax for a three index slice is [a:b:c] when b and c should be the same since  [a-b]  sets the length and  [a-c]  sets the capacity. Now the length and capacity of slice2 is the same.

Now I use the built-in function append again like before.

Listing 13

    slice1 := []string{"A", "B", "C", "D", "E"}
    slice2 := slice1[2:4:4]
    slice2 = append(slice2, "CHANGED")
    inspectSlice(slice1)
    inspectSlice(slice2)

Output:

    Length[5] Capacity[5]
    [0] 0xc00007e000 A
    [1] 0xc00007e010 B
    [2] 0xc00007e020 C
    [3] 0xc00007e030 D
    [4] 0xc00007e040 E
    Length[3] Capacity[4]
    [0] 0xc000016080 C
    [1] 0xc000016090 D
    [2] 0xc0000160a0 CHANGED

Notice after the call to append, slice2 has a new backing array.


Figure 7

.image /tour/static/img/sl7.png

This can be seen by comparing the addresses of each slice. In this case, the mutation against slice2 didn’t cause a side effect against slice1.

** Copying Slices Manually
There is a built-in function named copy that will allow for the shallow copying of slices. Since a string has a backing array of bytes that are immutable, it can be used as a source but never a destination.

Listing 14

    slice1 := []string{"A", "B", "C", "D", "E"}
    slice3 := make([]string, len(slice1))
    copy(slice3, slice1)

    inspectSlice(slice1)
    inspectSlice(slice3)

Output:

    Length[5] Capacity[5]
    [0] 0xc00005c050 A
    [1] 0xc00005c060 B
    [2] 0xc00005c070 C
    [3] 0xc00005c080 D
    [4] 0xc00005c090 E
    Length[5] Capacity[5]
    [0] 0xc00005c0a0 A
    [1] 0xc00005c0b0 B
    [2] 0xc00005c0c0 C
    [3] 0xc00005c0d0 D
    [4] 0xc00005c0e0 E

As long as the destination slice has the proper type and length, the built-in function copy can perform a shallow copy.

** Slices Use Pointer Semantic Mutation
It’s important to remember that even though I use value semantics to move a slice around the program, when reading and writing a slice, I am using pointer semantics. Sharing individual elements of a slice with different parts of my program can cause unwanted side effects.

Listing 15

    // Construct a slice of 1 user, set a pointer to that user,
    // use the pointer to update likes.

    users := make([]user, 1)
    ptrUsr0 := &users[0]
    ptrUsr0.likes++

    for i := range users {
        fmt.Printf("User: %d Likes: %d\n", i, users[i].likes)
    }

Output:

    User: 0 Likes: 1

A slice is used to maintain a collection of users. Then a pointer is set to the first user and used to update likes. The output shows that using the pointer is working.

Figure 8

.image /tour/static/img/sl8.png

Then a new user is appended to the collection and the pointer is used again to add a like to the first user. 


Listing 16

    // Append a new user to the collection. Use the pointer again
    // to update likes.

    users = append(users, user{})
    ptrUsr0.likes++

    for i := range users {
        fmt.Printf("User: %d Likes: %d\n", i, users[i].likes)
    }

Output:

    User: 0 Likes: 1
    User: 1 Likes: 0

However, since the append function replaced the backing array with a new one, the pointer is updating the old backing array and the likes are lost. The output shows the likes for the first user did not increase.

Figure 9

.image /tour/static/img/sl9.png

I have to be careful to know if a slice is going to be used in an append operation during the course of a running program. How I share the slice needs to be considered. Sharing individual indexes may not be the best idea. Sharing an entire slice value may not work either when appending is in operation. Probably using a slice as a field in a struct, and sharing the struct value is a better way to go.
3.20 Linear Traversal Efficiency
The beauty of a slice is its ability to allow for performing linear traversals that are mechanically sympathetic while sharing data using value semantics to minimize heap allocations.


Listing 17

    x := []byte{0x0A, 0x15, 0x0e, 0x28, 0x05, 0x96, 0x0b, 0xd0, 0x0}

    a := x[0]
    b := binary.LittleEndian.Uint16(x[1:3])
    c := binary.LittleEndian.Uint16(x[3:5])
    d := binary.LittleEndian.Uint32(x[5:9])

    println(a, b, c, d)

The code is performing a linear traversal by creating slice values that read different sections of the byte array from beginning to end.

Figure 10

.image /tour/static/img/sl10.png

All the data in this code stays on the stack. No extra copies of the data inside the byte slice are copied.

** UTF-8
Go’s compiler expects all code to be encoded in the UTF-8 character set. Make sure any file with source code is saved with this encoding or literal strings may be wrong when the program runs.

UTF-8 is a character set where I have bytes, code points, and then characters. One to four bytes of data can represent a code point (int32) and one to many code points can represent a character.

Listing 18

    s := "世界 means world"

The string above represents 18 bytes, 14 code points, and 14 characters. Each Chinese character I see requires 3 bytes to represent the code point/character I see.

Listing 19

    var buf [utf8.UTFMax]byte

There is a utf8 package in the standard library that declares a constant named UTFMax. This constant represents the max number of bytes a code point could require, which is 4.

Listing 20
    
    for i, r := range s {

When iterating over a string, the iteration moves code point by code point. Go has an alias type named rune (alias of int32) that represents a code point. Hence the use of the variable r as the value being copied.

On the first iteration, i will equal 0. On the next iteration, i will equal 3. Then in the next iteration, i will equal 6. All subsequent iterations will increment i by 1.

Listing 21

    rl := utf8.RuneLen(r)

The RuneLen function returns the number of bytes required to store the rune value. For the first two iterations, rl will equal 3.

Listing 22

    si := i + rl
    copy(buf[:], s[i:si])

The `si` variable represents the index position for the slice operation to slice the bytes associated with the rune. Then the built-in function copy is used to copy the bytes for the rune into the array. Notice how an array can be sliced. This proves that every array in Go is just a slice waiting to happen.

Listing 23

        fmt.Printf("%2d: %q; codepoint: %#6x; encoded bytes: %#v\n",
            i, r, r, buf[:rl])
    }

The print statement displays each character, code point, and the set of bytes.

Listing 24

    Output:
        0: '世'; codepoint: 0x4e16; encoded bytes: []byte{0xe4, 0xb8, 0x96}
        3: '界'; codepoint: 0x754c; encoded bytes: []byte{0xe7, 0x95, 0x8c}
        6: ' '; codepoint:   0x20; encoded bytes: []byte{0x20}
        7: 'm'; codepoint:   0x6d; encoded bytes: []byte{0x6d}
        8: 'e'; codepoint:   0x65; encoded bytes: []byte{0x65}
        9: 'a'; codepoint:   0x61; encoded bytes: []byte{0x61}
        10: 'n'; codepoint:   0x6e; encoded bytes: []byte{0x6e}
        11: 's'; codepoint:   0x73; encoded bytes: []byte{0x73}
        12: ' '; codepoint:   0x20; encoded bytes: []byte{0x20}
        13: 'w'; codepoint:   0x77; encoded bytes: []byte{0x77}
        14: 'o'; codepoint:   0x6f; encoded bytes: []byte{0x6f}
        15: 'r'; codepoint:   0x72; encoded bytes: []byte{0x72}
        16: 'l'; codepoint:   0x6c; encoded bytes: []byte{0x6c}
        17: 'd'; codepoint:   0x64; encoded bytes: []byte{0x64}

** Notes

- Slices are like dynamic arrays with special and built-in functionality.
- There is a difference between a slices length and capacity and they each service a purpose.
- Slices allow for multiple "views" of the same underlying array.
- Slices can grow through the use of the built-in function append.

** Links

- [[https://blog.golang.org/go-slices-usage-and-internals][Go Slices: usage and internals]] - Andrew Gerrand    
- [[https://blog.golang.org/strings][Strings, bytes, runes and characters in Go]] - Rob Pike    
- [[https://blog.golang.org/slices][Arrays, slices (and strings): The mechanics of 'append']] - Rob Pike        
- [[https://www.ardanlabs.com/blog/2013/08/understanding-slices-in-go-programming.html][Understanding Slices in Go Programming]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2013/08/collections-of-unknown-length-in-go.html][Collections Of Unknown Length in Go]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2013/09/iterating-over-slices-in-go.html][Iterating Over Slices In Go]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2013/09/slices-of-slices-of-slices-in-go.html][Slices of Slices of Slices in Go]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2013/12/three-index-slices-in-go-12.html][Three-Index Slices in Go 1.2]] - William Kennedy    
- [[https://github.com/golang/go/wiki/SliceTricks][SliceTricks]]    
- [[https://go-review.googlesource.com/c/go/+/347917][runtime: Make slice growth formula a bit smoother]] - Go Team 
			 

* Exercises

Exercise 1

*Part* *A:* Declare a nil slice of integers. Create a loop that appends 10 values to the slice. Iterate over the slice and display each value.

*Part* *B:* Declare a slice of five strings and initialize the slice with string literal values. Display all the elements. Take a slice of index one and two and display the index position and value of each element in the new slice.

.play slices/exercises/template1/template1.go
			  
.play slices/exercises/exercise1/exercise1.go
			 
All material is licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache License Version 2.0, January 2004]].
