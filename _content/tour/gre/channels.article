Channels
Channels allow goroutines to communicate with each other through the use of signaling semantics.

* Channels

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Watch The Video]]
- Need Financial Assistance, Use Our [[https://www.ardanlabs.com/scholarship/][Scholarship Form]]

It’s important to think of a channel not as a data structure, but as a mechanic for
signaling. This goes in line with the idea that you send and receive from a channel,
not read and write. If the problem in front of you can’t be solved with signaling,
if the word signaling is not coming out of your mouth, you need to question the use of
channels.

** Code Review

- *Example* *1:* Wait for result
- *Example* *2:* Fan out
- *Example* *3:* Wait for task
- *Example* *4:* Pooling
- *Example* *5:* Fan out semaphore
- *Example* *6:* Bounded work pooling
- *Example* *7:* Drop
- *Example* *8:* Cancellation
- *Example* *9:* Retry timeout
- *Example* *10:* Channel cancellation

.play channels/example1.go
.play channels/example2.go
.play channels/example3.go
.play channels/example4.go
.play channels/example5.go
.play channels/example6.go
.play channels/example7.go
.play channels/example8.go
.play channels/example9.go
.play channels/example10.go

** Channel Mechanics

The cost of having the guarantee at the signaling level is unknown latency. The
sender won’t know how long they need to wait for the receiver to accept the signal.
Having to wait for the receiver creates blocking latency. In this case, unknown
amounts of blocking latency. The sender has to wait, for an unknown amount of time,
until the receiver becomes available to receive the signal.

Waiting for the receiver means mechanically, the receive operation happens before
the send. With channels, the receive happens nanoseconds before, but it’s before.
This means the receiver takes the signal and then walks away, allowing the sender
to now move on with a guarantee.

What if the process can’t wait for an unknown amount of time? What if that kind of
latency won’t work? Then the guarantee can’t be at the signaling level, it needs
to be outside of it. The mechanics behind this working is that the send now happens
before the receive. The sender can perform the signal without needing the receiver
to be available. So the sender gets to walk away and not wait. Eventually, you hope,
the receiver shows up and takes the signal.

This is reducing latency cost on the send, but it’s creating uncertainty about signals
being received and therefore knowing if there are problems upstream with receivers.
This can create the process to accept work that never gets started or finished. It
could eventually cause massive back pressure and systems to crash.

The second thing to focus on is, do you need to send data with the signal? If the signal
requires the transmission of data, then the signaling is a 1 to 1 between Goroutines.
If a new Goroutine needs to receive the signal as well, a second signal must be sent.

If data doesn’t need to be transmitted with the signal, then the signal can be a 1 to
1 or 1 to many between Goroutines. Signaling without data is primarily used for
cancellation or shutdowns. It’s done by closing the channel.

The third thing to focus on is channel state. A channel can be in 1 of 3 states.

A channel can be in a nil state by constructing the channel to its zero value state.
Sends and receives against channels in this state will block. This is good for situations
where you want to implement short term stoppages of work.

A channel can be in an open state by using the built-in function make. Sends and
receives against channels in this state will work under the following conditions:

*Unbuffered* *Channels:*

- Guarantees at the signaling level with the receive happening before send. Sending
and receiving Goroutines need to come together in the same space and time for a
signal to be processed.

*Buffered* *Channels:*

- Guarantees outside of the signaling level with the send happening before the
receive. If the buffer is not full, sends can complete else they block. If the
buffer is not empty, receives can complete else they block.

A channel can be in a closed state by using the built-in function close. You don’t
need to close a channel to release memory, this is for changing the state. Sending
on a closed channel will cause a panic, however receiving on a closed channel
will return immediately.

With all this information, you can focus on channel patterns. The focus on signaling
is important. The idea is, if you need a guarantee at the signaling level or not,
based on latency concerns. If you need to transmit data with the signal or not, based
on handling cancellations or not. You want to convert the syntax to these semantics.

** Design Guidelines

- Learn about the [[https://github.com/ardanlabs/gotraining/blob/master/topics/go/#channel-design][design guidelines]] for channels.

** Diagrams

*Guarantee* *Of* *Delivery*

The `Guarantee Of Delivery` is based on one question: “Do I need a guarantee that
the signal sent by a particular goroutine has been received?”

.image /tour/eng/static/img/guarantee_of_delivery.png

*Signaling* *With* *Or* *Without* *Data*

When you are going to signal `with` data, there are three channel configuration
options you can choose depending on the type of `guarantee` you need.

.image /tour/eng/static/img/signaling_with_data.png

Signaling without data serves the main purpose of cancellation. It allows one
goroutine to signal another goroutine to cancel what they are doing and move on.
Cancellation can be implemented using both `unbuffered` and `buffered` channels.

.image /tour/eng/static/img/signaling_without_data.png

*State*

The behavior of a channel is directly influenced by its current `State`. The
state of a channel can be `nil`, `open` or `closed`.

.image /tour/eng/static/img/state.png

** Extra Reading

- [[https://www.ardanlabs.com/blog/2017/10/the-behavior-of-channels.html][The Behavior Of Channels]] - William Kennedy  
- [[https://golang.org/ref/mem#tmp_7][Channel Communication]]    
- [[http://blog.golang.org/share-memory-by-communicating][Share Memory By Communicating]] - Andrew Gerrand    
- [[https://www.ardanlabs.com/blog/2014/02/the-nature-of-channels-in-go.html][The Nature Of Channels In Go]] - William Kennedy    
- [[http://matt-welsh.blogspot.com/2010/07/retrospective-on-seda.html][A Retrospective on SEDA]] - Matt Welsh    
- [[https://www.youtube.com/watch?v=KBZlN0izeiY][Understanding Channels]] - Kavya Joshi    

** Buffer Bloat - 2011

Be careful about using large buffers with the idea of reducing latency.

- Large buffers prevent timely notification of back pressure.
- They defeat your ability to reduce back pressure in a timely matter.
- They can increase latency not reduce it.
- Use buffered channels to provide a way of maintaining continuity.
- Don't use them just for performance.
- Use them to handle well defined bursts of data.
- Use them to deal with speed of light issues between handoffs.

*Videos*

- [[https://www.youtube.com/watch?v=qbIozKVz73g][Bufferbloat: Dark Buffers in the Internet]]  
- [[http://www.bufferbloat.net/projects/cerowrt/wiki/Bloat-videos][Buffer Bloat Videos]]  

* Exercises

Use the template as a starting point to complete the exercises. A possible solution is provided.

** Exercise 1

Write a program where two goroutines pass an integer back and forth ten times.
Display when each goroutine receives the integer. Increment the integer with each
pass. Once the integer equals ten, terminate the program cleanly.

.play channels/exercise1.go 
.play channels/answer1.go

** Exercise 2

Write a program that uses a fan out pattern to generate 100 random numbers concurrently.
Have each goroutine generate a single random number and return that number to the main
goroutine over a buffered channel. Set the size of the buffer channel so no send ever
blocks. Don't allocate more buffers than you need. Have the main goroutine display each
random number it receives and then terminate the program.

.play channels/exercise2.go 
.play channels/answer2.go

** Exercise 3

Write a program that generates up to 100 random numbers concurrently. Do not send
all 100 values so the number of sends/receives is unknown.

.play channels/exercise3.go 
.play channels/answer3.go
 
** Exercise 4

Write a program that generates up to 100 random numbers concurrently using a worker
pool. Reject even values. Instruct the workers to shutdown with 100 odd numbers have
been collected.

.play channels/exercise4.go 
.play channels/answer4.go
