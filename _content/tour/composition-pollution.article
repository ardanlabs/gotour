Interface and Composition Design
Composition goes beyond the mechanics of type embedding and is more than just a paradigm. It is the key for maintaining stability in your software by having the ability to adapt to the data and transformation changes that are coming.

* Interface and Composition Design

The best way to take advantage of embedding is through the compositional design pattern. The idea is to compose larger types from smaller types and focus on the composition of behavior.

** Code Review

- *Example* *1:* Create Interface Pollution
- *Example* *2:* Remove Interface Pollution

.play composition/pollution/example1.go
.play composition/pollution/example2.go

** Interface Pollution

I can spot interface pollution from a mile away. It mostly comes from the fact that people are designing software with interfaces instead of discovering them. I should design a concrete solution to the problem first. Then I can discover where the program needs to be polymorphic, if at all.

These are things I’ve heard from other developers.

"I’m using interfaces because we have to use interfaces".

No. We don't have to use interfaces. We use interfaces when it’s practical and reasonable to do so. There is a cost of using interfaces: a level of indirection and allocation when we store concrete values inside of them. Unless the cost of the allocation is worth what I’m gaining by decoupling, I shouldn't be using interfaces.

"I need to be able to test my code so I need to use interfaces".

No. I must design my API for the user first, not my test. If the API is not testable, I should question if it’s usable. There are different layers of API’s as well. The lower level unexported API’s can and should focus on testability. The higher level exported API’s need to focus on usability.

Functions that accept raw data in and return raw data out are the most testable. Separate the data transformation from where the data comes from and where it is going. This is a refactoring exercise I need to perform during the engineering coding cycle.

Below is an example that creates interface pollution by improperly using an interface when one is not needed.

    type Server interface {
        Start() error
        Stop() error
        Wait() error
    }

The Server interface defines a contract for TCP servers. The problem here is I don’t need a contract, I need an implementation. There will only be one implementation as well, especially since I am the one implementing it. I do not need someone else to implement this for me.

Plus, this interface is based on a noun and not a verb. Concrete types are nouns since they represent the concrete problem. Interfaces describe the behavior and Server is not behavior.
Here are some ways to identify interface pollution:

- A package declares an interface that matches the entire API of its own concrete type.
- The interfaces are exported but the concrete types implementing the interface are unexported.
- The factory function for the concrete type returns the interface value with the unexported concrete type value inside.
- The interface can be removed and nothing changes for the user of the API.
- The interface is not decoupling the API from change.

Guidelines around interface pollution:

Use an interface:

- When users of the API need to provide an implementation detail.
- When APIs have multiple implementations that need to be maintained.
- When parts of the APIs that can change have been identified and require decoupling.

Question an interface:

- When its only purpose is for writing testable API’s (write usable APIs first).
- When it’s not providing support for the API to decouple from change.
- When it's not clear how the interface makes the code better.
