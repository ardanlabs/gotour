Package Oriented Design
Package Oriented Design allows a developer to identify where a package belongs inside a Go project and the design guidelines the package must respect. It defines what a Go project is and how a Go project is structured. Finally, it improves communication between team members and promotes clean package design and project architecture that is discussable.

* Package Oriented Design

Package Oriented Design allows a developer to identify where a package belongs inside a Go project and the design guidelines the package must respect. It defines what a Go project is and how a Go project is structured. Finally, it improves communication between team members and promotes clean package design and project architecture that is discussable.

** Links

- [[https://www.ardanlabs.com/blog/2017/02/design-philosophy-on-packaging.html][Design Philosophy On Packaging]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2017/02/package-oriented-design.html][Package Oriented Design]] - William Kennedy    

** History

In an interview given to Brian Kernighan by Mihai Budiu in the year 2000, Brian was asked the following question:

- “Can you tell us about the worse features of C, from your point of view”?-

This was Brian’s response:

- “I think that the real problem with C is that it doesn’t give you enough mechanisms for structuring really big programs, for creating "firewalls" within programs so you can keep the various pieces apart. It’s not that you can’t do all of these things, that you can’t simulate object-oriented programming or other methodology you want in C. You can simulate it, but the compiler, the language itself isn’t giving you any help.”

** Language Mechanics

- Packaging directly conflicts with how we have been taught to organize source code in other languages.
- In other languages, packaging is a feature that you can choose to use or ignore.
- You can think of packaging as applying the idea of microservices on a source tree.
- All packages are "first class," and the only hierarchy is what you define in the source tree for your project.
- There needs to be a way to “open” parts of the package to the outside world.
- Two packages can’t cross-import each other. Imports are a one way street. 

** Design Philosophy

To be purposeful, packages must provide, not contain.

- Packages must be named with the intent to describe what it provides.
- Packages must not become a dumping ground of disparate concerns.

To be usable, packages must be designed with the user as their focus.

- Packages must be intuitive and simple to use.
- Packages must respect their impact on resources and performance.
- Packages must protect the user’s application from cascading changes.
- Packages must prevent the need for type assertions to the concrete.
- Packages must reduce, minimize and simplify its code base.

To be portable, packages must be designed with reusability in mind.

- Packages must aspire for the highest level of portability.
- Packages must reduce setting policy when it’s reasonable and practical.
- Packages must not become a single point of dependency.

** Project Structure


    Kit                     Application

    ├── CONTRIBUTORS        ├── cmd/
    ├── LICENSE             ├── internal/
    ├── README.md           │   └── platform/
    ├── cfg/                └── vendor/
    ├── examples/
    ├── log/
    ├── pool/
    ├── tcp/
    ├── timezone/
    ├── udp/
    └── web/

.html packaging/list.html

All material is licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache License Version 2.0, January 2004]].
