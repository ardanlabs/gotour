Entkopplung
Die Zusammensetzung geht über die Mechanik der Typeneinbettung hinaus und ist mehr als nur ein Paradigma.

* Entkopplung

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Schaut euch das Video an]]
- Braucht ihr finanzielle Unterstützung? Nutzt unser  [[https://www.ardanlabs.com/scholarship/][Stipendienformular]]

Der beste Weg die Vorteile einer Einbettung zu nutzen, ist durch das kompositionelle Designmuster. 
Es ist der Schlüssel um Stabilität in eurer Software zu erhalten, indem ihr die Fähigkeit habt, 
euch an die kommenden Daten- und Transformationsänderungen anzupassen.

** Code-Überprüfung

- *Beispiel* *1:* Strukturzusammensetzung
- *Beispiel* *2:* Entkopplung mit Interfaces 
- *Beispiel* *3:* Interfacezusammensetzung
- *Beispiel* *4:* Entkopplung mit Interfacezusammensetzung
- *Beispiel* *5:* Entfernen von Interfaceverschmutzung
- *Beispiel* *6:* Präzisere API


.play composition/decoupling/example1.go
.play composition/decoupling/example2.go
.play composition/decoupling/example3.go
.play composition/decoupling/example4.go
.play composition/decoupling/example5.go
.play composition/decoupling/example6.go

** Mechanik der Entkopplung

Die Idee ist größere Typen aus kleineren Typen zu komponieren 
und sich auf die Zusammensetzung des Verhaltens zu konzentrieren.

    type Xenia struct {
        Host    string
        Timeout time.Duration
    }

    func (*Xenia) Pull(d *Data) error {
        switch rand.Intn(10) {
        case 1, 9:
            return io.EOF
        case 5:
            return errors.New("Error reading data from Xenia")
        default:
            d.Line = "Data"
            fmt.Println("In:", d.Line)
            return nil
        }
    }

Der Typ Xenia repräsentiert ein System, von dem ihr Daten abrufen müsst. Die Implementierung 
ist nicht wichtig. Wichtig ist, dass die Methode Pull erfolgreich ausgeführt, 
fehlschlagen oder keine Daten zum Abrufen haben kann.

    type Pillar struct {
        Host    string
        Timeout time.Duration
    }

    func (*Pillar) Store(d *Data) error {
        fmt.Println("Out:", d.Line)
        return nil
    }

Der Typ Pillar repräsentiert ein System, in das ihr Daten speichern müsst. 
Wichtig ist wieder, dass die Methode Store erfolgreich sein oder fehlschlagen kann.

Diese beiden Typen repräsentieren eine primitive Schicht von Code, die das 
grundlegende Verhalten bereitstellt, das erforderlich ist um das Geschäftsproblem 
des Abrufens von Daten aus Xenia und Speichern dieser Daten in Pillar zu lösen.

    func Pull(x *Xenia, data []Data) (int, error) {
        for i := range data {
            if err := x.Pull(&data[i]); err != nil {
                return i, err
            }
        }

        return len(data), nil
    }

    func Store(p *Pillar, data []Data) (int, error) {
        for i := range data {
            if err := p.Store(&data[i]); err != nil {
                return i, err
            }
        }

        return len(data), nil
    }

Die nächste Ebene des Codes wird durch die beiden Funktionen Pull und Store dargestellt. Sie
bauen auf der primitiven Codeschicht auf, indem sie eine Sammlung von Datenwerten akzeptieren
um in den jeweiligen Systemen abzurufen oder zu speichern. Diese Funktionen konzentrieren sich 
auf die konkreten Typen von Xenia und Pillar, da dies die Systeme sind, mit denen das Programm 
zu diesem Zeitpunkt arbeiten muss.


    func Copy(sys *System, batch int) error {
        data := make([]Data, batch)

        for {
            i, err := Pull(&sys.Xenia, data)
            if i > 0 {
                if _, err := Store(&sys.Pillar, data[:i]); err != nil {
                    return err
                }
            }

            if err != nil {
                return err
            }
        }
    }

Die Copy-Funktion baut auf den Pull- und Store-Funktionen auf, um alle anstehenden Daten für 
jeden Lauf zu bewegen. Wenn ihr den ersten Parameter von Copy bemerkt, handelt es sich um 
einen Typ namens System.

    type System struct {
        Xenia
        Pillar
    }

Die ursprüngliche Idee des System-Typs ist es, ein System zu komponieren das weiß, 
wie man Pull und Store durchführt. In diesem Fall, die Fähigkeit, Pull und Store von 
Xenia und Pillar zu komponieren.

    func main() {
        sys := System{
            Xenia: Xenia{
                Host:    "localhost:8000",
                Timeout: time.Second,
            },
            Pillar: Pillar{
                Host:    "localhost:9000",
                Timeout: time.Second,
            },
        }

        if err := Copy(&sys, 3); err != io.EOF {
            fmt.Println(err)
        }
    }

Schließlich kann die Hauptfunktion geschrieben werden, um ein Xenia und Pillar innerhalb 
der Zusammensetzung eines Systems zu konstruieren. Dann kann das System an die Copy-Funktion 
übergeben werden und Daten können zwischen den beiden Systemen fliessen zu beginnen.

Mit all diesem Code habt ihr jetzt meinen ersten Entwurf einer konkreten Lösung für ein konkretes Problem.

** Entkopplung mit Interfaces

Der nächste Schritt besteht darin zu verstehen, was sich im Programm ändern könnte. In diesem Fall können 
sich die Systeme selbst ändern. Heute sind es Xenia und Pillar, morgen könnten es Alice und Bob sein. 
Mit diesem Wissen wollt ihr die bestehende konkrete Lösung von dieser Änderung entkoppeln. Um das zu tun 
solltet ihr die konkreten Funktionen in polymorphe Funktionen ändern.

    func Pull(p Puller, data []Data) (int, error) {
        for i := range data {
            if err := p.Pull(&data[i]); err != nil {
                return i, err
            }
        }

        return len(data), nil
    }

    func Store(s Storer, data []Data) (int, error) {
        for i := range data {
            if err := s.Store(&data[i]); err != nil {
                return i, err
            }
        }

        return len(data), nil
    }

Aktuell akzeptiert die Pull-Funktion einen Xenia-Wert und die Store-Funktion einen Pillar-Wert. 
Letztendlich war es nicht Xenia und Pillar was wichtig war, sondern ein konkreter Wert der weiß 
wie man Pull und Store durchführt. Ihr könnt diese konkreten Funktionen polymorph gestalten, 
indem ihr nach Daten basierend darauf fragt, was sie tun können, anstatt darauf was sie sind.

    type Puller interface {
        Pull(d *Data) error
    }

    type Storer interface {
        Store(d *Data) error
    }

Diese beiden Interfaces beschreiben was konkrete Daten tun müssen und es sind diese Typen, 
die in der Deklaration der Pull- und Store-Funktionen ersetzt werden. Jetzt sind diese Funktionen 
polymorph. Wenn Alice und Bob als Puller und Storer deklariert und implementiert werden, können sie 
in die Funktionen eingegeben werden.

Ihr seid noch nicht fertig. Die Copy-Funktion muss ebenfalls polymorph sein.

    func Copy(ps PullStorer, batch int) error {
        data := make([]Data, batch)

        for {
            i, err := Pull(ps, data)
            if i > 0 {
                if _, err := Store(ps, data[:i]); err != nil {
                    return err
                }
            }

            if err != nil {
                return err
            }
        }
    }

Die Copy-Funktion fragt nicht länger nach einem System-Wert, sondern nach jedem konkreten Wert, 
der sowohl Pull als auch Store durchführen kann.

    type PullStorer interface {
        Puller
        Storer
    }

Das PullStorer-Interface wird durch Komposition deklariert. Sie setzt sich aus den 
Interfaces Puller und Storer zusammen. Arbeitet daran, größere Interface aus 
kleineren zu komponieren.

Beachtet, wie die PullStorer-Variable jetzt in die Pull- und Store-Funktionen eingegeben wird. 
Wie ist das möglich, wenn die Typinformation unterschiedlich ist?

    // func Pull(p Puller, data []Data) (int, error) {
    i, err := Pull(ps, data)

    // func Store(s Storer, data []Data) (int, error) {
    if _, err := Store(ps, data[:i]); err != nil {

Ihr müsst euch immer daran erinnern, dass ihr niemals einen Interface-Wert in eurem 
Programm herumreicht, da sie nicht existieren und wertlos sind. Ihr könnt nur konkrete 
Daten weitergeben. Also sind die konkreten Daten, die in der Interfacevariablen ps 
gespeichert sind, das was an Pull und Store weitergegeben wird. Ist es nicht so, dass 
der konkrete Wert der in ps gespeichert ist, wissen muss wie man Pull und Store durchführt?

.image /tour/eng/static/img/comp1.png

Da ein System aus einem Xenia und einem Pillar zusammengesetzt ist, implementiert das System 
das PullStorer-Interface. Mit diesen Änderungen könnt ihr jetzt neue konkrete Typen erstellen, 
die das PullStorer-Interface implementieren.


    type System1 struct {
        Xenia
        Pillar
    }

    type System2 struct {
        Alice
        Bob
    }

    type System3 struct {
        Xenia
        Bob
    }

    type System4 struct {
        Alice
        Pillar
    }

Verschiedene Systeme-Typen für alle möglichen Kombinationen zu erstellen ist nicht realistisch.
Obwohl es grundätzlich funktionieren würde, wäre der Wartungsaufwand dafür ein Alptraum.

** Interfacekomposition

Was wäre wenn ihr euch dafür entscheidet, euren konkreten Systemtyp aus zwei Interfacetypen zu komponieren?

    type System struct {
        Puller
        Storer
    }

Dies ist eine interessante Lösung. Dies würde es der Anwendung ermöglichen, den konkreten Puller oder Storer 
beim Anwendungsstart in das System zu injizieren.

    func main() {
        sys := System{
            Puller: &Xenia{
                Host:    "localhost:8000",
                Timeout: time.Second,
            },
            Storer: &Pillar{
                Host:    "localhost:9000",
                Timeout: time.Second,
            },
        }

        if err := Copy(&sys, 3); err != io.EOF {
            fmt.Println(err)
        }
    }

Dieser eine Systemtyp implementiert das PullStorer-Interface für alle möglichen
Kombinationen von konkreten Typen.

.image /tour/eng/static/img/comp2.png

Mit dieser Änderung ist die Anwendung vollständig von Änderungen an einem neuen System entkoppelt, 
das im Laufe der Zeit online kommen könnte.

** Präzisionsüberprüfung

Die nächste Frage die gestellt werden muss ist, ob die polymorphen Funktionen so präzise sind,
wie sie sein könnten. Dies ist ein Teil des Ingenieurprozesses, der nicht übersprungen werden darf. 
Die Antwort lautet nein. Es können zwei Änderungen vorgenommen werden.

    func Copy(sys *System, batch int) error {

Die Copy-Funktion muss nicht mehr polymorph sein, da es nur noch einen Systemtyp geben wird. 
Der PullStorer-Interfacetyp kann aus dem Programm entfernt werden. Erinnert euch, ihr habt den 
Polymorphismus in den Typ verschoben, als ihr die Komposition mit den Interfacetypen verwendet habt.

    func Copy(p Puller, s Storer, batch int) error {

Dies ist eine weitere Änderung die an der Copy-Funktion vorgenommen werden kann. Diese Änderung macht 
die Funktion wieder präziser und polymorph. Jetzt fragt die Funktion genau nach dem was sie benötigt, 
basierend darauf was die konkreten Daten tun können.

.image /tour/eng/static/img/comp3.png

Mit dieser Änderung kann auch der System-Strukturtyp aus dem Programm entfernt werden.

    func main() {
        x := Xenia{
            Host:    "localhost:8000",
            Timeout: time.Second,
        }

        p := Pillar{
            Host:    "localhost:9000",
            Timeout: time.Second,
        }

        if err := Copy(&x, &p, 3); err != io.EOF {
            fmt.Println(err)
        }
    }

Durch das Entfernen der PullStorer- und Systemtypen vereinfacht sich das Programm. Die Hauptfunktion kann sich 
auf den Aufbau der konkreten Puller- und Storer-Werte konzentrieren, die für die Datenbewegung notwendig sind. 
Das Typsystem und die APIs sind so präziser. Diese Idee der Präzision stammt von Edsger W. Dijkstra:

"Der Zweck der Abstraktion ist nicht vage zu sein, sondern eine neue semantische Ebene zu schaffen, 
in der man absolut präzise sein kann." - Edsger W. Dijkstra

** Anmerkungen

- Dies ist viel mehr als die Mechanik der Typeneinbettung.
- Deklariert Typen und implementiert Workflows mit Komposition im Sinn.
- Versteht zuerst das Problem das ihr lösen wollt. Das bedeutet die Daten zu verstehen.
- Das Ziel ist es, kaskadierende Änderungen in eurer Software zu reduzieren und zu minimieren.
- Interface bieten die höchste Form der Komposition.
- Gruppiert Typen nicht nach einem gemeinsamen DNA, sondern nach einem gemeinsamen Verhalten.
- Alle können zusammenarbeiten, wenn wir uns auf das konzentrieren, was wir tun und nicht darauf was wir sind.

** Zitate

"Eine gute API ist nicht nur einfach zu bedienen, sondern auch schwer falsch zu verwenden." - JBD

"Man kann immer einbetten, aber man kann große Interface nicht mehr zerlegen, 
wenn sie einmal draußen sind. Haltet Interface klein." - JBD

"Entwerft nicht mit Interface, entdeckt sie." - Rob Pike

"Duplikation ist viel billiger als die falsche Abstraktion." - Sandi Metz

** Designrichtlinien

[[https://github.com/ardanlabs/gotraining/blob/master/topics/go/#interface-and-composition-design][Designrichtlinien]] für Komposition.

** Zusätzliche Lektüre

- [[https://programmingisterrible.com/post/176657481103/repeat-yourself-do-more-than-one-thing-and][Repeat yourself, do more than one thing, and rewrite everything]] - tef  
- [[https://golang.org/doc/effective_go.html#embedding][Embedding]]   
- [[https://www.ardanlabs.com/blog/2014/05/methods-interfaces-and-embedded-types.html][Methods, Interfaces and Embedding]] - William Kennedy  
- [[https://www.ardanlabs.com/blog/2015/09/composition-with-go.html][Composition In Go]] - William Kennedy  
- [[https://www.ardanlabs.com/blog/2016/10/reducing-type-hierarchies.html][Reducing Type Hierarchies]] - William Kennedy  
- [[https://www.ardanlabs.com/blog/2016/10/avoid-interface-pollution.html][Avoid Interface Pollution]] - William Kennedy 

* Übungen

Verwendet die Vorlage als Ausgangspunkt, um die Übungen zu vervollständigen. Eine mögliche Lösung wird bereitgestellt.

** Übung 1

Verwendet die Vorlage um eine Reihe von konkreten Typen zu deklarieren, welche die vorgegebenen Interfacetypen implementieren. 
Erstellt dann Werte dieser Typen und verwendet sie um eine Reihe von vorgegebenen Aufgaben zu erledigen.

.play composition/decoupling/exercise1.go
.play composition/decoupling/answer1.go
