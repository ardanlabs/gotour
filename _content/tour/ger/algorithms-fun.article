Lustige Probleme
Dieser Abschnitt enthält eine Reihe von unterhaltsamen Code-Herausforderungen, die einige der Möglichkeiten von Go zeigen.

* Problem des schlafenden Friseurs

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Video anschauen]]
- Braucht ihr finanzielle Unterstützung? Nutzt unser [[https://www.ardanlabs.com/scholarship/][Stipendienformular]]

Dieses Beispielprogramm implementiert das Problem des schlafenden Friseurs.

- Mehr dazu unter [[https://en.wikipedia.org/wiki/Sleeping_barber_problem][https://en.wikipedia.org/wiki/Sleeping_barber_problem]]

Es gibt einen Friseur im Friseursalon, einen Friseurstuhl und `n` Stühle 
für wartende Kunden. Wenn keine Kunden da sind, setzt sich der Friseur in 
den Friseurstuhl und macht ein Nickerchen. 
Ein neu ankommender Kunde muss den Friseur wecken. 
Nachfolgende ankommende Kunden nehmen einen Wartestuhl ein, 
falls welche frei sind, oder verlassen den Salon, 
falls alle Stühle besetzt sind.

*Ausgabe:*

    Das Geschäft öffnet
    Friseur ist bereit zur Arbeit
    Kunde "cust-1" betritt den Laden
    Kunde "cust-1" nimmt Platz und wartet
    Friseur bedient Kunde "cust-1"
    Friseur ist fertig mit Kunde "cust-1"
    Friseur macht ein Nickerchen
    Kunde "cust-2" betritt den Laden
    Kunde "cust-2" nimmt Platz und wartet
    Friseur bedient Kunde "cust-2"
    Kunde "cust-3" betritt den Laden
    Kunde "cust-3" nimmt Platz und wartet
    Friseur ist fertig mit Kunde "cust-2"
    Friseur bedient Kunde "cust-3"
    Kunde "cust-4" betritt den Laden
    Kunde "cust-4" nimmt Platz und wartet
    Das Geschäft schließt
    Friseur ist fertig mit Kunde "cust-3"
    Friseur bedient Kunde "cust-4"
    Friseur ist fertig mit Kunde "cust-4"
    Das Geschäft ist geschlossen

.play algorithms/fun/barber.go

* Häufigkeit

Dieses Beispielprogramm zeigt, wie man eine Funktion implementiert, 
die die Häufigkeit eines bestimmten Runensymbols in einem Satz ermittelt.

- Sequenziell: Ein linearer Algorithmus zur Durchführung einer Runenzählung.
- Parallel: Ein paralleler Algorithmus zur Durchführung einer Runenzählung.

.play algorithms/fun/freq_sequential.go
.play algorithms/fun/freq_concurrent.go

* Kodierung/Dekodierung Variable Length Quantity

In diesem Beispielprogramm wird gezeigt, wie man mit Go die Kodierung/Dekodierung 
von variablen längencodierten Grössen (variable length quantity encoding/decoding) umsetzen kann.

- Mehr dazu unter [[https://en.wikipedia.org/wiki/Variable-length_code][https://en.wikipedia.org/wiki/Variable-length_code]]

Kurz gesagt, das Ziel dieser Codierung ist es, ganzzahlige (Integer) Werte so zu speichern, dass Bytes eingespart werden. 
Nur die ersten 7 Bits jedes Bytes sind wichtig (rechtsbündig; ähnlich wie ein ASCII-Byte). 
Wenn man also einen 32-Bit-Wert hat, muss man ihn in eine Reihe von 7-Bit-Bytes zerlegen. 
Natürlich hat man je nach Ganzzahl (Integer) eine variable Anzahl von Bytes. 
Um anzugeben, welches das letzte Byte der Serie ist, lässt man Bit #7 frei. 
In allen vorhergehenden Bytes legt man Bit #7 fest.

Wenn also eine Ganzzahl (Integer) zwischen 0-127 liegt, kann diese Ganzzahl als ein Byte dargestellt werden. 
Die größte erlaubte Ganzzahl (Integer) ist 0FFFFFFF, was sich in 4 Bytes variabler Länge übersetzt. 
Hier sind Beispiele von Delta-Zeiten als 32-Bit-Werte und die variablen längencodierten Grössen, 
in die sie übersetzt werden:

    NUMBER        VARIABLE GRÖSSE
    00000000              00
    00000040              40
    0000007F              7F
    00000080             81 00
    00002000             C0 00
    00003FFF             FF 7F
    00004000           81 80 00
    00100000           C0 80 00
    001FFFFF           FF FF 7F


    00200000          81 80 80 00
    08000000          C0 80 80 00
    0FFFFFFF          FF FF FF 7F

Eine Variable Length Quantity (VLQ) ist ein universeller Code, der eine beliebige Anzahl 
von Binäroktetten (Acht-Bit-Bytes) verwendet, um eine beliebig große Ganzzahl darzustellen.
Er wurde für die Verwendung im standardisierten MIDI-Dateiformat definiert, um zusätzlichen Speicherplatz für 
ein ressourcenbeschränktes System zu sparen und wird auch im späteren Extensible Music Format (XMF) verwendet.
Ein VLQ ist im Wesentlichen eine Basis-128-Darstellung einer vorzeichenlosen 
Ganzzahl mit der Hinzufügung des achten Bits um die Fortsetzung der Bytes zu markieren. 
Siehe das Beispiel unten.

	Int:    16384
	IntHex: 0x00004000
	IntBin: 00000000 00000000 01000000 00000000
	VLQHex: 0x81 0x80 0x00
	VLQBin: 00000000 10000001 10000000 00000000

Angenommen ich möchte die Zahl 3435 in VLQ darstellen. 3435 in Binär ist 110101101011. 
Wir können dies nicht in ein Byte packen. Also teilen wir es vom Ende her in 7-Bit-Blöcke auf.

    Septet	7	6	5	4	3	2	1
    #1		1	1	0	1	0	1	1
    #2		0	0	1	1	0	1	0


Jetzt fügen wir allen bis auf dem letzten einen 1-Bit voran um zu signalisieren, 
dass ein weiteres Oktett folgt und fügen dem letzten einen 0-Bit voran 
um das finale Oktett zu kennzeichnen.

    Oktett  8	7	6	5	4	3	2	1
    #1      0	1	1	0	1	0	1	1
    #2      1	0	0	1	1	0	1	0

Zum Schluss verketten wir sie, beginnend mit dem signifikantesten Oktett

Kodiert: 10011010 01101011  ZuHex: 0x9A 0x6B

*Zusätzliche* *Ressourcen:*

- [[https://en.wikipedia.org/wiki/Variable-length_quantity][https://en.wikipedia.org/wiki/Variable-length_quantity]]
- [[https://blogs.infosupport.com/a-primer-on-vlq/][https://blogs.infosupport.com/a-primer-on-vlq/]]

*Für* *eine* *ausgezeichnete* *Implementierung* *dieses* *Algorithmus* *siehe* *hier:*

- [[https://github.com/go-audio/midi/blob/master/varint.go][https://github.com/go-audio/midi/blob/master/varint.go]]

.play algorithms/fun/vlq.go