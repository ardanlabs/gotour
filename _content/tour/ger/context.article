Context-Paket
Das Paket Context definiert den Typ Context, welcher Fristen, Abbruchsignale und andere anfragespezifische Werte über API-Grenzen hinaus und zwischen Prozessen trägt.

* Context-Paket

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Schaut euch das Video an]]
- Braucht ihr finanzielle Unterstützung? Nutzt unser  [[https://www.ardanlabs.com/scholarship/][Stipendienformular]]

Das Paket Context definiert den Typ Context, welcher Fristen, Abbruchsignale und andere anfragespezifische 
Werte über API-Grenzen hinuas und zwischen Prozessen trägt.

** Code-Überprüfung

"Context-Werte dienen dazu, anfragespezifische Daten zu übertragen, die in einem verteilten System durch Programme fließen.

- *Beispiel* *1:* Werte speichern / abrufen
- *Beispiel* *2:* WithCancel
- *Beispiel* *3:* WithDeadline
- *Beispiel* *4:* WithTimeout
- *Beispiel* *5:* Anfrage/Antwort
- *Beispiel* *6:* Abbruch

.play context/example1.go
.play context/example2.go
.play context/example3.go
.play context/example4.go
.play context/example5.go
.play context/example6.go

** Context-Semantik

Die Programmiersprache Go verfügt über das eingebaute Schlüsselwort go, um Goroutinen zu erstellen. Die Sprache bietet jedoch keine 
Schlüsselwörter oder direkte Unterstützung für das Beenden von Goroutinen. In einem realen Dienst ist es jedoch entscheidend, 
Goroutinen zeitlich zu begrenzen und zu beenden, damit die Gesundheit und der Betrieb eines Dienstes gewährleistet ist. 
Keine Anfrage oder Aufgabe darf ewig laufen, daher ist es die Verantwortung jedes Programmierers, Latenz zu identifizieren und zu verwalten.

Eine vom Go-Team bereitgestellte Lösung für dieses Problem ist das Context-Paket. Es wurde 2014 von Sameer Ajmani 
auf der Gotham Go-Konferenz vorgestellt und eingeführt. Er schrieb auch einen Blogbeitrag für den Go-Blog.

Präsentation: [[https://talks.golang.org/2014/gotham-context.slide#1][https://talks.golang.org/2014/gotham-context.slide#1]]

Blog Post: [[https://blog.golang.org/context][https://blog.golang.org/context]]

Aus dieser veröffentlichten Arbeit und dem Gesprächen mit Sameer im Laufe der Jahre
hat sich eine Reihe von Semantiken entwickelt.

*Eingehende* *Anfragen* *an* *einen* *Server* *sollten* *einen* *Context* *erstellen*

Der richtige Zeitpunkt einen Context in der Bearbeitung einer Anfrage oder Bewältigung einer Aufgabe zu erstellen, ist immer so früh wie möglich.
Die frühe Initialisierung des Context zwingt Sie dazu APIs so zu entwerfen, dass sie Context als ersten Parameter nehmen. 
Selbst wenn ihr euch nicht sicher seid ob eine Funktion Context benötigt, ist es einfacher Context aus einigen Funktionen 
zu entfernen, als später Context hinzuzufügen.

    75 // Handle is our mechanism for mounting Handlers for a given HTTP verb and path
    76 // pair, this makes for really easy, convenient routing.
    77 func (a *App) Handle(verb, path string, handler Handler, mw ...Middleware) {
    ...
    85     // The function to execute for each request.
    86     h := func(w http.ResponseWriter, r *http.Request, params map[string]string) {
    87         ctx, span := trace.StartSpan(r.Context(), "internal.platform.web")
    88         defer span.End()
    ...
    106    // Add this handler for the specified verb and route.
    107    a.TreeMux.Handle(verb, path, h)
    108 }

In diesem Auszug aus dem Serviceprojekt von Ardan Labs wird in Zeile 86 eine Handler-Funktion definiert, die an alle Routes 
gebunden ist, wie Zeile 107 zeigt. Diese Funktion beginnt mit der Bearbeitung aller eingehenden Anfragen. 
In Zeile 87 wird für die Anfrage ein Span erstellt, der als ersten Parameter einen Context nimmt. Dies ist das erste Mal 
im Service-Code, dass ein Context benötigt wird.

Das Besondere hier ist, dass der Wert http.Request bereits einen Context enthält. Dies wurde in Version 1.7 von Go 
hinzugefügt. Das bedeutet, dass der Code keinen Top-Level-Context manuell erstellen muss. Wenn man Version 1.8 von 
Go verwenden würde, müsste man einen leeren Context vor dem Aufruf von StartSpan mit der Funktion context.Background 
erstellen.

    https://golang.org/pkg/context/#Background

    87         ctx := context.Background()
    88         ctx, span := trace.StartSpan(ctx, "internal.platform.web")
    89         defer span.End()

In der Version 1.8 von Go müsste der Code wie folgt aussehen, wie es in der Dokumentation beschrieben ist:

Background gibt einen nicht-nullen, leeren Context zurück. Er wird niemals abgebrochen, hat keine Werte und keine 
Deadline. Er wird typischerweise von der Hauptfunktion, Initialisierung und Tests verwendet und als Top-Level-Context 
für eingehende Anfragen genutzt.

Es ist ein Idiom in Go den Variablennamen ctx für alle Context-Werte zu verwenden. Da ein Context eine 
Interface ist, sollten keine Zeigersemantiken verwendet werden.

    https://golang.org/pkg/context/#Context

    type Context interface {
        Deadline() (deadline time.Time, ok bool)
        Done() <-chan struct{}
        Err() error
        Value(key interface{}) interface{}
    }

Jede Funktion, die einen Context akzeptiert sollte ihre eigene Kopie des Interface Wertes erhalten.

*Ausgehende* *Aufrufe* *an* *Server* *sollten* *einen* *Context* *akzeptieren*

Das Konzept hinter dieser Semantik besteht darin, dass übergeordnete Aufrufe den untergeordneten Aufrufen 
mitteilen müssen, wie lange sie bereit sind zu warten. Ein gutes Beispiel hierfür ist das http-Paket und 
die in Version 1.7 vorgenommenen Änderungen an der Do-Methode, um Timeouts bei einer Anfrage zu berücksichtigen.

    01 package main
    02 
    03 import (
    04     "context"
    05     "io"
    06     "log"
    07     "net/http"
    08     "os"
    09     "time"
    10 )
    11 
    12 func main() {
    13
    14     // Create a new request.
    15     req, err := http.NewRequest("GET", "https://www.ardanlabs.com/blog/post/index.xml", nil)
    16     if err != nil {
    17         log.Println("ERROR:", err)
    18         return
    19     }
    20
    21     // Create a context with a timeout of 50 milliseconds.
    22     ctx, cancel := context.WithTimeout(req.Context(), 50*time.Millisecond)
    23     defer cancel()
    24
    25     // Bind the new context into the request.
    26     req = req.WithContext(ctx)
    27
    28     // Make the web call and return any error. Do will handle the
    29     // context level timeout.
    30     resp, err := http.DefaultClient.Do(req)
    31     if err != nil {
    32       log.Println("ERROR:", err)
    33       return
    34     }
    35
    36     // Close the response body on the return.
    37     defer resp.Body.Close()
    38
    39     // Write the response to stdout.
    40     io.Copy(os.Stdout, resp.Body)
    41 }

Das Programm stellt eine Anfrage an den Ardan RSS-Blog-Feed mit einem Timeout von 50 Millisekunden. In den Zeilen 15-19 wird die Anfrage erstellt, 
um einen GET-Aufruf an die bereitgestellte URL zu senden. Die Zeilen 22-23 erstellen einen Context
mit einem Timeout von 50 Millisekunden. Eine neue API, die dem Request-Wert in Version 1.7 hinzugefügt wurde, 
ist die WithContext-Methode. Diese Methode ermöglicht es, das Context-Feld des Request-Werts zu aktualisieren. 
In Zeile 26 ist genau das, was der Code tut.

In Zeile 30 wird die eigentliche Anfrage mit der Do-Methode aus dem http-Paket des DefaultClient-Werts gemacht. 
Die Do-Methode wird das Timeout von 50 Millisekunden respektieren, welches jetzt im Context innerhalb des Request-Werts gesetzt ist. 
Was man sieht ist der Code (höherstufige Funktion), welcher der Do-Methode sagt, wie lange 
wir bereit sind zu warten, bis die Do-Operation abgeschlossen ist.

*Speichert* *keine* *Contexte* *in* *einem* *Struct-Typ*

Stattdessen sollte ein Context explizit an jede Funktion übergeben werden die ihn benötigt. Im Wesentlichen sollte jede 
Funktion, die I/O ausführt einen Contextwert als ihren ersten Parameter akzeptieren und jegliche Timeout- oder 
Deadline-Konfigurationen des Aufrufers respektieren. Im Falle von Request gab es Rückwärtskompatibilitätsprobleme 
zu berücksichtigen. Daher wurde anstatt die API zu ändern, der Mechanismus aus dem letzten Abschnitt implementiert.

Es gibt Ausnahmen zu jeder Regel. Jedoch ist innerhalb des Rahmens dieses Beitrags und jeder API aus der Standardbibliothek, 
die einen Context akzeptiert das Idiom, den ersten Parameter den Contextwert akzeptieren zu lassen.

.image /tour/eng/static/img/context_figure1.png

Das Bild zeigt ein Beispiel aus dem net-Paket, bei dem der erste Parameter jeder Methode einen Context als ersten Parameter 
nimmt und das ctx-Variablennamen-Idiom verwendet.

*Die* *Kette* *von* *Funktionsaufrufen* *zwischen* *ihnen* *muss* *den* *Context* *weitergeben*

Dies ist eine wichtige Regel, da ein Context anfrage- oder aufgabenbasiert ist. Man möchte, dass der Context und alle 
Änderungen, die während der Verarbeitung der Anfrage oder Aufgabe daran vorgenommen wurden weitergegeben und 
respektiert werden.

    23 // List returns all the existing users in the system.
    24 func (u *User) List(ctx context.Context, w http.ResponseWriter, r *http.Request, params map[string]string) error {
    25     ctx, span := trace.StartSpan(ctx, "handlers.User.List")
    26     defer span.End()
    27
    28     users, err := user.List(ctx, u.db)
    29     if err != nil {
    30         return err
    31     }
    32
    33     return web.Respond(ctx, w, users, http.StatusOK)
    34 }

In diesem Listing sieht man eine Handler-Funktion namens List, die ausgeführt wird, wenn ein
Benutzer eine HTTP-Anfrage an diesen Endpunkt stellt. Der Handler akzeptiert als ersten Parameter einen 
Context, da er Teil einer Anfrage ist und I/O durchführt. Ihr könnt in den Zeilen 25, 28 und 33 sehen, 
dass derselbe Contextwert den Aufrufstapel hinunter weitergegeben wird.

Ein neuer Contextwert wird nicht erstellt, da diese Funktion keine Änderungen daran vornimmt. Würde ein neuer Top-Level-Contextwert 
von dieser Funktion erstellt werden, gingen alle bestehenden Contextinformationen von einem höherstufigen Aufruf verloren, welcher 
mit dieser Anfrage verbunden ist.

    33 // List retrieves a list of existing users from the database.
    34 func List(ctx context.Context, db *sqlx.DB) ([]User, error) {
    35     ctx, span := trace.StartSpan(ctx, "internal.user.List")
    36     defer span.End()
    37
    38     users := []User{}
    39     const q = `SELECT * FROM users`
    40
    41     if err := db.SelectContext(ctx, &users, q); err != nil {
    42         return nil, errors.Wrap(err, "selecting users")
    43     }
    44
    45     return users, nil
    46 }

Ihr seht die Deklaration der Methode List, die in Zeile 28 aufgerufen wurde. Auch diese Methode akzeptiert einen 
Context als ihren ersten Parameter. Dieser Wert wird dann erneut in den Aufrufstapel hinunter weitergegeben, 
in den Zeilen 35 und 41. Da Zeile 41 ein Datenbankaufruf ist sollte diese Funktion jegliche Timeout-Informationen 
im Context von jedem darüberliegenden Aufrufer respektieren.

*Ersetzen* *eines* *Contexts* *mit* *WithCancel,* *WithDeadline,* *WithTimeout,* *oder* *WithValue*

Da jede Funktion den Context für ihre spezifischen Bedürfnisse hinzufügen/ändern kann und diese Änderungen keine 
vor ihr aufgerufene Funktion beeinflussen sollte, verwendet der Context Wertesemantik. Das bedeutet, dass 
jede Änderung an einem Contextwert einen neuen Contextwert erzeugt, der dann weitergeleitet wird.

    01 func main() {
    02
    03     // Set a duration.
    04     duration := 150 * time.Millisecond
    05
    06     // Create a context that is both manually cancellable and will signal
    07     // cancel at the specified duration.
    08     ctx, cancel := context.WithTimeout(context.Background(), duration)
    09     defer cancel()
    10
    11     // Create a channel to receive a signal that work is done.
    12     ch := make(chan data, 1)
    13
    14     // Ask the goroutine to do some work for us.
    15     go func() {
    16
    17         // Simulate work.
    18         time.Sleep(50 * time.Millisecond)
    19
    20         // Report the work is done.
    21         ch <- data{"123"}
    22     }()
    23
    24     // Wait for the work to finish. If it takes too long, move on.
    25     select {
    26         case d := <-ch:
    27             fmt.Println("work complete", d)
    28
    29         case <-ctx.Done():
    30             fmt.Println("work cancelled")
    31     }
    32 }

Dies ist ein kleines Programm, das die Wertesemantik der WithTimeout-Funktion zeigt. In Zeile 08 gibt der Aufruf 
von WithTimeout einen neuen Contextwert und eine Abbruchfunktion zurück. Da der Funktionsaufruf einen übergeordneten 
Context benötigt, verwendet der Code die Background-Funktion um einen Top-Level-leeren Context zu erstellen. 
Dafür ist die Background-Funktion gedacht.

Im weiteren Verlauf wird der mit der Funktion WithTimeout erstellte Context-Wert verwendet. Wenn
zukünftige Funktionen in der Aufrufkette ihre eigene spezifische Zeitüberschreitung oder Frist benötigen,
sollten sie ebenfalls die entsprechende With-Funktion und diesen neuen Context-Wert als
den übergeordneten Wert verwenden.

Es ist von entscheidender Bedeutung, dass jede Abbruchfunktion, die von einer With-Funktion
zurückgegeben wird ausgeführt wird, bevor diese Funktion zurückkehrt. Aus diesem Grund ist es üblich, das Schlüsselwort defer
direkt nach dem With-Aufruf zu verwenden (Zeiele 26). Dies nicht zu tun würde Speicherlecks im Programm verursachen.

*Wenn* *ein* *Context* *abgebrochen* *wird*, *werden* *alle* *Contexte*, *die* *von* *diesem* *abgeleitet* *sind,* *auch* *abgebrochen*.

Die Verwendung von Wertsemantik für die Context-API bedeutet, dass jeder neue Contextwert alles erhält, was der 
übergeordnete Context hat, inklusive etwaiger neuer Änderungen. Wenn ein übergeordneter Context abgebrochen wird, 
werden auch alle von diesem übergeordneten Context abgeleiteten untergeordneten Contexte abgebrochen.

    01 func main() {
    02
    03     // Create a Context that can be cancelled.
    04     ctx, cancel := context.WithCancel(context.Background())
    05     defer cancel()
    06
    07     // Use the Waitgroup for orchestration.
    08     var wg sync.WaitGroup
    09     wg.Add(10)
    10
    11     // Create ten goroutines that will derive a Context from
    12     // the one created above.
    13     for i := 0; i < 10; i++ {
    14         go func(id int) {
    15             defer wg.Done()
    16
    17             // Derive a new Context for this goroutine from the Context
    18             // owned by the main function.
    19             ctx := context.WithValue(ctx, key, id)
    20
    21             // Wait until the Context is cancelled.
    22             <-ctx.Done()
    23             fmt.Println("Cancelled:", id)
    24         }(i)
    25     }
    26
    27     // Cancel the Context and any derived Context's as well.
    28     cancel()
    29     wg.Wait()
    30 }

Dieses Programm erstellt einen Contextwert, der in Zeile 04 abgebrochen werden kann. Dann werden in den Zeilen 13-25 zehn 
Goroutinen erstellt. Jede Goroutine platziert ihre eindeutige ID in ihrem eigenen Contextwert in Zeile 19. Der Aufruf 
von WithValue erhält den Contextwert der Hauptfunktion als übergeordneten Wert. Dann in Zeile 22 wartet jede Goroutine 
darauf, dass ihr Context abgebrochen wird.

In Zeile 28 bricht die Hauptgoroutine ihren Context ab und wartet dann in Zeile 29 darauf, dass alle zehn Goroutinen 
das Signal erhalten, bevor das Programm beendet wird. Sobald die Abbruchfunktion aufgerufen wird, werden alle zehn 
Goroutinen in Zeile 41 freigegeben und geben aus, dass sie abgebrochen wurden.

Dies zeigt auch, dass derselbe Context an Funktionen übergeben werden kann, die in verschiedenen Goroutinen 
ausgeführt werden. Ein Context ist sicher für die gleichzeitige Verwendung durch mehrere Goroutinen.

Gebt keinen nil-Context weiter, auch wenn eine Funktion dies zulässt. Gebt einen TODO-Context weiter, 
wenn ihre unsicher seid, welchen Context ihr verwenden sollt. Einer meiner Lieblingsteile des Context-Pakets ist 
die TODO-Funktion. Ich bin fest davon überzeugt, dass ein Programmierer immer Code entwirft. Dies unterscheidet 
sich nicht von einem Schriftsteller, der Versionen eines Artikels entwirft. Man weiss nie alles, während man 
Code schreibt, aber hoffentlich wisst ihr genug um die Dinge voranzutreiben. Am Ende gilt es selbständig Lernen, Refaktorisieren
und Testen.

Es gab viele Situationen in denen ich wusste, dass ich einen Context benötigte, aber unsicher war woher er 
kommen sollte. Ich wusste, dass ich nicht für das Erstellen des Top-Level-Contexts verantwortlich bin, daher 
kam die Verwendung der Background-Funktion nicht in Frage. Ich benötigte einen vorübergehenden Top-Level-Context, 
bis ich herausfand, woher der tatsächliche Context kommt.
In diesem Fall solltet ihr die TODO-Funktion über die Background-Funktion verwenden.

*Verwendung* *von* *Context* *Werten* *nur* *für* *anforderungsspezifische* *Daten*

Verwendet den Context nicht um optionale Parameter an Funktionen zu übergeben. Das könnte die wichtigste Semantik 
von allen sein. Verwendet den Contextwert nicht um Daten in eine Funktion zu übergeben, wenn diese Daten von der 
Funktion benötigt werden, um ihren Code erfolgreich auszuführen. Mit anderen Worten, eine Funktion sollte in der 
Lage sein ihre Logik mit einem leeren Contextwert auszuführen. In Fällen, in denen eine Funktion Informationen 
im Context erfordert, sollte das Programm fehlschlagen und das Anwendungsprogramm 
zum Herunterfahren auffordern.

Ein klassisches Beispiel für den Missbrauch der Datenübergabe in einen Funktionsaufruf über den Context sind 
Datenbankverbindungen. Als Faustregel solltet ihr dieser Reihenfolge folgen, wenn ihr Daten in eurem Programm bewegt:

Gebt die Daten als Funktionsparameter weiter. Dies ist die klarste Möglichkeit, Daten im Programm zu bewegen, 
ohne sie zu verbergen.

Gebt die Daten über den Empfänger weiter. Wenn die Funktion, welche die Daten benötigt ihre Signatur nicht ändern kann, 
verwendet eine Methode und gebt die Daten über den Empfänger weiter.

Schnelles Beispiel zur Verwendung eines Empfängers:

Anfrage-Handler sind ein klassisches Beispiel für die zweite Regel. Da eine Handler-Funktion an eine bestimmte 
Deklaration gebunden ist, kann die Signatur des Handlers nicht geändert werden.

    23 // List returns all the existing users in the system.
    24 func (u *User) List(ctx context.Context, w http.ResponseWriter, r *http.Request, params map[string]string) error {
    25     ctx, span := trace.StartSpan(ctx, "handlers.User.List")
    26     defer span.End()
    27
    28     users, err := user.List(ctx, u.db)
    29     if err != nil {
    30         return err
    31     }
    32
    33     return web.Respond(ctx, w, users, http.StatusOK)
    34 }

Hier seht ihr die List-Handler-Methode aus dem Service-Projekt. Die Signatur dieser Methoden ist an das gebunden, 
was das Web-Framework definiert hat und sie kann nicht geändert werden. Um jedoch den Geschäftsanruf in Zeile 28 
durchzuführen, wird eine Datenbankverbindung benötigt. Dieser Code findet den Verbindungspool nicht im Contextwert, 
der übergeben wird sondern im Empfänger.

    15 // User represents the User API method handler set.
    16 type User struct {
    17     db            *sqlx.DB
    18     authenticator *auth.Authenticator
    19
    20 // ADD OTHER STATE LIKE THE LOGGER AND CONFIG HERE.
    21 }

Ihr seht die Deklaration des Empfängertyps. Alles was ein Request-Handler benötigt, ist als Feld definiert. 
Dies ermöglicht es, Informationen nicht zu verbergen und es der Business-Schicht zu ermöglichen mit einem 
leeren Contextwert zu funktionieren.

    14 // API constructs an http.Handler with all application routes defined.
    15 func API(shutdown chan os.Signal, log *log.Logger, db *sqlx.DB, authenticator *auth.Authenticator) http.Handler {
    16
    ...
    26     // Register user management and authentication endpoints.
    27     u := User{
    28         db:            db,
    29         authenticator: authenticator,
    30     }
    31
    32     app.Handle("GET", "/v1/users", u.List)

Dieser Code erstellt einen Benutzerwert und bindet dann die List-Methode in die Route ein. Wie schon zuvor,
da die Signatur einer Handler-Funktion nicht geändert werden kann, ist die Verwendung eines Empfängers und 
von Methoden der nächstbeste Weg um Daten zu übergeben ohne sie zu verbergen.

*Debugging* *oder* *Trace* *Daten* *können* *sicher* *in* *einem* *Context* *übergeben* *werden*

Daten, die von einem Context-Wert gespeichert und empfangen werden können sind Debug- und Tracing-Informationen.

    23 // Values represent state for each request.
    24 type Values struct {
    25     TraceID    string
    26     Now        time.Time
    27     StatusCode int
    28 }

Hier ist die Deklaration eines Typs, der erstellt und in jedem Contextwert gespeichert wird, der für eine neue Anfrage 
erstellt wird. Die drei Felder bieten Tracing- und Debugging-Informationen für die Anfrage. Diese Informationen werden 
während des Fortschritts der Anfrage gesammelt.

    75 // Handle is our mechanism for mounting Handlers for a given HTTP verb and path
    76 // pair, this makes for really easy, convenient routing.
    77 func (a *App) Handle(verb, path string, handler Handler, mw ...Middleware) {
    78
    ...
    79     // The function to execute for each request.
    80     h := func(w http.ResponseWriter, r *http.Request, params map[string]string) {
    …
    84     // Set the context with the required values to
    85     // process the request.
    86     v := Values{
    87         TraceID: span.SpanContext().TraceID.String(),
    88         Now:     time.Now(),
    89     }
    90     ctx = context.WithValue(ctx, KeyValues, &v)

Schaut euch an wie der Typ "Values" in Zeile 86 erstellt und dann in Zeile 90 im Context gespeichert wird. 
Die Logging-Middleware benötigt die meisten dieser Informationen.

    20 // Create the handler that will be attached in the middleware chain.
    21 h := func(ctx context.Context, w http.ResponseWriter, r *http.Request, params map[string]string) error {
    ...
    25     // If the context is missing this value, request the service
    26     // to be shutdown gracefully.
    27     v, ok := ctx.Value(web.KeyValues).(*web.Values)
    28     if !ok {
    29         return web.NewShutdownError("web value missing from context")
    30     }
    ...
    34     log.Printf("%s : (%d) : %s %s -> %s (%s)",
    35         v.TraceID, v.StatusCode,
    36         r.Method, r.URL.Path,
    37         r.RemoteAddr, time.Since(v.Now),
    38     )

Die Konsequenz der Übermittlung von Informationen durch den Context wird im Code in den Zeilen 27-30 gezeigt. 
Der Code versucht die Daten aus dem Context abzurufen und zu überprüfen, ob die Daten vorhanden waren. 
Wenn die Daten nicht vorhanden sind, besteht ein erhebliches Integritätsproblem und der Dienst muss heruntergefahren 
werden. Dies wird im Dienstcode durch das Senden eines speziellen Fehlerwerts durch die Anwendung durchgeführt.

Wenn ihr Datenbankverbindungen oder Benutzerinformationen in eure Business-Schicht über einen Context übergebt 
habt ihr zwei Probleme:

-Ihr müsst die Integrität überprüfen und einen Mechanismus zum schnellen Herunterfahren des Dienstes haben.
-Das Testen und Debuggen wird viel schwieriger und komplizierter. Ihr entfernt euch von Klarheit und 
Lesbarkeit in eurem Code.

** Anmerkungen

- Eingehende Anfragen an einen Server sollten einen Context erstellen.
- Ausgehende Aufrufe an Server sollten einen Context akzeptieren.
- Die Kette von Funktionsaufrufen zwischen ihnen muss den Context weitergeben.
- Ersetzt einen Context mit WithCancel, WithDeadline, WithTimeout oder WithValue.
- Wenn ein Context abgebrochen wird, werden alle von ihm abgeleiteten Contexte ebenfalls abgebrochen.
- Speichert keine Contexte innerhalb eines Strukturtyps; übergebt stattdessen einen Context explizit an jede Funktion, die ihn benötigt.
- Übergebt keinen nil-Context, selbst wenn eine Funktion dies zulässt. Verwendet stattdessen context.TODO. Wenn ihr unsicher seid, welchen Context ihr verwenden sollt.
- Verwendet Contextwerte nur für anfragespezifische Daten, die Prozesse und APIs durchlaufen, nicht für das Übergeben optionaler Parameter an Funktionen.
- Derselbe Context kann an Funktionen übergeben werden, die in verschiedenen Goroutinen ausgeführt werden; Contexte sind sicher für die gleichzeitige Verwendung durch mehrere Goroutinen.

** Extra Lektüre

- [[https://www.ardanlabs.com/blog/2019/09/context-package-semantics-in-go.html][Contextpaket-Semantik in Go]] - William Kennedy
- [[https://golang.org/pkg/context][PaketContext]] - Go-Team
- [[https://blog.golang.org/context][Go-Gleichzeitigkeitsmuster: Context]] - Sameer Ajmani
- [[https://rakyll.org/leakingctx/][Verwendung von Contexten zur Vermeidung undichter Goroutinen]] - JBD

* Übungen

Verwendet die Vorlage als Ausgangspunkt, um die Übungen abzuschließen. Eine mögliche Lösung wird bereitgestellt.

** Übung 1

Verwendet die Vorlage und befolgt die Anweisungen. Ihr werdet einen Web-Handler schreiben, der einen simulierten 
Datenbankaufruf durchführt, aber basierend auf einem Context einen Timeout hat, wenn der Aufruf zu lange dauert. 
Ihr werdet auch den Zustand in den Context speichern.

.play context/exercise1.go
.play context/answer1.go

