Interface Pollution

Interface-Pollution entsteht dadurch, dass Menschen Software mit Interfaces entwerfen anstatt sie zu entdecken.

* Interface Pollution

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Schaut euch das Video an]]
- Braucht ihr finanzielle Unterstützung? Nutzt unser  [[https://www.ardanlabs.com/scholarship/][Stipendienformular]]

Interface-Pollution entsteht dadurch, dass Menschen Software mit Interfaces entwerfen anstatt sie zu entdecken.

** Code-Überprüfung

- *Beispiel* *1:* Erzeuge Interface-Pollution
- *Beispiel* *2:* Entferne Interface-Pollution

.play composition/pollution/example1.go
.play composition/pollution/example2.go

** Interface Pollution

Interface-Pollution entsteht dadurch, dass Menschen Software mit Interfaces entwerfen anstatt 
sie zu entdecken. Ihr solltet zuerst eine konkrete Lösung für das Problem entwerfen. 
Dann könnt ihr entdecken, wo das Programm polymorph sein muss (wenn überhaupt).

Das sind Dinge, die ich von anderen Entwicklern gehört habe.

"Ich verwende Interfaces, weil wir Interfaces verwenden müssen".

Nein. Wir müssen keine Interfaces verwenden. Wir verwenden Interfaces, wenn es praktisch und 
vernünftig ist dies zu tun. Es gibt einen Kostenfaktor bei der Verwendung von Interfaces: 
eine Ebene der Indirektion und Allokation, wenn wir konkrete Werte in ihnen speichern. 
Es sei denn der Kostenfaktor der Allokation, den ich durch Entkoppelung gewinne, ist es wert, 
solltet ihr keine Interfaces verwenden.

"Ich muss meinen Code testen können, also muss ich Interfaces verwenden".

Nein. Ihr müsst meine API zuerst für den Benutzer entwerfen, nicht für meinen Test. 
Wenn die API nicht testbar ist, solltet ihr euch fragen, ob sie überhaupt nutzbar ist. 
Es gibt auch verschiedene Ebenen von APIs. Die niedrigeren, nicht exportierten APIs können 
und sollten sich auf Testbarkeit konzentrieren. Die höheren, exportierten APIs müssen sich 
auf Benutzerfreundlichkeit konzentrieren.

Funktionen, die Rohdaten entgegennehmen und Rohdaten zurückgeben sind am besten testbar.
Trennt die Datentransformation davon, wo die Daten herkommen und wohin sie gehen. 
Dies ist eine Refactoring-Übung, die ihr während des Engineering-Coding-Zyklus durchführen müsst.

Unten ist ein Beispiel, das Interface-Pollution erzeugt indem es ein Interface unangemessen 
verwendet, wenn es nicht benötigt wird.

   type Server interface {
    Start() error
    Stop() error
    Wait() error
}

Das Server-Interface definiert einen Vertrag für TCP-Server. Das Problem ist, ich brauche 
keinen Vertrag, ich brauche eine Implementierung. Es wird auch nur eine Implementierung geben, 
besonders da ihr diejenigen seid die die Implementierung umsetzten werdet. Ihr braucht niemanden der dies 
für euch tut.

Außerdem basiert dieses Interface auf einem Substantiv und nicht auf einem Verb. 
Konkrete Typen sind Substantive, da sie das konkrete Problem repräsentieren. 
Interfaces beschreiben das Verhalten, und Server ist kein Verhalten.

Hier sind einige Möglichkeiten, Interface-Pollution zu identifizieren:

- Ein Paket deklariert ein Interface, das die gesamte API seines eigenen konkreten Typs entspricht.
- Die Interfaces werden exportiert, aber die konkreten Typen, die das Interface implementieren werden nicht exportiert.
- Die Factory-Funktion für den konkreten Typ gibt den Interface-Wert mit dem nicht exportierten konkreten Typwert im Inneren zurück.
- Das Interface kann entfernt werden, während sich für den Benutzer der API nichts ändert.
- Das Interface entkoppelt die API nicht von Veränderungen.

Richtlinien zur Interface-Pollution:

Verwendet ein Interface:

- Wenn die Nutzer der API ein Implementierungsdetail bereitstellen müssen.
- Wenn APIs mehrere Implementierungen haben, die gepflegt werden müssen.
- Wenn Teile der APIs die sich ändern können, identifiziert wurden und entkoppelt werden müssen.

Hinterfragt ein Interface:

- Wenn sein einziger Zweck darin besteht, testbare APIs zu schreiben (schreibt zuerst benutzbare APIs).
- Wenn es keine Unterstützung für die API bietet, um sich von Veränderungen zu entkoppeln.
- Wenn nicht klar ist, wie das Interface den Code besser macht.
