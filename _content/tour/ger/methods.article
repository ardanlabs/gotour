Methoden
Eine Funktion wird als Methode bezeichnet, wenn für diese Funktion ein Empfänger deklariert ist.

* Methoden

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Das Video ansehen]]
- Benötigt ihr finanzielle Unterstützung? Nutzt [[https://www.ardanlabs.com/scholarship/][Stipendienformular]]

Eine Funktion wird als Methode bezeichnet, wenn für diese Funktion ein Empfänger deklariert ist. Der
Empfänger ist der Parameter, der zwischen dem Schlüsselwort func und dem
Funktionsnamen deklariert wird.

** Code-Überprüfung

- *Beispiel* *1:* Deklarations- und Empfängerverhalten
- *Beispiel* *2:* Benannte typisierte Methoden
- *Beispiel* *3:* Funktions-/Methodenvariablen
- *Beispiel* *4:* Funktionstypen
- *Beispiel* *5:* Semantik von Werten und Zeigern

.play methods/example1.go
.play methods/example2.go
.play methods/example3.go
.play methods/example4.go
.play methods/example5.go

** Methodenerklärungen

Es gibt zwei Arten von Empfängern: Werteempfänger für die Umsetzung der Wertsemantik
und Zeigerempfänger für die Umsetzung der Zeigersemantik.

    type user struct {
        name  string
        email string
    }

    func (u user) notify() {
        fmt.Printf("Sending User Email To %s<%s>\n", u.name, u.email)
    }

    func (u *user) changeEmail(email string) {
        u.email = email
        fmt.Printf("Changed User Email To %s\n", email)
    }

Die Funktion notify ist mit einem Werteempfänger implementiert. Das bedeutet, dass die Methode
unter Wertesemantik operiert und mit ihrer eigenen Kopie des Wertes arbeitet.

Die Funktion changeEmail ist mit einem Zeigerempfänger implementiert. Das bedeutet, dass die
Methode mit Zeiger-Semantik operiert und auf den gemeinsamen Wert zugreift der auch für den Aufruf verwendet wird.

Abgesehen von einigen wenigen Ausnahmen sollte ein Methodensatz für einen Typ keine Mischung aus
Wert- und Zeigerempfängern enthalten. Die semantische Konsistenz der Daten ist von entscheidender Bedeutung
und dies gilt auch für die Deklaration von Methoden.

** Methodenaufrufe

Bei einem Methodenaufruf ist es dem Compiler egal, ob der für den Aufruf verwendete Wert
mit dem Aufruf der Datensemantik des Empfängers übereinstimmt. Der Compiler will nur
einen Wert oder Zeiger desselben Typs.

    bill := user{"Bill", "bill@email.com"}
    bill.notify()
    bill.changeEmail("bill@hotmail.com")

Wie ihr sehen könnt, wird ein Wert vom Typ user konstruiert und der Variablen bill
zugewiesen. Im Falle des notify-Aufrufs entspricht die Variable bill dem Empfängertypen
Typ, der einen Werteempfänger verwendet. Im Fall des changeEmail-Aufrufs passt die
bill-Variable nicht mit dem Empfängertypen überein, der einen Zeigerempfänger verwendet.
Der Compiler akzeptiert jedoch den Methodenaufruf und teilt die Rechnungsvariable mit
der Methode. Go passt sich an, um den Aufruf durchzuführen.

Dies funktioniert auch, wenn die für den Aufruf verwendete Variable eine Zeigervariable ist.

    bill := &user{"Bill", "bill@email.com"}
    bill.notify()
    bill.changeEmail("bill@hotmail.com")

In diesem Fall ist die Variable bill eine Zeigervariable auf einen Wert vom Typ user.
Auch hier passt sich Go an, um den Methodenaufruf beim Aufruf der notify-Methode durchzuführen.

Wenn Go sich nicht anpasst, müsst ihr die gleichen Methodenaufrufe machen.

    bill := user{"Bill", "bill@email.com"}
    (&bill).changeEmail("bill@hotmail.com")

    bill := &user{"Bill", "bill@email.com"}
    (*bill).notify()

Ich bin froh, dass man das nicht tun muss, um Methodenaufrufe in Go zu machen.

** Semantische Leitlinie für interne Datentypen

Wenn es sich bei den Daten, mit denen ihr arbeitet, um einen internen Typ handelt (Slice, Map,
Channel, Funktion, Interface), dann verwendet die Wertesemantik, um die Daten im
Programm zu bewegen. Dazu gehört auch die Deklaration von Feldern für einen Typen. Wenn ihr jedoch Lese
-und Schhreiberechte gebraucht, müsst ihr daran denken, die Zeigersemantik zu verwenden.

    type IP []byte
    type IPMask []byte

Diese Typen werden im Netzpaket deklariert, das Teil der Standardbibliothek ist.
Sie werden mit einem zugrundeliegenden Typen deklariert, der eine Slice von Bytes ist. Aus diesem Grund
folgen diese Typen den Richtlinien für interne Typen.

    func (ip IP) Mask(mask IPMask) IP {
        if len(mask) == IPv6len && len(ip) == IPv4len && allFF(mask[:12]) {
            mask = mask[12:]
        }
        if len(mask) == IPv4len && len(ip) == IPv6len &&
            bytesEqual(ip[:12], v4InV6Prefix) {
            ip = ip[12:]
        }
        n := len(ip)
        if n != len(mask) {
            return nil
        }
        out := make(IP, n)
        for i := 0; i < n; i++ {
            out[i] = ip[i] & mask[i]
        }
        return out
    }

Bei der Maskenmethode gilt die Wertsemantik sowohl für den Empfänger, den Parameter,
und das Rückgabeargument. Diese Methode nimmt ihre eigene Kopie eines Maskenwerts an, verändert
diesen Wert und gibt dann eine Kopie der Mutation zurück. Diese Methode verwendet die wertsemantische 
Mutation. Dies ist kein Zufall.

Eine Funktion kann entscheiden, welche Dateneingabe und -ausgabe sie benötigt. Was sie nicht entscheiden kann
ist die Datensemantik, wie die Daten ein- oder ausgehen. Die Daten bestimmen diese
Entscheidung und die Funktion muss sich daran halten. Aus diesem Grund implementiert Mask eine wertesemantische
Mutations-API. Sie muss berücksichtigen, wie ein Slice im Programm verschoben werden soll.

    func ipEmptyString(ip IP) string {
        if len(ip) == 0 {
            return ""
        }
        return ip.String()
    }

Die Funktion "ipEmptyString" verwendet ebenfalls die Wertesemantik für die Eingabe und Ausgabe.
Diese Funktion akzeptiert ihre eigene Kopie eines IP-Wertes und gibt einen String-Wert zurück. Keine
Verwendung der Zeigersemantik, da die Daten die Datensemantik vorgeben und nicht die
Funktion.

Eine Ausnahme von der Verwendung der Wertesemantik besteht, wenn ihr ein Slice oder eine Map mit einer Funktion teilen müssen,
die Unmarshaling oder Dekodierung durchführt.

** Datensemantische Leitlinie für Strukturtypen

Wenn es sich bei den Daten, mit denen wir arbeiten, um einen Strukturtyp handelt, müsst ihr
was die Daten betrifft eine Entscheidung treffen. Eine gute allgemeine Regel ist
zu fragen, ob die Struktur Daten oder eine API repräsentiert. Wenn die Struktur Daten repräsentiert, verwendet 
Wert-Semantik. Wenn die Struktur eine API darstellt verwendet die Zeigersemantik.

    type Time struct {
        sec  int64
        nsec int32
        loc  *Location
    }


Hier ist die Time-Struktur aus dem Time-Paket. Wenn ihr Time als Repräsentant von
Daten darstellen wollt, sollte die Wertesemantik für diese Struktur verwendet werden.

Wenn ihr euch eine bestehende Codebasis anseht und wissen wollt, welche Datensemantik gewählt wurde,
sucht nach einer Factory-Funktion. Der Rückgabetyp einer Factory-Funktion sollte
die vom Entwickler gewählte Datensemantik vorgeben.

    func Now() Time {
        sec, nsec := now()
        return Time{sec + unixToInternal, nsec, Local}
    }
Dies ist die Factory-Funktion für die Erstellung von Zeitwerten. Seht euch die Rückgabe an,
sie verwendet die Wertesemantik. Dies zeigt euch, dass ihr die Wertesemantik für Zeitwerte verwenden sollt,
was bedeutet, dass jede Funktion ihre eigene Kopie eines Zeitwerts erhält und
Felder in einer Struktur sollten als Werte vom Typ Time deklariert werden.

    func (t Time) Add(d Duration) Time {
        t.sec += int64(d / 1e9)
        nsec := int32(t.nsec) + int32(d%1e9)
        if nsec >= 1e9 {
            t.sec++
            nsec -= 1e9
        } else if nsec < 0 {
            t.sec--
            nsec += 1e9
        }
        t.nsec = nsec
        return t
    }

Add ist eine Methode, die eine Mutationsoperation durchführen muss. Wenn ihr genau hinschaut,
werdet ihr sehen, dass die Funktion die semantische Mutation von Werten verwendet. Die Add-Methode erhält ihre
eigene Kopie des Time-Werts, mutiert ihre eigene Kopie und gibt dann
eine Kopie an den Aufrufer zurück. Auch dies ist der sicherste Weg, einen
Mutationsvorgang durchzuführen.

    func div(t Zeit, d Dauer) (qmod2 int, r Dauer) {}

Hier ein weiteres Beispiel, bei dem die Funktion die einen Wert vom Typ Zeit und
Dauer (int64) akzeptiert und dann Werte vom Typ int und Dauer zurückgibt. Semantik der Werte
für den Typ Time und für alle eingebauten Typen. Dauer hat einen zugrunde liegenden Typ
von int64.

    func (t *Time) UnmarshalBinary(data []byte) error {}
    func (t *Time) GobDecode(data []byte) error {}
    func (t *Time) UnmarshalJSON(data []byte) error {}
    func (t *Time) UnmarshalText(data []byte) error {}

Diese vier Methoden aus dem Time-Paket scheinen die Regeln für die semantische Datenkonsistenz zu verletzen.
Sie verwenden Zeigersemantik, warum? Weil sie ein Interface implementieren,
bei der die Methodensignatur miteingeschlossen ist. Da die Implementierung
eine Mutation erfordert, ist die Zeigersemantik die einzige Wahl.

Hier ist ein Leitfaden: Wenn Wertesemantik im Spiel ist, könnt ihr für einige Funktionen zur Zeigersemantik wechseln,
solange ihr die Daten in der verbleibenden Aufrufkette nicht zurück zur Wertesemantik wechselt. Sobald ihr zur Zeigersemantik wechselt,
müssen alle zukünftigen Aufrufe von diesem Punkt an die Zeigersemantik beibehalten. Ihr könnt niemals von Zeigern zu Werten wechseln.
Es ist niemals sicher, eine Kopie eines Wertes zu erstellen, auf den ein Zeiger zeigt.

    func Open(name string) (file *File, err error) {
        return OpenFile(name, O_RDONLY, 0)
    }

Die Funktion Open aus dem os-Paket zeigt, dass bei der Verwendung eines Wertes vom Typ File,
Zeiger-Semantik im Spiel ist. Dateiwerte müssen gemeinsam genutzt werden und sollten niemals
kopiert werden.

    func (f *File) Chdir() error {
        if f == nil {
            return ErrInvalid
        }
        if e := syscall.Fchdir(f.fd); e != nil {
            return &PathError{"chdir", f.name, e}
        }
        return nil
    }


Die Methode Chdir verwendet einen Zeigerempfänger, obwohl diese Methode den
den File-Wert nicht verändert. Dies liegt daran, dass File-Werte gemeinsam genutzt werden müssen und nicht
kopiert werden können.

    func epipecheck(file *File, e error) {
        if e == syscall.EPIPE {
            if atomic.AddInt32(&file.nepipe, 1) >= 10 {
                sigpipe()
            }
        } else {
            atomic.StoreInt32(&file.nepipe, 0)
        }
    }

Auch die Funktion epipecheck akzeptiert File-Werte in Zeiger-Semantik.

** Methoden sind nur Funktionen

Methoden sind eigentlich nur Funktionen, die syntaktischen Zucker bieten, um 
Daten die Möglichkeit zu geben, Verhalten zu zeigen.

    type data struct {
        name string
        age  int
    }

    func (d data) displayName() {
        fmt.Println("My Name Is", d.name)
    }

    func (d *data) setAge(age int) {
        d.age = age
        fmt.Println(d.name, "Is Age", d.age)
    }

Es werden ein Typ und zwei Methoden deklariert. Die Methode displayName verwendet die Wert
Semantik und setAge verwendet die Zeiger-Semantik.

Hinweis: Implementiert keine Setter und Getter in Go. Dies sind keine Apis die einen Sinn und Zweck haben.
In solchen Fällen ist es besser, die entsprechenden Felder zu exportieren.
    
    d := data{
        name: "Bill",
    }

    d.displayName()
    d.setAge(21)

Ein Wert vom Typ Daten wird konstruiert und Methodenaufrufe werden durchgeführt.

    data.displayName(d)
    (*data).setAge(&d, 21)

Da Methoden eigentlich nur Funktionen mit syntaktischem Zucker sind, können die Methoden
wie Funktionen ausgeführt werden. Wie ihr sehen könnt, ist der Empfänger wirklich ein Parameter, er ist
der erste Parameter. Wenn ihr eine Methode aufruft, wandelt der Compiler dies in einen
Funktionsaufruf um.

Hinweis: Führt solche Methoden nicht aus, aber ihr könnt diese Syntax in Tooling-Meldungen sehen.

** Das Verhalten des Codes kennen

Wenn ihr die Semantik der Daten kennt, wisst ihr auch, wie sich der Code verhält. Wenn
ihr das Verhalten des Codes kennt, dann kennt ihr auch die Kosten des Codes. Sobald ihr 
die Kosten kennt, seid ihr der Ingenieur.

Mit diesem Typ und Methodensatz.

    type data struct {
        name string
        age  int
    }

    func (d data) displayName() {
        fmt.Println("My Name Is", d.name)
    }

    func (d *data) setAge(age int) {
        d.age = age
        fmt.Println(d.name, "Is Age", d.age)
    }

Ihr könnt den folgenden Code schreiben.

    func main() {
        d := data{
            name: "Bill",
        }

        f1 := d.displayName
        f1()
        d.name = "Joan"
        f1()
    }

Ausgabe:

    My Name Is Bill
    My Name Is Bill

Ihr beginnt mit der Konstruktion eines Wertes vom Typ Data und weist ihn der Variablen d zu.
Dann nehmt ihr die Methode displayName, die an d gebunden ist, und weist diese einer Variablen
namens f1 zu. Dies ist kein Methodenaufruf, sondern eine Zuweisung,die eine Ebene der Umleitung schafft.
Funktionen sind Werte in Go und gehören zur Menge der internen Typen.

Nach der Zuweisung könnt ihr die Methode indirekt durch die Verwendung der
f1-Variable aufrufen. Dadurch wird der Name Bill angezeigt. Dann ändert die Daten so, dass der Name
Joan ist, und ruft die Methode erneut über die Variable f1 auf. Ihr seht die Änderung nicht?
Bill ist wieder die Ausgabe. Warum?

.image /tour/eng/static/img/m1.png

Es hat mit der Semantik der Daten zu tun. Die Methode displayName verwendet einen
Wertempfänger, so dass Wertesemantik im Spiel ist.

    func (d data) displayName() {
        fmt.Println("My Name Is", d.name)
    }

Das bedeutet, dass die Variable f1 ihre eigene Kopie von d verwaltet und mit ihr arbeitet.
Beim Aufruf der Methode über die Variable f1 wird also immer die Kopie verwendet, und diese
Kopie ist gegen Änderungen geschützt. Das ist es, was ihr mit der Wertesemantik wollt.

Jetzt werdet ihr dasselbe tun, aber mit der Methode setAge.

    func main() {
        d := data{
            name: "Bill",
        }

        f2 := d.setAge
        f2(45)
        d.name = "Sammy"
        f2(45)
    }

Ausgabe:

    Bill Is Age 45
    Sammy Is Age 45

Diesmal wird die Methode setAge der Variablen f2 zugewiesen. Auch hier wird die
Methode indirekt über die Variable f2 ausgeführt, wobei 45 als Bills Alter übergeben wird.
Dann wird Bills Name in Sammy geändert und die Variable f2 wird erneut aufgerufen.
Diesmal hat sich der Name geändert.

.image /tour/eng/static/img/m2.png

Die Funktion setAge verwendet einen Zeigerempfänger, so dass setAge nicht auf seine
eigene Kopie der Variable d arbeitet, sondern direkt auf der Variablen d. Daher operiert
f2 auf den gemeinsamen Zugriff und ihr seht die Änderung.

    func (d *data) setAge(age int) {
        d.age = age
        fmt.Println(d.name, "Is Age", d.age)
    }


Ohne die Semantik der Daten zu kennen, könnt ihr das Verhalten des Codes nicht einschätzen.
Diese Datensemantiken sind real und beeinflussen das Verhalten.

** Anmerkungen

- Methoden sind Funktionen, die eine Empfängervariable deklarieren.
- Empfänger binden eine Methode an einen Typ und können Wert- oder Zeigersemantiken verwenden.
- Wertesemantik bedeutet, dass eine Kopie des Wertes über Programmgrenzen hinweg übergeben wird.
- Zeigersemantik bedeutet, dass eine Kopie der Adresse des Wertes über Programmgrenzen hinweg weitergegeben wird.
- Haltet euch an eine einzige Semantik für einen bestimmten Typ und seid diesbezüglich konsistent.

** Zitate

"Methoden sind gültig, wenn es praktisch oder vernünftig ist, dass ein Teil der Daten eine Fähigkeit aufzeigt." - William Kennedy

** Zusatzlektüre

- [[https://golang.org/doc/effective_go.html#methods][Methoden]]
- [[https://www.ardanlabs.com/blog/2014/05/methods-interfaces-and-embedded-types.html][Methoden, interfaces und eingebettete Typen in Go]] - William Kennedy
- [[https://www.ardanlabs.com/blog/2018/01/escape-analysis-flaws.html][Fehler bei der Escape-Analyse]] - William Kennedy
		 
* Übungen

Verwendet die Vorlage als Ausgangspunkt, um die Aufgaben zu lösen. Eine mögliche Lösung ist angegeben.

** Übung 1

Deklariert eine Struktur, die einen Baseballspieler darstellt. Enthält Name, atBats und Hits.
Deklariert eine Methode, die den Schlagdurchschnitt eines Spielers berechnet. Die Formel ist Hits / AtBats.
Deklariert einen Slice dieses Typs und initialisiert den Slice mit mehreren Spielern. Iteriert
über den Slice und zeigt den Namen und den Schlagdurchschnitt der Spieler an.

.play methods/exercise1.go
.play methods/answer1.go
