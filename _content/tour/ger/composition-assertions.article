Typumwandlungen und Zusicherungen (Assertionen)
Lernt, wie Typumwandlungen und Zusicherungen funktionieren.

* Typumwandlungen und Zusicherungen (Assertionen)

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Schaut euch das Video an]]
- Braucht Ihr finanzielle Unterstützung? Nutzt unser  [[https://www.ardanlabs.com/scholarship/][Stipendienformular]]

Eine Typumwandlung ermöglicht es, Daten eines Typs in einen anderen Typ umzuwandeln. 
Eine Typzusicherung erlaubt euch zu fragen, ob ein Wert des gegebenen Typs in einer 
Schnittstelle (Interface) gespeichert ist.

** Code-Überprüfung

- *Beispiel* *1:* Schnittstellen-Umwandlungen
- *Beispiel* *2:* Laufzeit-Typzusicherungen
- *Beispiel* *3:* Verhaltensänderungen

.play composition/assertions/example1.go
.play composition/assertions/example2.go
.play composition/assertions/example3.go

** Implizite Schnittstellen-Umwandlungen

Wie ihr im letzten Beispiel gesehen habt, kann ein Schnittstellenwert 
eines Typs für einen anderen Schnittstellentyp verwendet werden, 
wenn der konkret gespeicherte Wert beide Verhaltensweisen implementiert. 
Dies könnte als implizite Schnittstellen-Umwandlung betrachtet werden, 
aber es ist besser, darüber nachzudenken, wie konkrete Daten durch 
Schnittstellen in einem entkoppelten Zustand bewegt werden.

    type Mover interface {
    Move()
}

type Locker interface {
    Lock()
    Unlock()
}

type MoveLocker interface {
    Mover
    Locker
}

Bei diesen drei Schnittstellen ist MoveLocker die Zusammensetzung von Mover und Locker.

    type bike struct{}

    func (bike) Move() {
        fmt.Println("Moving the bike")
    }

    func (bike) Lock() {
        fmt.Println("Locking the bike")
    }

    func (bike) Unlock() {
        fmt.Println("Unlocking the bike")
    }

Und dann gibt es diesen konkreten Typ bike, der alle drei Schnittstellen implementiert. 
Was könnt ihr tun?

    var ml MoveLocker
    var m Mover

Ihr könnt einen Wert des Typs MoveLocker und Mover in ihren Nullwert-Zuständen konstruieren.
Das sind Schnittstellenwerte, die wirklich wertlos sind.

    ml = bike{}

Dann könnt Ihr einen Wert des Typs bike in seinem Nullwert-Zustand konstruieren und eine
Kopie der Variablen MoveLocker ml zuweisen. Das ist möglich, weil ein Fahrrad alle drei
Verhaltensweisen implementiert und der Compiler erkennen kann, dass die Implementierung existiert.

    m = ml

Ihr könnt dann die MoveLocker-Variable ml der Mover-Variable m zuweisen. Das ist möglich,
weil ihr nicht den Schnittstellenwert ml, sondern den konkret gespeicherten Wert in ml zuweist,
der ein Fahrradwert ist. Der Compiler weiß, dass jeder konkrete Wert, der in ml gespeichert ist,
auch die Mover-Schnittstelle implementieren muss.

Diese Zuweisung ist jedoch nicht gültig.

    ml = m

Ausgabe:

    cannot use m (type Mover) as type MoveLocker in assignment:
        Mover does not implement MoveLocker (missing Lock method)

Ihr könnt die Mover-Variable m nicht der MoveLocker-Variablen ml zuweisen, weil der Compiler
nur garantieren kann, dass der konkrete Wert, der in m gespeichert ist, weiß, wie man sich bewegt.
Es ist zum Kompilierungszeitpunkt nicht bekannt, ob der konkrete Wert auch weiß, 
wie man abschließt und aufschließt.

** Mechanik der Typzusicherung

Eine Typzusicherung ermöglicht es euch zur Laufzeit zu fragen, ob ein Wert des
gegebenen Typs in einer Schnittstelle gespeichert ist. Ihr seht das an der Syntax m.(bike).

    b := m.(bike)
    ml = b

GPT
Typumwandlungen und Zusicherungen
Lernt, wie Typumwandlungen und Zusicherungen funktionieren.

Typumwandlungen und Zusicherungen
Eine Typumwandlung ermöglicht es, Daten eines Typs in einen anderen Typ umzuwandeln. Eine Typzusicherung erlaubt euch zu fragen, ob ein Wert des gegebenen Typs in einer Schnittstelle (Interface) gespeichert ist.
** Code-Überprüfung

Beispiel 1: Schnittstellen-Umwandlungen
Beispiel 2: Laufzeit-Typzusicherungen
Beispiel 3: Verhaltensänderungen
.play composition/assertions/example1.go
.play composition/assertions/example2.go
.play composition/assertions/example3.go

** Implizite Schnittstellen-Umwandlungen

Wie ihr im letzten Beispiel gesehen habt, kann ein Schnittstellenwert eines Typs für einen anderen Schnittstellentyp verwendet werden, wenn der konkret gespeicherte Wert beide Verhaltensweisen implementiert. Dies könnte als implizite Schnittstellen-Umwandlung betrachtet werden, aber es ist besser, darüber nachzudenken, wie konkrete Daten durch Schnittstellen in einem entkoppelten Zustand bewegt werden.

go
Copy code
type Mover interface {
    Move()
}

type Locker interface {
    Lock()
    Unlock()
}

type MoveLocker interface {
    Mover
    Locker
}
Angenommen diese drei Schnittstellen, wobei MoveLocker eine Zusammensetzung von Mover und Locker ist.

scss
Copy code
type bike struct{}

func (bike) Move() {
    fmt.Println("Das Fahrrad bewegen")
}

func (bike) Lock() {
    fmt.Println("Das Fahrrad abschließen")
}

func (bike) Unlock() {
    fmt.Println("Das Fahrrad aufschließen")
}
Und angenommen dieser konkrete Typ bike, der alle drei Schnittstellen implementiert. Was könnt ihr tun?

csharp
Copy code
var ml MoveLocker
var m Mover
Ihr könnt einen Wert des Typs MoveLocker und Mover in ihren Nullwert-Zuständen konstruieren.
Das sind Schnittstellenwerte, die wirklich wertlos sind.

makefile
Copy code
ml = bike{}
Dann könnt ihr einen Wert des Typs bike in seinem Nullwert-Zustand konstruieren und eine
Kopie der Variablen MoveLocker ml zuweisen. Das ist möglich, weil ein Fahrrad alle drei
Verhaltensweisen implementiert und der Compiler erkennen kann, dass die Implementierung existiert.

makefile
Copy code
m = ml
Ihr könnt dann die MoveLocker-Variable ml der Mover-Variable m zuweisen. Das ist möglich,
weil ihr nicht den Schnittstellenwert ml, sondern den konkret gespeicherten Wert in ml zuweist,
der ein Fahrradwert ist. Der Compiler weiß, dass jeder konkrete Wert, der in ml gespeichert ist,
auch die Mover-Schnittstelle implementieren muss.

Diese Zuweisung ist jedoch nicht gültig.

makefile
Copy code
ml = m
Ausgabe:

rust
Copy code
cannot use m (type Mover) as type MoveLocker in assignment:
    Mover does not implement MoveLocker (missing Lock method)
Ihr könnt die Mover-Variable m nicht der MoveLocker-Variablen ml zuweisen, weil der Compiler
nur garantieren kann, dass der konkrete Wert, der in m gespeichert ist, weiß, wie man sich bewegt.
Es ist zum Kompilierungszeitpunkt nicht bekannt, ob der konkrete Wert auch weiß, wie man abschließt und aufschließt.

** Mechanik der Typzusicherung

Eine Typzusicherung ermöglicht es euch zur Laufzeit zu fragen, ob ein Wert des
gegebenen Typs in einer Schnittstelle gespeichert ist. Ihr seht das an der Syntax m.(bike).

makefile
Copy code
b := m.(bike)
ml = b
In diesem Fall fragt ihr, ob im Moment der Codeausführung ein Fahrradwert in m gespeichert ist.
Wenn ja, dann wird der Variablen b eine Kopie des in m gespeicherten Fahrradwerts zugewiesen.
Dann kann die Kopie in die Schnittstellenvariable ml kopiert werden.

Wenn kein Fahrradwert in der Schnittstellenvariablen gespeichert ist, gerät das Programm in Panik. 
Das ist gewünscht, wenn definitiv ein Fahrradwert gespeichert sein sollte. 
Aber was, wenn es möglich ist, dass kein Fahrradwert gespeichert ist und das gültig ist? 
Dann benötigt ihr die zweite Form der Typzusicherung.

    b, ok := m.(bike)

In dieser Form, wenn ok wahr ist, ist ein Fahrradwert in der Schnittstelle gespeichert. 
Wenn ok falsch ist, dann ist kein Fahrradwert gespeichert, und das Programm gerät nicht in Panik. 
Die Variable b ist jedoch immer noch vom Typ bike, aber sie wird auf ihren Nullwert-Zustand gesetzt.

    func main() {
    mvs := []fmt.Stringer{
        Car{},
        Cloud{},
    }

    for i := 0; i < 10; i++ {
        rn := rand.Intn(2)

        if v, is := mvs[rn].(Cloud); is {
            fmt.Println("Glück gehabt:", v)
            continue
        }

        fmt.Println("Pech gehabt")
    }
}

Unter der Annahme, dass das Programm zwei Typen namens Car und Cloud deklariert, 
die beide das fmt.Stringer-Interface implementieren, könnt Ihr eine Sammlung konstruieren, 
die es euch erlaubt, sowohl einen Wert von Car als auch von Cloud zu speichern. 
Dann wählt ihr 10 Mal zufällig eine Zahl von 0 bis 1 aus und führt eine 
Typzusicherung durch, um zu sehen, ob der Wert am zufälligen Index einen Cloud-Wert enthält. 
Da es möglich ist, dass es nicht vom Typ Cloud ist, ist die zweite Form der 
Typzusicherung hier entscheidend.
