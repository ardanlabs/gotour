Interfaces
Interfaces geben Programmen Struktur und fördern die Gestaltung durch Komposition.

* Interfaces

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Das Video ansehen]]
- Benötigt ihr finanzielle Unterstützung? Nutzt [[https://www.ardanlabs.com/scholarship/][Stipendienformular]]

Interfaces geben Programmen Struktur und fördern die Gestaltung durch Komposition. Sie ermöglichen
und erzwingen saubere Trennungen zwischen Komponenten. Die Standardisierung von Interfaces 
kann klare und konsistente Erwartungen setzen. Entkopplung bedeutet die Reduzierung der Abhängigkeiten
zwischen Komponenten und den von ihnen verwendeten Typen. Dies führt zu Korrektheit, Qualität und
Wartbarkeit.

** Code-Überprüfung

- *Beispiel* *1:* sich wiederholender Code, der Polymorphismus benötigt
- *Beispiel* *2:* Polymorphismus
- *Beispiel* *3:* Methodensätze
- *Beispiel* *4:* Adresse des Wertes
- *Beispiel* *5:* Speicherung nach Wert
- *Beispiel* *6:* Typ-Assertionen
- *Beispiel* *7:* Bedingte Typ-Assertionen
- *Beispiel* *8:* Die leeren Interface und Typschalter
- *Beispiel* *9:* Speichern von Werten

.play interfaces/example1.go
.play interfaces/example2.go
.play interfaces/example3.go
.play interfaces/example4.go
.play interfaces/example5.go
.play interfaces/example6.go
.play interfaces/example7.go
.play interfaces/example8.go
.play interfaces/example9.go


** Semantik von Interfaces 

Mit Hilfe von Interfaces könnt ihr konkrete Daten nach ihren Funktionen gruppieren.
Es geht darum, sich darauf zu konzentrieren, was Daten tun können und nicht darauf, was die Daten sind. Interfaces
helfen dem Code auch sich von Änderungen zu entkoppeln, indem konkret Daten angefragt werden, 
was diese tun können. Ihr seid nicht auf eine bestimmte Art von Daten beschränkt.

Man muss sein Bestes tun, um zu verstehen welche Datenänderungen anstehen, und dabei Interfaces verwenden
um mein Programm von diesen Änderungen zu entkoppeln. Interfaces sollten Verhalten beschreiben und
nicht den Zustand. Sie sollten aus Verben und keinen Substantiven bestehen.

Am besten sind verallgemeinerte Interfaces, die sich auf das Verhalten konzentrieren. Interfaces mit mehr als
einer Methode haben mehr als einen Grund sich zu ändern. Interfaces die auf Substantiven beruhen,
sind tendenziell weniger wiederverwendbar, anfälliger für Änderungen und verfehlen ihren Zweck. Ungewissheit über Änderungen ist kein Freibrief für Vermutungen, sondern eine Anweisung
zu STOPPEN und mehr zu lernen. Man muss unterscheiden zwischen Code, der vor Betrug schützt
und Code der vor Unfällen schützt.

Verwendet ein Interface, wenn:

- Die Nutzer der API ein Detail der Implementierung angeben müssen.
- APIs über mehrere Implementierungen verfügen, die sie intern pflegen müssen.
- Teile der API, die sich ändern können, identifiziert wurden und entkoppelt werden müssen.

Verwendet keine Interface:
    
- Bloss um ein Interface zu verwenden.
- Um einen Algorithmus zu verallgemeinern.
- Damit Benutzer ihre eigenen Interfaces deklarieren können.
- Wenn es nicht klar ist, wie die Interface den Code verbessert.

** Interfaces sind ohne Wert

Zunächst ist es wichtig zu verstehen, dass ein Interfacestyp einen wertfreien Typ deklariert.

    type reader interface {
        read(b []byte) (int, error)
    }

Der Typ reader ist kein struct-Typ, sondern ein Interfacestyp. Seine Deklaration ist nicht
auf dem Zustand, sondern auf dem Verhalten. Interfacestypen deklarieren einen Methodensatz des Verhaltens
die konkrete Daten aufweisen müssen, um das Interface zu erfüllen. Es gibt nichts
Konkretes über Interfacestypen, daher sind sie ohne Wert.

    var r reader 

Da sie ohne Wert sind, ist die Konstruktion einer Variablen (wie r) merkwürdig, denn
in unserem Programmiermodell existiert r nicht, es ist wertlos. Es gibt nichts an
r selbst, das man manipulieren oder transformieren kann. Dies ist ein wichtiges Konzept, das man verstehen muss.
Ich arbeite nie mit Interfacewerten, sondern nur mit konkreten Werten. Ein Interface hat eine
Compiler-Darstellung (interner Typ), aber nach unserem Programmiermodell sind Interfaces
ohne Wert.

** Implementierung von Interfaces

Go ist eine Sprache in der Konvention vor Konfiguration geht. Wenn es sich um einen
konkreten Typ der eine Interface implementiert handelt, gibt es keine Ausnahme.

    type reader interface {
        read(b []byte) (int, error)
    }

    type file struct {
        name string
    }

    func (file) read(b []byte) (int, error) {
        s := "<rss><channel><title>Going Go</title></channel></rss>"
        copy(b, s)
        return len(s), nil
    }

Der Code deklariert einen Typ namens file und dann eine Methode namens read. Aufgrund 
dieser beiden Deklarationen kann man folgendes sagen:

"Die konkrete Typdatei implementiert nun das Reader-Interface unter Verwendung der Wertesemantik"

Jedes Wort, das gesagt wird, ist wichtig. In Go müsst ihr nur den gesamten Methodensatz des Verhaltens deklarieren,
der durch ein Interface definiert wird, um dieses Interface zu implementieren. In diesem Fall habe ich
genau das getan, da das Reader-Interface nur einen einzigen Verhaltensakt namens read deklariert.

    type reader interface {
        read(b []byte) (int, error)
    }

    type pipe struct {
        name string
    }

    func (pipe) read(b []byte) (int, error) {
        s := `{name: "Bill", title: "developer"}`
        copy(b, s)
        return len(s), nil
    }

In diesem Code wird ein Typ namens pipe deklariert und dann eine Methode namens read. Aufgrund dieser beiden Deklarationen kann man sagen: 

"Der konkrete Typ Pipe implementiert jetzt das Interface mit Wertesemantik".

Jetzt haben wir zwei konkrete Typen, welche das Reader-Interface implementieren. Zwei konkrete Typen
jeder mit seiner eigenen Implementierung. Ein Typ liest Dateisysteme und der andere
Netzwerke.

** Polymorphismus

Polymorphismus bedeutet, dass ein Teil des Codes sein Verhalten in Abhängigkeit von den konkreten
Daten ändert, mit denen er arbeitet. Dies wurde von Tom Kurtz, dem Erfinder von BASIC, gesagt. Diese
ist die Definition, die wir im Folgenden verwenden werden.

    // retrieve can read any device and process the data.
    func retrieve(r reader) error {
        data := make([]byte, 100)

        len, err := r.read(data)
        if err != nil {
            return err
        }

        fmt.Println(string(data[:len]))
        return nil
    }

Schaut Euch den Datentyp an, den diese Funktion akzeptiert. Sie möchte einen Wert vom Typ reader.
Das ist unmöglich, da reader ein Interface ist und Interfaces wertlose Typen sind.
Sie kann nicht nach einem Wert des Typs "reader" fragen, denn es gibt ihn nicht.

Wenn die Funktion nicht nach einem Leserwert fragt, wonach fragt die Funktion
dann? Sie fragt nach dem Einzigen, wonach sie fragen kann, nämlich nach konkreten Daten.

Die Funktion retrieve ist eine polymorphe Funktion, denn sie fragt nach konkreten Daten und nicht nach der Grundlage dessen, was die Daten sind (konkreter Typ), 
sondern nach der Grundlage dessen, was die Daten tun können (Interfacestyp).

    f := file{"data.json"}
    p := pipe{"cfg_service"}

    retrieve(f)
    retrieve(p)

Ihr könnt zwei konkrete Werte konstruieren, einen vom Typ file und einen vom Typ pipe. Dann
könnt ihr eine Kopie jedes Wertes an die polymorphe Funktion übergeben. Dies ist möglich, weil jeder
dieser Werte den gesamten Methodensatz des durch das Reader-Interface definierten Verhaltens implementiert.

Wenn der Wert des konkreten Typ file an retrieve übergeben wird, wird der Wert in einem
zwei Worte umfassenden internen Typ gespeichert, der den Interface-Wert darstellt.

.image /tour/eng/static/img/i1.png

Das zweite Wort des Interface-Wertes verweist auf den zu speichernden Wert. In diesem
Fall handelt es sich um eine Kopie des Dateiwertes, da die Semantik des Wertes eine Rolle spielt. Das erste
Wort verweist auf eine spezielle Datenstruktur, die iTable genannt wird.

Die iTable dient 2 Zwecken:

- Sie beschreibt den Typ des gespeicherten Wertes. In meinem Fall ist es ein Dateiwert.
- Sie bietet Funktionszeiger auf die konkreten Implementierungen der Methode, die für den Typ des gespeicherten Wertes festgelegt wurde.

Wenn der Leseaufruf gegen den Interfaceswert erfolgt, wird ein iTable Lookup durchgeführt
um die konkrete Implementierung der Lesemethode zu finden, die mit dem Typ verbunden ist.
Dann wird der Methodenaufruf mit dem im zweiten Wort gespeicherten Wert durchgeführt.

Man kann sagen, dass retrieve eine polymorphe Funktion ist, weil der konkrete Wert pipe an retrieve übergeben werden kann
und der Aufruf zum Lesen gegen den Interfaceswert nun
dessen Verhalten ändert. Diesmal liest der Leseaufruf ein Netzwerk statt des Typs file.

** Methodensatzregeln

Bei der Implementierung eines Interface mit Zeigersemantik gelten einige Einschränkungen für die
Einhaltung des Interfaces.

    type notifier interface {
        notify()
    }

    type user struct {
        name  string
        email string
    }

    func (u *user) notify() {
        fmt.Printf("Sending User Email To %s<%s>\n", u.name, u.email)
    }

    func sendNotification(n notifier) {
        n.notify()
    }

    func main() {
        u := user{"Bill", "bill@email.com"}
        sendNotification(u)
    }

Das Interface des Notifiers wird durch den Benutzertyp unter Verwendung der Zeigersemantik implementiert.
Wenn die Wertesemantik für den polymorphen Aufruf verwendet wird, wird die folgende Compiler
Meldung erzeugt.

    "cannot use u (type user) as type notifier in argument to sendNotification:
    user does not implement notifier (notify method has pointer receiver)"

Dies liegt daran, dass es in der Spezifikation einen speziellen Satz von Regeln für Methoden
Sätze gibt. Diese Regeln definieren, welche Methoden mit Werten und Zeigern eines Typs verbunden sind.
Sie dienen dazu, ein Höchstmaß an Integrität in einem Programm zu gewährleisten.

Dies sind die in der Spezifikation festgelegten Regeln:

- Zu einem beliebigen Wert vom Typ T gehören nur die Methoden, die mit einem Werteempfänger für diesen Typ implementiert sind.
- Zu einer  beliebigen Adresse vom Typ T gehören alle Methoden, die für diesen Typ implementiert sind
      
Mit anderen Worten: Wenn ihr mit einer Adresse (Zeiger) arbeitet, sind alle implementierten Methoden
zugeordnet und können aufgerufen werden. Bei der Arbeit mit einem Wert sind nur die Methoden
die mit Wertempfängern implementiert sind angehängt und können aufgerufen werden.

In der vorangegangenen Lektion über Methoden konntet ihr eine Methode gegen 
ein konkretes Datenelement aufrufen, unabhängig von der vom Empfänger deklarierten Datensemantik.
Das liegt daran, dass der Compiler den Aufruf anpassen kann. In diesem Fall wird ein Wert
innerhalb eines Interfaces gespeichert während die Methoden existieren müssen. Es können keine Anpassungen
vorgenommen werden.

Nun stellt sich die Frage: Warum können Methoden, die mit Zeigerempfängern implementiert werden, nicht
an Werte des Typs T angehängt werden? Wo liegt hier das Problem der Integrität?

Ein Grund dafür ist, dass man nicht garantieren kann, dass jeder Wert vom Typ T adressierbar ist.
Wenn ein Wert keine Adresse hat, kann er nicht weitergegeben werden.

    type duration int

    func (d *duration) notify() {
            fmt.Println("Sending Notification in", *d)
    }

    func main() {
        duration(42).notify()
    }

Compiler-Fehler:

    cannot call pointer method on duration(42)
    cannot take the address of duration(42)

In diesem Beispiel ist der Wert von 42 eine Konstante vom Typ int. Auch wenn der Wert
in einen Wert des Typs duration umgewandelt wird, wird er nicht in einer Variablen gespeichert.
Das bedeutet, dass sich der Wert niemals auf dem Stack oder Heap befindet. Es gibt keine Adresse. Konstanten
leben nur zur Kompilierzeit.

Der zweite Grund ist der wichtigere Grund. Der Compiler sagt Ihnen, dass ihr keine
Wertesemantik verwenden dürft, wenn ihr euch für die Zeigersemantik entschieden habt. 
Mit anderen Worten: ihr seid gezwungen, den Wert mit dem Interface zu teilen, da es nicht
sicher ist eine Kopie eines Wertes zu erstellen, auf den ein Zeiger zeigt. Wenn ihr euch für die Implementierung
Methode mit Zeigersemantik entscheidet, gebt damit an, dass ein Wert dieses Typs nicht
sicher kopiert werden kann.

    func main() {
        u := user{"Bill", "bill@email.com"}
        sendNotification(&u)
    }

Um die Compiler-Meldung zu beheben, müsst ihr die Zeigersemantik beim Aufruf der
polymorphen Funktion verwenden und u freigeben. Es ist keine Lösung die Methode zu ändern, um die
Wert-Semantik zu verwenden.

** Slice of Interface

Wenn ihr ein Slice eines Interfacestyps deklariert, kann ich verschiedene
konkrete Werte auf der Grundlage ihrer Fähigkeiten zusammenzufassen. Aus diesem Grund benutzt Go nicht
das Konzept der Untertypisierung. Es geht nicht um eine gemeinsame DNA, es geht um ein gemeinsames Verhalten.

    type printer interface {
        print()
    }

    type canon struct {
        name string
    }

    func (c canon) print() {
        fmt.Printf("Printer Name: %s\n", c.name)
    }

    type epson struct {
        name string
    }

    func (e *epson) print() {
        fmt.Printf("Printer Name: %s\n", e.name)
    }

    func main() {
        c := canon{"PIXMA TR4520"}
        e := epson{"WorkForce Pro WF-3720"}

        printers := []printer{
            c,
            &e,
        }
        c.name = "PROGRAF PRO-1000"
        e.name = "Home XP-4100"

        for _, p := range printers {
            p.print()
        }
    }

Ausgabe:

    Printer Name: PIXMA TR4520
    Printer Name: Home XP-4100

Der Code zeigt, wie ein Slice des Interfacestyps printer es mir ermöglicht, eine
Sammlung verschiedener konkreter Druckertypen zu erstellen. Durch Iteration über die Sammlung und
Nutzung der Polymorphie, da der Aufruf von p.print sein Verhalten
je nach dem konkreten Wert, mit dem der Code arbeitet ändert.

Das Beispiel zeigt auch, wie die Wahl der Datensemantik das Verhalten des
Programms verändert. Wenn die Daten mit der Wertesemantik gespeichert werden, wird die Änderung des ursprünglichen
Wertes nicht gesehen. Dies liegt daran, dass eine Kopie innerhalb des Interface gespeichert wird. Bei der 
Zeigersemantik werden alle Änderungen am Originalwert sichtbar.

** Anmerkungen

- Der Methodensatz für einen Wert enthält nur Methoden, die mit einem Werteempfänger implementiert sind.
- Der Methodensatz für einen Zeiger enthält Methoden, die sowohl mit Zeiger- als auch mit Werteempfängern implementiert sind.
- Methoden, die mit einem Zeigerempfänger deklariert sind, implementieren die Interface nur mit Zeigerwerten.
- Methoden, die mit einem Werteempfänger deklariert sind, implementieren das Interface sowohl mit einem Werte- als auch mit einem Zeigerempfänger.
- Die Regeln für Methodensätze gelten für Interfacetypen.
- Interfaces sind Referenztypen, die nicht mit einem Zeiger geteilt werden können.
- So erzeugen wir polymorphes Verhalten in Go.

** Zitate

"Polymorphismus bedeutet, dass man ein bestimmtes Programm schreibt und dass es sich je nach den Daten, mit denen es arbeitet, unterschiedlich verhält." - Tom Kurtz (Erfinder von BASIC)

"Das leere Interface sagt nichts aus." - Rob Pike

"Design ist die Kunst, Code so zu gestalten, der heute funktioniert und für immer veränderbar ist." - Sandi Metz

"Eine gute Abstraktion entkoppelt den Code, so dass sich nicht jede Änderung auf die gesamte Codebasis auswirkt." - Ronna Steinburg

** Zusatzlektüre

- [[https://golang.org/doc/effective_go.html#interfaces][Grenzflächen]]
- [[https://blog.golang.org/laws-of-reflection][Die Gesetze der Reflexion]] - Rob Pike
- [[https://www.ardanlabs.com/blog/2014/05/methods-interfaces-and-embedded-types.html][Methoden, Interfaces und eingebettete Typen in Go]] - William Kennedy
- [[https://rakyll.org/interface-pollution/][Interfacesverschmutzung]] - JBD
- [[https://bravenewgeek.com/abstraction-considered-harmful/][Abstraktion als schädlich erachtet]] - Tyler Treat
- [[https://www.ardanlabs.com/blog/2018/03/interface-values-are-valueless.html][Interfaceswerte sind wertlos]] - William Kennedy
- [[https://www.ardanlabs.com/blog/2017/07/interface-semantics.html][Interfacessemantik]] - William Kennedy
- [[https://www.hyrumslaw.com/][Hyrum's Law]] - Hyrum
- [[https://www.youtube.com/watch?v=Pjz9WrXeOW0][Technische Innovation - Warum Beschränkungen entscheidend sind]] - André Eriksson (MUST WATCH)

* Übungen

Verwendet die Vorlage als Ausgangspunkt, um die Aufgaben zu lösen. Eine mögliche Lösung ist angegeben.

** Übung 1

*Teil* *A:* Deklariert ein Interface namens speaker mit einer Methode namens speak. Deklariert eine
Struktur namens english, die eine Person repräsentiert, die Englisch spricht, und deklariere eine Struktur
namens chinese für jemanden, der Chinesisch spricht. Implementiert die Interface speaker für jede
struct unter Verwendung eines Wertempfängers und der wörtlichen Zeichenfolgen "Hello World" und "你好世界".
Deklariert eine Variable vom Typ speaker und weist die Adresse eines Wertes vom Typ english
zu und ruft die Methode auf. Wiederholt dies für einen Wert vom Typ chinese.

*Teil* *B:* Fügt eine neue Funktion namens sayHello hinzu, die einen Wert vom Typ speaker annimmt.
Implementiert diese Funktion, um die speak-Methode für den Interfaceswert aufzurufen. Erstellt dann
 neue Werte jedes Typs und Verwendet die Funktion.

.play interfaces/exercise1.go
.play interfaces/answer1.go
