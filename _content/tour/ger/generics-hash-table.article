Hash-Tabellen
Eine Hash-Tabelle ist ein klassisches Beispiel für einen Containertyp, der die Vorteile der Generics wirklich nutzen kann.

* Generics - Hashtabellen

Eine Hashtabelle ist ein klassisches Beispiel für einen Containertyp, der die Vorteile der
Generics nutzen kann. Diese Implementierung wurde von Matt Layher (@mdlayer) in einem Blogbeitrag
geschrieben. Sie ist ein großartiges Beispiel dafür, was mit Generics möglich ist.

** Video

GPT
Seht Euch den Vortrag an, den ich über Generics (Generika) gehalten habe, der Euch durch alle Beispiele in diesem Abschnitt der Tour führt.

.html generics-video.html

** Code-Überprüfung

- *Beispiel* *1*: Hash-Tabelle

.play generics/hash-table/example1.go

** Erläutert

Dieser Code ist etwas komplexer als das was ihr bisher gesehen habt. In diesem Abschnitt werdet ihr 
zwei Ansichten des Codes sehen. Eine vor und eine nach der Anwendung der neuen Syntax für
Generics.

    type hashFunc func(key K, buckets int) int

Dieser Typ deklariert eine Hash-Funktionssignatur, die von der Hash-Tabelle verwendet wird um
eine Bucket-Position für die Speicherung und den Abruf von Daten zu berechnen. Der Benutzer muss diese Funktion implementieren
und diese Funktion bereitstellen, wenn er eine Hash-Tabelle konstruiert. Die Funktion akzeptiert einen
Schlüssel und die Anzahl der Buckets aus denen sie wählen kann. Da ihr wissen wollt dass dieses System
generisch sein soll, was die Schlüssel und Werte der verwendeten Typen angeht, deklariert ihr einen Parameter
mit dem Namen key, dessen Typ der einzelne Großbuchstabe K ist.

Als Nächstes könnt ihr die Generics-Syntax anwenden um K zu einem echten generischen Typ zu machen.

    type hashFunc[K comparable] func(key K, buckets int) int <-- CHANGED

Nach dem Typnamen fügt ihr die eckigen Klammern mit dem generischen Typ K und einem
constraint von comparable. Da die Werte des Schlüsseltyps in einer
Vergleichsoperation verwendet werden müssen, ist es jetzt sinnvoll dies zu dokumentieren auch wenn die
Implementierung der Hash-Funktion dies nicht erfordert. Konsistenz ist alles in Bezug auf
Lesbarkeit, Verständlichkeit und Wartbarkeit im Laufe der Zeit.

Dieser Typ steht für ein Schlüssel/Wert-Paar von Daten, die in der Hashtabelle gespeichert werden sollen.

    type keyValuePair struct {
        Key K
        Value V
    }

Die Aufgabe dieses Typs ist es die aktuellen Daten mit dem entsprechenden Schlüssel zu speichern. Als nächstes deklariert der
Code ein Schlüsselfeld des Typs K und ein Wertfeld des Typs V.

Jetzt könnt ihr die Syntax der Generics anwenden, um K und V zu einem echten generischen Typ zu machen.

    type keyValuePair[K comparable, V any] struct { <-- CHANGED
        Key K
        Value V
    }

Fügt nach dem Typnamen die eckigen Klammern mit den generischen Typen K und V hinzu.
In dieser Deklaration steht K wie zuvor für den Schlüssel und V für einen Wert der
alles sein kann.

Dieser Typ stellt eine Hash-Tabelle dar, die eine Hash-Funktion und eine Reihe von
Bereichen für die Speicherung von Schlüssel/Wertdaten verwaltet.

    type Table struct {
        hashFunc hashFunc
        buckets int
        data [][]keyValuePair
    }

Der Typ Tabelle hat drei Felder, eine Hash-Funktion, die Anzahl der Buckets und die
Daten als ein Slice eines Slice von Schlüssel/Wert-Paaren dargestellt werden. Das äußere Slice
repräsentiert Buckets und das innere Slice repräsentiert Schlüssel/Wertpaare, die in einem Bucket gespeichert sind.

Wendet nun die Syntax der Generics an, um die generischen Schlüssel- und Werttypen zu deklarieren und
sie auf die Felddeklarationen anzuwenden.

    type Table[K comparable, V any] struct { <-- CHANGED
        hashFunc hashFunc[K] <-- CHANGED
        buckets int
        data [][]keyValuePair[K, V] <-- CHANGED
    }
Fügt nach dem Typnamen die eckigen Klammern mit den generischen Typen K und V hinzu.
hashFunc-Typdeklaration erfordert Informationen über den konkreten Typ.
Die Deklaration des Typs keyValuePair erfordert Informationen über den konkreten
Typ für den Schlüssel und den Wert.

Dies ist eine Factory-Funktion, die eine Tabelle zur Verwendung konstruieren kann.
    
    func New(
        buckets int,
        hf hashFunc
    ) *Table {
        
        return &Table{
            hashFunc: hf,
            buckets: buckets,
            data: make([][]keyValuePair, buckets),
        }
    }

Die Factory-Funktion akzeptiert die Anzahl der zu verwaltenden Buckets und eine Hash-Funktion
zur Auswahl eines Bereichs für die Datenspeicherung und -suche. Wenn ein Tabellenwert
konstruiert wird, wird die Anzahl der Buckets verwendet um das Slices zu konstruieren wobei die Länge
des äußeren Slice auf die Anzahl der zu verwendenden Buckets gesetzt ist.

Wendet nun die Syntax der Generics an um die generischen Schlüssel- und Werttypen zu deklarieren und
sie auf die zu konstruierenden Typen anzuwenden.

    func New[K comparable, V any]( <-- CHANGED
        buckets int,
        hf hashFunc[K],            <-- CHANGED
    ) *Table[K, V] {               <-- CHANGED
        
        return &Table[K, V]{       <-- CHANGED
            hashFunc: hf,
            buckets: buckets,
            data: make([][]keyValuePair[K, V], buckets), <-- CHANGED
        }
    }

Fügt nach dem Typnamen die eckigen Klammern und die generischen Typen K und V hinzu.
K wird auf den Eingabeparameter hf angewendet, um die Deklaration des Typs hashFunc zu vervollständigen.
Die Typen K und V werden auf den Typ Table angewandt, der konstruiert und zurückgegeben wird.
Schließlich erfordert die Initialisierung des Datenfelds die Anwendung von K und V auf die
Konstruktionssyntax für den Typ keyValuePair.

Dies ist eine Methode mit der Werte in die Hashtabelle auf der Grundlage eines bestimmten Schlüssels eingefügt werden können.

    type Table[K comparable, V any] struct {
        hashFunc hashFunc[K]
        buckets int
        table [][]keyValuePair[K, V]
    }

    func (t *Table) Insert(key K, value V) {
        bucket := t.hashFunc(key, t.buckets)
        for idx, kvp := range t.table[bucket] {
            if key == kvp.Key {
                t.table[bucket][idx].Value = value
                return
            }
        }

        kvp := keyValuePair{
            Key: key,
            Value: value,
        }
        t.table[bucket] = append(t.table[bucket], kvp)
    }

Die Insert-Methode ist so deklariert, dass sie einen Schlüssel und einen Wert der gleichen generischen Typen akzeptiert,
die mit dem Typ Table deklariert wurden. Der erste Schritt des Einfügens ist die Identifizierung des
Buckets, der für die Speicherung verwendet werden soll. Dies geschieht durch den Aufruf der Hash-Funktion mit dem
angegebenen Schlüssel. Die Hash-Funktion gibt einen Integer-Wert zurück, der den zu verwendenden Bucket beinhaltet.

Dann prüft die Funktion, ob der angegebene Schlüssel bereits verwendet wurde um
einen Wert im ausgewählten Bereich zu speichern. Wenn der Schlüssel bereits existiert, wird der Wert für diesen Schlüssel
aktualisiert. Wird der Schlüssel nicht gefunden, wird ein neuer Wert für das Schlüssel/Wert-Paar erstellt,
initialisiert und an das Slice für den ausgewählten Bucket angehängt.

Wendet nun die Syntax der Generics an um die generischen Schlüssel- und Werttypen zu deklarieren und
sie auf die zu konstruierenden Typen anzuwenden.

    func (t *Table[K, V]) Insert(key K, value V) { <-- CHANGED
        bucket := t.hashFunc(key, t.buckets)
        for idx, kvp := range t.table[bucket] {
            if key == kvp.Key {
                t.table[bucket][idx].Value = value
                return
            }
        }
    
        kvp := keyValuePair[K, V]{                 <-- CHANGED
            Key: key,
            Value: value,
        }
        t.table[bucket] = append(t.table[bucket], kvp)
    }

Fügt nach dem Typnamen im Empfänger die eckigen Klammern und die generischen
Typen K und V ein. Die einzige weitere Änderung besteht darin, K und V auf die Konstruktionssyntax
des Typs keyValuePair anzuwenden.

Dies ist eine Methode, die Werte aus der Hash-Tabelle auf der Grundlage eines angegebenen Schlüssels abrufen kann.

    func (t *Table) Retrieve(key K) (V, bool) {
        bucket := t.hashFunc(key, t.buckets)
        for idx, kvp := range t.data[bucket] {
            if key == kvp.Key {
                return t.data[bucket][idx].Value, true
            }
        }
    
        var zero V
        return zero, false
    }

Die Retrieve-Methode ist so deklariert, dass sie einen Schlüssel akzeptiert und eine Kopie des Wertes zurückgibt,
der für diesen Schlüssel gespeichert ist. Der erste Schritt des Abrufs besteht darin den Bereich zu identifizieren der
für die Speicherung verwendet wurde. Dies geschieht durch den Aufruf der Hash-Funktion mit dem angegebenen
Schlüssel. Die Hashfunktion gibt einen ganzzahligen Wert zurück der den zu untersuchenden Bereich darstellt.

Anschließend durchläuft die Funktion die Sammlung von Schlüssel/Wertpaaren, die im
Bucket gespeichert sind und sucht nach dem angegebenen Schlüssel. Eins nach dem Anderen. Wenn der Schlüssel gefunden wird, wird eine Kopie des
Wertes zurückgegeben und true an den Aufrufer übermittelt. Wenn der Schlüssel nicht gefunden wird, wird Null
zurückgegeben und false an den Aufrufer übermittelt.

Wendet nun die Syntax der Generics an, um die generischen Schlüssel- und Werttypen zu deklarieren und
diese auf die zu konstruierenden Typen anzuwenden.

    func (t *Table[K, V]) Get(key K) (V, bool) { <-- CHANGED
        bucket := t.hashFunc(key, t.buckets)
        for idx, kvp := range t.data[bucket] {
            if key == kvp.Key {
                return t.data[bucket][idx].Value, true
            }
        }
    
        var zero V
        return zero, false
    }

Fügt nach dem Typnamen im Empfänger die eckigen Klammern und die generischen
Typen K und V hinzu. Weitere Codeänderungen sind nicht erforderlich.

Dies ist ein kleines Programm, um die Implementierung der Hashtabelle zu testen.

    func main() {
        const buckets = 8
        . . .
    }

Beginnt mit einer Konstante, die die Anzahl der in der Hashtabelle zu verwendenden Buckets definiert.

    import (
        "hash/fnv"
    )
    
    func main() {
        . . .
        
        hashFunc1 := func(key string, buckets int) int {
            h := fnv.New32()
            h.Write([]byte(key))
            return int(h.Sum32()) % buckets
        }

        . . .
    }

Als nächstes deklariert eine Hash-Funktion, die eine Zeichenkette als Schlüssel deklariert. Die
Implementierung verwendet das fnv-Paket aus der Standardbibliothek, das die FNV-1 und FNV-1a, 
nicht-kryptografische Hashfunktionen, die von Glenn Fowler, Landon Curt Noll und Phong Vo erstellt wurden, implementiert. 
FNV steht für die Fowler-Noll-Vo-Hash-Funktion.

Die Modulus-Operation mit dem Bucketwert zwingt den Endwert, innerhalb des Bereichs für die Anzahl der Buckets zu liegen.

    import (
        "hash/fnv"
    )
    
    func main() {
        . . .
        
        table1 := New[/*key*/ string, /*value*/ int](buckets, hashFunc1)
        
        . . .
    }

Als Nächstes konstruiert eine Hashtabelle, wobei ihr ausdrücklich angebt, dass der Schlüssel vom Typ string
und der Wert vom Typ int ist. Es gibt nichts in den Eingabeparametern das dem Compiler helfen könnte
diese Information abzuleiten.

Um zu zeigen dass es sich bei der Hash-Tabelle um eine generische Tabelle handelt, wurde eine zweite Hash
Funktion und Tabelle erstellt.

    import (
        "hash/fnv"
    )
    
    func main() {
        . . .
    
        hashFunc2 := func(key int, buckets int) int {
            return key % buckets
        }

        table2 := New[/*key*/ int, /*value*/ string](buckets, hashFunc2)
    
        . . .
    }

Diese Hash-Funktion deklariert eine ganze Zahl als Schlüssel und führt eine einfache Modulus
Operation mit dem Bucket-Wert gegen den Schlüssel durch. Dann wird eine neue Tabelle 
erstellt in welcher der Schlüssel als Ganzzahl und der Wert als Zeichenkette angegeben ist. Das Gegenteil der
ersten Tabelle.

    import (
        "hash/fnv"
    )
    
    func main() {
        . . .
    
        words := []string{"foo", "bar", "baz"}
        for i, word := range words {
            table1.Insert(word, i)
            table2.Insert(i, word)
        }
    
        for i, s := range append(words, "nope!") {
            v1, ok1 := table1.Retrieve(s)
            fmt.Printf("t1.Rtr(%v) = (%v, %v)\n", s, v1, ok1)
            
            v2, ok2 := table2.Retrieve(i)
            fmt.Printf("t2.Rtr(%v) = (%v, %v)\n", i, v2, ok2)
        }
    }

Output:

    t1.Rtr(foo) = (0, true)
    t2.Rtr(0) = (foo, true)
    t1.Rtr(bar) = (1, true)
    t2.Rtr(1) = (bar, true)
    t1.Rtr(baz) = (2, true)
    t2.Rtr(2) = (baz, true)
    t1.Rtr(nope!) = (0, false)
    t2.Rtr(3) = (, false)

Schreibt schließlich einen Code zum Speichern und Abrufen von Werten aus den beiden entsprechenden
Tabellen.
