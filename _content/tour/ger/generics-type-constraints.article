Typ als Einschränkung
Dies ist ein neues Konzept in Go, bei dem eine Einschränkung auf einer Reihe von konkreten Typen basieren kann.

* Generics - Type As Constraint

Dies ist ein neues Konzept in Go, bei dem eine Einschränkung auf einem Satz konkreter Typen basieren kann.
Dies funktioniert nur für Generics.

** Video

Schaut euch den Vortrag über Generics an, der euch durch alle
Beispiele in diesem Abschnitt der Tour führt.

.html generics-video.html

** Code-Überprüfung

- *Beispiel* *1*: Typbasierte Einschränkung
- *Beispiel* *2*: Vordeklarierte Typ-Beschränkung "vergleichbar"
- *Beispiel* *3*: Mischung von Typ- und Verhaltensbeschränkungen

.play generics/type-constraints/example1.go
.play generics/type-constraints/example2.go
.play generics/type-constraints/example3.go

** Erläutert

Generische Funktionen schaffen eine neue Art von Einschränkung, die nicht durch die Deklaration
von Methoden-Verhalten gelöst werden kann.

    func Add[T ???](v1 T, v2 T) T {
        return v1 + v2
    }

Es handelt sich um eine allgemeine Funktion, die zwei Werte des Typs T akzeptiert, sie addiert
und dann die Summe an den Aufrufer zurückgibt. Dies ist ein interessantes Problem
weil der Compiler den Aufruf der Funktion auf Werte beschränken muss, die
in einer Additionsoperation verwendet werden können. Derzeit gibt es keinen Mechanismus, 
um diese Art von Einschränkung zu deklarieren.

Die Entscheidung war, das Interface zur Deklaration der Einschränkung weiter zu verwenden und etwas Neues hinzuzufügen.


    type addOnly interface {
        string | int | int8 | int16 | int32 | int64 | float64
    }

Ihr könnt ein interface deklarieren, welches einen Satz von Typen definiert, die die Einschränkung bilden. Dann wendet
dieses interface auf die generische Funktion an.

    func Add[T addOnly](v1 T, v2 T) T {
        return v1 + v2
    }

Jetzt kann der Compiler überprüfen, ob die Menge der Typen mit den Operationen übereinstimmt, die
die Funktion mit Werten dieser Typen durchführen muss. Wenn das interface 
die eingebauten Typen verwendet, sind die interfaces paketübergreifend wiederverwendbar. Wenn die Liste
benutzerdefinierte Typen aus dem Paket darstellt, müsst ihr daran denken, dass diese
generischen Funktionen an die Pakettypen gebunden sind. 

Interfaces die mit einer Reihe von Typen deklariert sind, können nicht in einer traditionellen polymorphen
Funktion verwendet werden. Das würde sowieso keinen Sinn machen, aber es ist etwas, das sich nicht nach
Go anfühlt, in dem Sinne dass die Änderung am interface nicht orthogonal ist.

Eine Idee ist es, vordeklarierte Bezeichner für allgemeine Operationsbeschränkungen zu haben.

    func index[T comparable](list []T, find T) int {
        for i, v := range list {
            if v == find {
                return i
            }
        }
        
        return -1
    }

Die Vergleichsbeschränkung wird von der Sprache deklariert und wendet eine Beschränkung an, dass
Typen fähig sein müssen, in einer Vergleichsaussage verwendet zu werden. In diesem Beispiel,
sind sowohl v als auch find Variablen vom Typ T und werden miteinander verglichen. Es gibt eine Idee
dass ein Paket in der Standardbibliothek auch einen gemeinsamen Satz von Beschränkungen bereitstellen könnte.


Es gibt keine Einschränkung für ein interface, das sowohl mit einem Satz von Typen als auch mit einem
Verhaltensmuster deklariert wird.

    type matcher[T any] interface {
        type person, food
        match(v T) bool
    }
        
    func match[T matcher[T]](list []T, find T) int {
        for i, v := range list {
            if v.match(find) {
                return i
            }
        }
        
        return -1
    }

Es wird ein generisches Interface deklariert, wobei T der Typ des Wertes ist, der an eine
Methode namens match übergeben wird. Das Interface schränkt ihre Verwendung auf Werte der benutzerdefinierten
Typs person und food ein.

Wenn man sich die Abgleichsfunktion ansieht, gibt es keine offensichtliche Notwendigkeit, die
Funktion auf die Typen person und food zu beschränken. Wenn dies der Fall ist, sollte die Match-Funktion
eine traditionelle polymorphe Funktion sein, keine generische Funktion. Wenn es einen
guten Grund gibt, kann eine generische Funktion verwendet werden, um diese Art von Einschränkung anzuwenden.

Nebenbei bemerkt, bin ich mir nicht sicher, ob diese Funktion notwendig oder sinnvoll ist. Das ist
etwas, was die Gemeinschaft mit der Zeit herausfinden muss.

* Übungen

Verwendet die Vorlage als Ausgangspunkt, um die Aufgaben zu lösen. Eine mögliche Lösung ist angegeben.

** Übung 1

Implementiert eine generische Funktion namens copyfy, die sich darauf beschränkt, nur
Kopien von Slices des Typs string oder int zu erstellen.

.play generics/type-constraints/exercise1.go 
.play generics/type-constraints/answer1.go
