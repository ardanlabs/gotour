Interfaces
Les interfaces donnent aux programmes une structure et encouragent la conception par composition.

* Interfaces

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Regarder la Video]]
- Besoin d'une aide financière, Utilisez notre [[https://www.ardanlabs.com/scholarship/][Formulaire de Bourse d'études]]


Les interfaces structurent les programmes et favorisent la conception par composition. 
Elles permettent et encouragent une division claire et nette entre les composants. 
La standardisation des interfaces permet de définir des attentes claires et constantes. 
Le découplage consiste à réduire les dépendances entre les composants et les types qu'ils utilisent. 
Cela se traduit par une meilleure précision, qualité et maintenabilité du code.

** Analyse de Code

- *Exemple* *1:* Code redondant nécessitant du polymorphisme
- *Exemple* *2:* Polymorphisme
- *Exemple* *3:* Ensembles de méthodes
- *Exemple* *4:* Adresse de Valeur
- *Exemple* *5:* Stockage par Valeur
- *Exemple* *6:* Assertions de Type
- *Exemple* *7:* Assertions de Type Conditionnelles
- *Exemple* *8:* Interface Vides et Sélecteurs de Type
- *Exemple* *9:* Stocker des Valeurs

.play interfaces/example1.go
.play interfaces/example2.go
.play interfaces/example3.go
.play interfaces/example4.go
.play interfaces/example5.go
.play interfaces/example6.go
.play interfaces/example7.go
.play interfaces/example8.go
.play interfaces/example9.go

** Sémantique d'Interface

Les interfaces regroupent des données concrètes en fonction de leur comportement. 
L'accent est mis sur ce que la donnée peut faire, indépendamment de sa nature. 
Les interfaces contribuent également à découpler le code des changements en demandant 
des données concrètes en fonction de leurs capacités. Il n'est pas limité à un seul type de données.

Vous devez anticiper au mieux les évolutions futures des données afin d'utiliser des interfaces 
pour découpler votre programme de ces changements. Les interfaces doivent décrire le comportement 
et non l'état. Elles doivent être formulées sous forme de verbes et non de noms.

Les interfaces généralisées centrées sur le comportement sont les meilleures. Les interfaces avec 
plusieurs méthodes ont plus d'une raison d'évoluer. Celles basées sur des noms ont tendance à être 
moins réutilisables, plus sujettes aux changements et s'opposent à l'objectif des interfaces. 
L'incertitude face au changement n'est pas une permission de spéculer, mais une directive pour S'ARRÊTER 
et en apprendre plus. Vous devez distinguer le code qui protège de la fraude de celui qui protège 
contre les accidents.

Utilisez une interface quand :

- Les utilisateurs de l'API doivent fournir un détail d'implémentation.
- Les API ont plusieurs implémentations qu'elles doivent gérer en interne.
- Les parties de l'API susceptibles de changer ont été identifiées et nécessitent un découplage.

N'utilisez pas d'interface :

- Pour simplement exploiter une interface.
- Pour généraliser un algorithme.
- Lorsque les utilisateurs peuvent déclarer leurs propres interfaces.
- Si les raisons de l'utilisation d'une interface ne sont pas clairs.

** Les Interfaces n'ont pas de Valeurs

La première chose importante à comprendre est qu'un type d'interface déclare un type sans valeur.

    type reader interface {
        read(b []byte) (int, error)
    }

Le type `reade`r n'est pas un type struct, mais un type interface. Sa déclaration n'est pas basée 
sur l'état, mais sur le comportement. Les types interface définissent un ensemble de méthodes que 
les données concrètes doivent implémenter pour satisfaire l'interface. Les types Interface n'ont pas 
d'état concret, ils sont donc sans valeur.

    var r reader

En raison de leur absence de valeur, la construction d'une variable (comme `r`) est particulière, 
car dans notre modèle de programmation, `r` n'existe pas en soi, elle est sans valeur. Il n'y a rien 
dans `r` que vous puissiez directement manipuler ou transformer. C'est un concept crucial à comprendre.
Je ne travaille jamais directement avec des valeurs d'interfaces, mais uniquement avec des valeurs concrètes.
Une interface possède une représentation dans le compilateur (un type interne), mais au regard de notre 
modèle de programmation, les interfaces sont sans valeur.

** Implémenter des Interfaces

Go est un langage qui privilégie les conventions par rapport aux configurations. Lorsqu'un type concret 
implémente une interface, il n'y a pas d'exception.

    type reader interface {
        read(b []byte) (int, error)
    }

    type file struct {
        name string
    }

    func (file) read(b []byte) (int, error) {
        s := "<rss><channel><title>Going Go</title></channel></rss>"
        copy(b, s)
        return len(s), nil
    }

Le code déclare un type nommé `file` et ensuite une méthode nommée `read`. En raison de ces deux déclarations, 
on peut dire :

"Le type concret `file` implémente maintenant l'interface `reader` en utilisant la sémantique par valeur."

Chaque mot est important. En Go, il suffit de déclarer l'ensemble complet des méthodes comportementales 
définies par une interface pour implémenter cette interface. Dans ce cas, c'est ce qui ai fait puisque 
l'interface reader ne déclare qu'un seul comportement nommé `read`.

    type reader interface {
        read(b []byte) (int, error)
    }

    type pipe struct {
        name string
    }

    func (pipe) read(b []byte) (int, error) {
        s := `{name: "Bill", title: "developer"}`
        copy(b, s)
        return len(s), nil
    }

Ce code déclare un type nommé `pipe` et ensuite une méthode nommée `read`. En raison de ces deux déclarations, 
on peut dire :

"Le type concret `pipe` implémente maintenant l'interface `reader` en utilisant la sémantique par valeur."

Maintenant, vous avez deux types concrets implémentant l'interface `reader`. Chaque type concret a sa propre 
implémentation. L'un lit des systèmes de fichiers, l'autre des réseaux.

** Polymorphisme

Le polymorphisme signifie qu'un fragment de code adapte son comportement en fonction des données qu'il manipule. 
Cette définition, énoncée par Tom Kurtz, l'inventeur du langage BASIC, sera notre postulat pour la suite.

    // retrieve peut lire et traiter les données de n'importe quel appareil.
    func retrieve(r reader) error {
        data := make([]byte, 100)

        len, err := r.read(data)
        if err != nil {
            return err
        }

        fmt.Println(string(data[:len]))
        return nil
    }

Regardez le type de données que cette fonction accepte. Elle attend une valeur de type `reader`. 
C'est impossible, car `reader` est une interface et les interfaces sont des types sans valeur. 
Elle ne peut pas demander une valeur `reader`, parce qu'elle n'existe pas.

Si la fonction ne demande pas une valeur `reader`, alors que demande-t-elle ? Elle demande 
la seule chose qu'elle puisse demander, des données concrètes.

La fonction `retrieve` est une fonction polymorphique, car elle demande des données concrètes, 
non pas en fonction de ce qu'est la donnée (type concret), mais en fonction de ce que la donnée 
peut faire (type d'interface).

    f := file{"data.json"}
    p := pipe{"cfg_service"}

    retrieve(f)
    retrieve(p)

Vous pouvez construire deux valeurs concrètes, une de type `file` et une de type `pipe`. Ensuite, 
vous pouvez passer une copie de chacune de ces valeurs à la fonction polymorphique. En effet, 
chacune de ces valeurs implémente l'ensemble complet des comportements définis par l'interface `reader`.

Lorsque la valeur concrète de type `file` est passée à la fonction `retrieve`, la valeur est stockée 
dans un type interne à deux mots représentant la valeur d'interface.

.image /tour/eng/static/img/i1.png

Le deuxième mot de la valeur d'interface pointe vers la valeur stockée. Dans ce cas, il s'agit d'une copie 
de la valeur de type `file` car la sémantique par valeur est en jeu. Le premier mot pointe vers une 
structure de données spéciale appelée iTable.

L'iTable a deux objectifs :

- Elle décrit le type de valeur stockée. Dans ce cas, il s'agit d'une valeur de type `file`.
- Elle fournit des pointeurs de fonction vers les implémentations concrètes de l'ensemble de méthodes pour le type de valeur stockée.

Lors de l'appel de la méthode `read` sur la valeur d'interface, une recherche dans l'iTable est effectuée 
pour trouver l'implémentation concrète de la méthode `read` associée au type. Ensuite, l'appel de méthode 
est effectué sur la valeur stockée dans le deuxième mot.

On peut dire que `retrieve` est une fonction polymorphique, car la valeur concrète `pipe` peut être passée à `retrieve`. 
De ce fait, l'appel de `read` sur la valeur d'interface change son comportement. Cette fois, l'appel de `read` 
lit un réseau au lieu de lire un fichier.

** Règles d'Ensemble de Méthodes

Implémenter une interface en utilisant la sémantique par pointeur impose certaines contraintes de 
compatibilité d'interface.

    type notifier interface {
        notify()
    }

    type user struct {
        name  string
        email string
    }

    func (u *user) notify() {
        fmt.Printf("Sending User Email To %s<%s>\n", u.name, u.email)
    }

    func sendNotification(n notifier) {
        n.notify()
    }

    func main() {
        u := user{"Bill", "bill@email.com"}
        sendNotification(u)
    }

L'interface `notifier` est implémentée par le type `user` en utilisant la sémantique par pointeur. 
Lorsque la sémantique par valeur est utilisée pour effectuer l'appel polymorphe, le compilateur renvoie 
le message suivant.

    "cannot use u (type user) as type notifier in argument to sendNotification:
    user does not implement notifier (notify method has pointer receiver)"

Cela se produit car les spécifications de Go définissent des règles strictes concernant les ensembles de méthodes. 
Ces règles déterminent quelles méthodes sont associées à un type valeur et un type pointeur. 
Elles sont mises en place pour garantir le plus haut niveau d'intégrité dans votre programme.

Voici les règles définies par les spécifications du langage Go.

- Pour toute valeur d'un type T, seules les méthodes implémentées avec un receveur de valeur pour ce type appartiennent à l'ensemble de méthodes de cette valeur.
- Pour toute adresse mémoire d'un type T, toutes les méthodes implémentées pour ce type appartiennent à 
l'ensemble de méthodes de cette valeur.

En d'autres termes, lorsque vous travaillez avec une adresse (pointeur), toutes les méthodes implémentées 
sont attachées et peuvent être appelées. En revanche, lorsque vous travaillez avec une valeur, 
seules les méthodes implémentées avec des receveurs de valeur sont attachées et peuvent être appelées.

Dans la leçon précédente sur les méthodes, vous pouviez appeler une méthode sur une donnée concrète, 
quels que soient les sémantiques de données déclarées par le receveur. En effet, le compilateur pouvait 
s'adapter pour effectuer l'appel. Dans le cas présent, une valeur est stockée dans une interface, 
et les méthodes doivent exister. Aucun ajustement ne peut être effectué.

La question est maintenant : Pourquoi les méthodes implémentées avec des receveurs de pointeurs ne peuvent-elles 
pas être attachées à des valeurs de type T ? Quel est le problème d'intégrité ici ?

Une des raisons est que vous ne pouvez pas garantir que chaque valeur de type T est adressable. Si une valeur 
n'a pas d'adresse, elle ne peut pas être partagée.

    type duration int

    func (d *duration) notify() {
            fmt.Println("Sending Notification in", *d)
    }

    func main() {
        duration(42).notify()
    }

Erreur du Compilateur :

    cannot call pointer method on duration(42)
    cannot take the address of duration(42)

Dans cet exemple, la valeur 42 est une constante de type int. Même si la valeur est convertie en une valeur 
de type `duration`, elle n'est pas stockée dans une variable. Cela signifie que la valeur ne se trouve ni dans 
le stack ni dans le heap. Elle n'a pas d'adresse. Les constantes existent uniquement au moment de la compilation.

La deuxième raison est la plus importante. Le compilateur vous indique que vous ne pouvez pas utiliser la sémantique 
par valeur si vous avez choisi d'utiliser la sémantique de pointeur. En d'autres termes, vous êtes obligé de partager 
la valeur avec l'interface dans la mesure où il n'est pas sûr de copier une valeur pointée par un pointeur. 
En choisissant d'implémenter la méthode avec la sémantique par pointeur, vous indiquez qu'une valeur de ce type 
ne peut pas être copiée en toute sécurité.

    func main() {
        u := user{"Bill", "bill@email.com"}
        sendNotification(&u)
    }

Pour résoudre le message du compilateur, vous devez utiliser la sémantique par pointeur lors de l'appel à la fonction
polymorphe et partager `u`. La solution n'est pas de modifier la méthode pour qu'elle utilise la sémantique par valeur.

** Slice de Type Interface

Lorsque vous déclarez une slice d'un type interface, vous pouvez regrouper différentes valeurs concrètes 
en fonction de ce qu'elles peuvent faire. C'est pourquoi Go n'a pas besoin du concept de sous-typage. 
Il ne s'agit pas d'un ADN commun, mais d'un comportement commun.

    type printer interface {
        print()
    }

    type canon struct {
        name string
    }

    func (c canon) print() {
        fmt.Printf("Printer Name: %s\n", c.name)
    }

    type epson struct {
        name string
    }

    func (e *epson) print() {
        fmt.Printf("Printer Name: %s\n", e.name)
    }

    func main() {
        c := canon{"PIXMA TR4520"}
        e := epson{"WorkForce Pro WF-3720"}

        printers := []printer{
            c,
            &e,
        }
        c.name = "PROGRAF PRO-1000"
        e.name = "Home XP-4100"

        for _, p := range printers {
            p.print()
        }
    }

Sortie : 

    Printer Name: PIXMA TR4520
    Printer Name: Home XP-4100

Le code montre comment une slice du type interface `printer` permet de créer une collection de différents 
types concrets d'imprimantes. En parcourant la collection et en exploitant le polymorphisme, l'appel à `p.print()` 
change son comportement en fonction de la valeur concrète que le code manipule.

L'exemple illustre également comment le choix de la sémantique de données modifie le comportement du programme. 
En stockant les données en utilisant la sémantique par valeur, la modification de la valeur d'origine n'est pas visible.
Cela s'explique par le fait qu'une copie est stockée à l'intérieur de l'interface. En revanche, lorsque la sémantique 
par pointeur est utilisée, toute modification de la valeur d'origine est reflétée.

** Notes

- L'ensemble de méthodes pour une valeur inclue uniquement les méthodes implémentées avec un receveur de valeur.
- L'ensemble de méthodes pour un pointeur, inclus les méthodes implémentées avec des receveurs de pointeur et de valeur.
- Les méthodes déclarées avec un receveur de pointeur, implémentent uniquement l'interface avec des valeurs de type pointeur.
  Les méthodes déclarées avec un receveur de valeur implémentent l'interface avec des valeurs et des pointeurs.
- Les règles des ensembles de méthodes s'appliquent aux types Interface.
- Les interfaces représentent des références, ne les partagez pas avec un pointeur.
- C'est ainsi que nous créons un comportement polymorphique en Go.

** Citations

"En programmation, le polymorphisme signifie que vous écrivez un programme unique qui se comporte différemment selon les 
données qu'il manipule." - Tom Kurtz (inventor of BASIC)

"L'interface vide ne dit rien." - Rob Pike

"La conception est l'art d'organiser le code pour qu'il fonctionne aujourd'hui et qu'il puisse être modifié indéfiniment." 
- Sandi Metz

"Une bonne abstraction découple le code afin que chaque modification ne se répercute pas dans tout le code de base." 
- Ronna Steinburg

** Lectures Supplémentaires

- [[https://golang.org/doc/effective_go.html#interfaces][Interfaces]]    
- [[https://blog.golang.org/laws-of-reflection][The Laws of Reflection]] - Rob Pike    
- [[https://www.ardanlabs.com/blog/2014/05/methods-interfaces-and-embedded-types.html][Methods, Interfaces and Embedded Types in Go]] - William Kennedy    
- [[https://rakyll.org/interface-pollution/][Interface Pollution]] - JBD    
- [[https://bravenewgeek.com/abstraction-considered-harmful/][Abstraction Considered Harmful]] - Tyler Treat    
- [[https://www.ardanlabs.com/blog/2018/03/interface-values-are-valueless.html][Interface Values Are Valueless]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2017/07/interface-semantics.html][Interface Semantics]] - William Kennedy    
- [[https://www.hyrumslaw.com/][Hyrum's Law]] - Hyrum  
- [[https://www.youtube.com/watch?v=Pjz9WrXeOW0][Engineering Innovation - Why Constraints Are Critical]] - André Eriksson (MUST WATCH)

* Exercises

Utilisez le modèle comme point de départ pour réaliser les exercices. Une solution possible est fournie.

** Exercise 1

*Partie* *A:* Déclarez une interface nommée `speaker` avec une méthode nommée `speak`. 
Déclarez une struct nommée `english` qui représente une personne parlant anglais et une struct nommée `chinese`
pour une personne qui parle le chinois. 
Implémentez l'interface `speaker` pour chaque structure en utilisant un receveur de valeur et les chaînes littérales
"Hello World" et "你好世界". 
Déclarez une variable de type `speaker` et assignez-lui l'adresse d'une valeur de type `english` et appelez la méthode. 
Faites-le à nouveau pour une valeur de type `chinese`.

*Partie* *B:* Ajoutez une nouvelle fonction nommée `sayHello` qui accepte une valeur de type `speaker`. 
Implémentez cette fonction afin d'appeler la méthode `speak` sur la valeur de l'interface. Ensuite, 
créez de nouvelles valeurs de chaque type et utilisez cette fonction.

.play interfaces/exercise1.go
.play interfaces/answer1.go
