Slice Comme Contraintes
Parfois, vous pourriez avoir besoin de contraindre un type générique à n'être seulement qu'une slice.

* Generics - Slice Comme Contraintes

Parfois, vous pourriez avoir besoin de contraindre un type générique à n'être seulement qu'une slice.

** Video

Regardez la conférence que j'ai donnée sur les génériques, qui vous présente tous les exemples de cette section du Tour.

.html generics-video.html

** Analyse de Code

- *Exemple* *1*: Operate function

.play generics/slice-constraints/example1.go

** Explications

Ici, le type `Numbers` défini par l'utilisateur a pour type sous-jacent une slice d'entiers.

    type Numbers []int

Le compilateur vous permet de convertir des variables en se basant sur une slice d'entiers avec des variables de type 
`Numbers`. C'est généralement souhaitable et correspond à ce que vous recherchez. Grâce à cette fonctionnalité, vous 
pouvez écrire une fonction générique capable d'opérer sur une slice en respectant le type sous-jacent.

    type operateFunc[T any] func(t T) T

    func operate[T any](slice []T, fn operateFunc[T]) []T {
        ret := make([]T, len(slice))
            for i, v := range slice {
            ret[i] = fn(v)
        }
        
        return ret
    }

La fonction `operate` déclare un type générique T pouvant représenter n'importe quel type. Ce type est utilisé pour 
définir un paramètre nommé `slice` qui accepte une slice du même type T. La fonction accepte également une fonction 
générique du même type T et renvoie également une slice de T.

    type Numbers []int
    
    func Double(n Numbers) Numbers {
        fn := func(n int) int {
            return 2 * n
        }
    
        numbers := operate(n, fn)
        fmt.Printf("%T", numbers)
        return numbers
    }

Sortie :

    []int

la fonction `Double` accepte une valeur de type `Numbers` et la transmet à la fonction `operate`. Dans ce cas, le 
compilateur tire parti du type sous-jacent de T et la valeur `Numbers` peut être passée à la fonction. Cependant, 
ce qui est retourné est une slice de type int, comme on le voit dans la sortie.

Si vous voulez vous assurer que seule une valeur de type `Numbers` peut être passée à la fonction `operate` et 
retournée par celle-ci, vous pouvez effectuer les modifications suivantes.

    type Slice[T any] interface {
        ~ []T
    }

Cette interface déclare une contrainte pour restreindre un type générique à une slice réelle d'un type quelconque T. 
L'utilisation de l'élément d'approximation `~` limite la contrainte à tous les types dont le type sous-jacent est T. 
Grâce à cette interface, vous pouvez modifier la fonction `operate`.

    type operateFunc[T any] func(t T) T
    type Slice[T any] interface {
        ~ []T
    }

    // func operate[T any](slice []T, fn operateFunc[T]) []T {
    //     ret := make([]T, len(slice))
    //     for i, v := range slice {
    //         ret[i] = fn(v)
    //     }
    //     return ret
    // }

    func operate[S Slice[T], T any](slice S, fn operateFunc[T]) S {
        ret := make(S, len(slice))
        for i, v := range slice {
            ret[i] = fn(v)
        }
        
        return ret
    }

Modifiez maintenant la fonction `operate` pour qu'elle déclare deux types génériques. Le type S représente une valeur 
de slice d'un type quelconque T. Le type T peut quant à lui représenter n'importe quel type. La fonction renvoie une 
valeur de type S.

    type Numbers []int
    
    func Double(n Numbers) Numbers {
        fn := func(n int) int {
            return 2 * n
        }
    
        numbers := operate(n, fn)
        fmt.Printf("%T", numbers)
        
        return numbers
    }

Sortie :

    main.Numbers

Cette fois, lorsque vous passez la valeur `Numbers` à la fonction `operate`, la slice retournée est de type `Numbers`. 
Le type sous-jacent est ignoré et le type défini par l'utilisateur est respecté.
