Type Comme Contraint
C'est un nouveau concept en Go ou une contrainte peut être basée sur un ensemble de types concrets.

* Generics - Type Comme Contraint

This is a new concept in Go where a constraint can be based on a set of concrete types.
This only works for generics.

** Video

Regardez la conférence que j'ai donnée sur les génériques, qui vous présente tous les exemples de cette section du Tour.

.html generics-video.html

** Analyse de Code

- *Exemple* *1*: Type based constraint
- *Exemple* *2*: Predeclared type constraint "comparable"
- *Exemple* *3*: Mix type and behavior constraints

.play generics/type-constraints/example1.go
.play generics/type-constraints/example2.go
.play generics/type-constraints/example3.go

** Explications

Les fonctions génériques créent un nouveau type de contrainte qui ne peut pas être résolue par la simple déclaration 
d'un ensemble de comportements via des méthodes.

    func Add[T ???](v1 T, v2 T) T {
        return v1 + v2
    }

Cette fonction générique accepte deux valeurs de type T quelconque, les additionne et renvoie la somme à l'appelant. 
Ce problème est intéressant car le compilateur doit restreindre les appels à cette fonction aux seules valeurs pouvant 
être utilisées dans une addition. Or, il n'existe actuellement aucun mécanisme pour déclarer ce type de contrainte.

La décision a été de continuer à utiliser l'interface pour déclarer la contrainte et d'ajouter quelque chose de nouveau.

    type addOnly interface {
        string | int | int8 | int16 | int32 | int64 | float64
    }

Vous pouvez déclarer une interface qui définit un ensemble de types formant la contrainte. Ensuite, appliquez cette 
interface à la fonction générique.

    func Add[T addOnly](v1 T, v2 T) T {
        return v1 + v2
    }

Désormais, le compilateur peut valider que l'ensemble des types est compatible avec les opérations que la fonction 
doit effectuer sur les valeurs de ces types. Lorsque l'interface utilise les types intégrés, les interfaces sont 
réutilisables entre les packages. Lorsque la liste de types représente des types définis par l'utilisateur depuis le 
package, vous devez vous rappeler que ces fonctions génériques sont liées aux types du package et rien de plus.

Les interfaces déclarées avec un ensemble de types ne peuvent pas être utilisées dans une fonction polymorphique 
traditionnelle. Cela n'aurait de toute façon aucun sens, mais cela ne ressemble pas à du Go dans le sens où ce 
changement à l'interface n'est pas orthogonal.

Une idée serait d'avoir des identificateurs prédéclarés pour les contraintes d'opération courantes.

    func index[T comparable](list []T, find T) int {
        for i, v := range list {
            if v == find {
                return i
            }
        }
        
        return -1
    }

La contrainte "comparable" est déclarée par le langage lui-même et impose une restriction, à savoir, les types doivent 
pouvoir être utilisés dans une instruction de comparaison. Dans cet exemple, `v` et `find` sont toutes deux des 
variables de type T et sont comparées. On pourrait envisager qu'un package de la bibliothèque standard puisse également 
fournir un ensemble commun de contraintes.

Une interface peut être déclarée avec un ensemble de types et un ensemble de méthodes comportementales sans aucune 
restriction.

    type matcher[T any] interface {
        type person, food
        match(v T) bool
    }
        
    func match[T matcher[T]](list []T, find T) int {
        for i, v := range list {
            if v.match(find) {
                return i
            }
        }
        
        return -1
    }

Une interface générique est déclarée où T est le type de valeur à passer à une méthode nommée `match`. L'interface 
restreint également son utilisation aux seules valeurs de types définis par l'utilisateur `person` et `food`.

En examinant la fonction `match`, il n'apparaît pas nécessaire de la restreindre uniquement aux types `person` et 
`food`. Dans ce cas, la fonction `match` devrait être une fonction polymorphique traditionnelle et non une fonction 
générique. Si une bonne raison l'exige, une fonction générique peut être utilisée pour appliquer ce type de contrainte.

En aparté, je ne suis pas sûr que cette fonctionnalité soit nécessaire ou ait du sens. C'est quelque chose que la 
communauté devra déterminer avec le temps.

* Exercises

Utilisez le modèle comme point de départ pour réaliser les exercices. Une solution possible est fournie.

** Exercise 1

Implémenter une fonction générique nommée `copyfy` contrainte à ne faire seulement que des copie de slices de type
`string` ou `int`.

.play generics/type-constraints/exercise1.go 
.play generics/type-constraints/answer1.go
