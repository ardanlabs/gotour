Maps
Map adalah struktur data yang menyediakan dukungan untuk menyimpan dan mengakses data berdasarkan suatu kunci.

* Maps

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Tonton Video]]
- Perlu bantuan finansial, Isi [[https://www.ardanlabs.com/scholarship/][Formulir Beasiswa]]

Map adalah struktur data yang menyediakan dukungan untuk menyimpan dan mengakses data
berdasarkan sebuah kunci. Ia menggunakan hash map dan bucket system yang menjaga kedekatan
blok memori di bawahnya.

** Ulasan Kode

- *Contoh* *1:* Pendeklarasian, penulisan, pembacaan, dan penghapusan
- *Contoh* *2:* Kunci yang tidak ada
- *Contoh* *3:* Batasan kunci pada map
- *Contoh* *4:* Literal map dan operasi range
- *Contoh* *5:* Mengurutkan map berdasarkan kunci
- *Contoh* *6:* Mengambil alamat memori dari sebuah elemen
- *Contoh* *7:* Map adalah sebuah tipe data referensi

.play maps/example1.go
.play maps/example2.go
.play maps/example3.go
.play maps/example4.go
.play maps/example5.go
.play maps/example6.go
.play maps/example7.go

** Mendeklarasikan dan Membuat Maps

Mendeklarasikan dan membuat map dapat dilakukan dengan beberapa cara.

    type user struct {
        name     string
        username string
    }

    // Buatlah map yang diatur ke nilai nol nya,
    // yang dapat menyimpan data pengguna berdasarkan kunci bertipe string.
    // Mencoba menggunakan map ini akan mengakibatkan runtime error (panic).
    var users map[string]user

    // Membuat map yang diinisialisasi menggunakan operasi make,
    // yang dapat menyimpan nilai pengguna berdasarkan kunci bertipe string.
    users := make(map[string]user)

    // Membuat map yang diinisialisasi menggunakan konstruksi literal kosong,
    // yang dapat menyimpan nilai pengguna berdasarkan kunci bertipe string.
    users := map[string]user{}

Map yang diatur ke nilai nol nya tidak dapat digunakan dan akan menyebabkan program Anda panik.
Penggunaan fungsi bawaan make dan konstruksi literal akan membuat map siap digunakan.

    func main() {
        users := make(map[string]user)

        users["Roy"] = user{"Rob", "Roy"}
        users["Ford"] = user{"Henry", "Ford"}
        users["Mouse"] = user{"Mickey", "Mouse"}
        users["Jackson"] = user{"Michael", "Jackson"}

        for key, value := range users {
            fmt.Println(key, value)
        }
    }

Keluaran:

    Roy {Rob Roy}
    Ford {Henry Ford}
    Mouse {Mickey Mouse}
    Jackson {Michael Jackson}

Jika fungsi bawaan make digunakan untuk membuat map, maka operator penugasan
dapat digunakan untuk menambah dan memperbarui nilai pada map. Urutan bagaimana kunci/nilainya
dikembalikan ketika melakukan operasi range pada map tidak ditentukan oleh spesifikasi dan
terserah kepada kompilator untuk melakukannya.

    func main() {
        users := map[string]user{
            "Roy":     {"Rob", "Roy"},
            "Ford":    {"Henry", "Ford"},
            "Mouse":   {"Mickey", "Mouse"},
            "Jackson": {"Michael", "Jackson"},
        }

        for key, value := range users {
            fmt.Println(key, value)
        }
    }

Keluaran:

    Ford {Henry Ford}
    Jackson {Michael Jackson}
    Roy {Rob Roy}
    Mouse {Mickey Mouse}

Dalam hal ini, keluaran dikembalikan dalam urutan yang berbeda dari sebelumnya
tercantum dalam pembuatan awal. Algoritma saat ini untuk versi 1.16 akan mengembalikan hasilnya
dalam urutan acak setelah jumlah nilai mencapai batas tertentu. Sekali lagi,
ini adalah implementasi dari kompilator yang boleh diubah. Anda tidak dapat bergantung padanya.

** Mencari dan Menghapus Kunci dari Map

Setelah data disimpan di dalam map, untuk mengambil data apa pun, diperlukan pencarian dengan kunci.

    user1, exists1 := users["Bill"]
    user2, exists2 := users["Ford"]

    fmt.Println("Bill:", exists1, user1)
    fmt.Println("Ford:", exists2, user2)

Keluaran:

    Bill: false { }
    Ford: true {Henry Ford}

Untuk melakukan pencarian kunci, tanda kurung siku digunakan pada variabel map. Dua
nilai dapat dikembalikan dari pencarian map, nilai dan boolean yang mewakili
apakah nilainya ditemukan atau tidak. Jika Anda tidak perlu mengetahui hal ini,
Anda dapat mengabaikan variabel "exist".

Ketika kunci tidak ditemukan di map, operasi mengembalikan nilai tipe map
diatur ke status nilai nolnya. Anda dapat melihatnya dengan pencarian kunci "Bill". Jangan gunakan
nilai nol untuk menentukan apakah ada kunci di map atau tidak karena mungkin ada nilai nol
valid dan apa yang sebenarnya disimpan untuk kunci tersebut.

    delete(users, "Roy")

Ada fungsi bawaan bernama delete yang memungkinkan penghapusan data
dari map berdasarkan kunci.

** Batasan Kunci pada Map

Tidak semua tipe data bisa digunakan sebagai kunci pada map

    type slice []user
    Users := make(map[slice]user)

Error Kompilator:

    invalid map key type users

Slice adalah contoh baik dari tipe data yang tidak dapat digunakan sebagai kunci.
Hanya nilai yang dapat dijalankan melalui fungsi hash yang memenuhi syarat.
Cara yang baik untuk mengenali tipe data yang dapat menjadi kunci adalah
jika tipe data tersebut dapat digunakan dalam operasi perbandingan.
Anda tidak dapat membandingkan dua nilai slice.

** Catatan

- Map menyediakan cara untuk menyimpan dan mengambil pasangan kunci/nilai.
- Membaca kunci yang tidak ada akan mengembalikan nilai nol.
- Iterasi pada map selalu acak.
- Kunci pada map harus berupa nilai yang dapat dibandingkan.
- Elemen dalam map tidak dapat diambil alamat memorinya.
- Map adalah tipe data referensi.

** Tautan

- [[https://blog.golang.org/go-maps-in-action][Go maps in action]] - Andrew Gerrand
- [[https://www.ardanlabs.com/blog/2013/12/macro-view-of-map-internals-in-go.html][Macro View of Map Internals In Go]] - William Kennedy
- [[https://www.youtube.com/watch?v=Tl7mi9QmLns][Inside the Map Implementation]] - Keith Randall
- [[https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics][How the Go runtime implements maps efficiently (without generics)]] - Dave Cheney

* Latihan

Gunakan templat ini sebagai titik awal untuk menyelesaikan latihan. Solusi telah disediakan.

** Latihan 1

Deklarasikan dan buat map nilai integer dengan string sebagai kuncinya. Isi
map dengan lima nilai dan lakukan iterasi pada map untuk menampilkan pasangan kunci/nilai.

.play maps/exercise1.go
.play maps/answer1.go
