Operasi Pengurutan
Bagian ini memberikan contoh-contoh kode yang melakukan operasi pengurutan.

* Bubble Sort

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Tonton Video]]
- Perlu bantuan finansial, Isi [[https://www.ardanlabs.com/scholarship/][Formulir Beasiswa]]

Program contoh ini mengimplementasikan fungsi yang melakukan pengurutan bubble sort
pada sekelompok bilangan bulat.

- Lihat lebih lanjut di [[https://en.wikipedia.org/wiki/Bubble_sort][https://en.wikipedia.org/wiki/Bubble_sort]]

*Diagram*

    Bubble sort adalah algoritma pengurutan sederhana yang memeriksa setiap elemen dari input
    secara berulang, bandingkan elemen saat ini dengan yang ada
    setelahnya, menukar nilainya jika diperlukan.

    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Array Awal
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 10 ││ 05 ││ 25 ││ 15 ││ 30 │ ◁── Array setelah iterasi pertama
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 05 ││ 10 ││ 15 ││ 25 ││ 30 │ ◁── Array setelah iterasi kedua / Telah berurutan
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/bubble.go

* Insertion Sort

Program contoh ini mengimplementasikan fungsi yang melakukan insertion sort
terhadap himpunan bilangan bulat.

- Lihat lebih lanjut di [[https://en.wikipedia.org/wiki/Insertion_sort][https://en.wikipedia.org/wiki/Insertion_sort]]

*Diagram*

    Insertion sort melakukan pengulanagan dengan jumlah yang sama
    dengan panjang array dikurangi satu. Untuk array 5 angka,
    pengurutan akan diulang 4 kali. Dimulai dari indeks 1,
    pengurutan memindahkan nomor tersebut ke
    kiri menempatkannya dalam posisi terurut.

    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Array Awal
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Pindah [1]=30 ke kiri
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Setelah pengulangan pertama
    │ 10 ││ 30 ││ 05 ││ 25 ││ 15 │ ◁── Pindah [2]=05 ke kiri
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Setelah pengulangan kedua
    │ 05 ││ 10 ││ 30 ││ 25 ││ 15 │ ◁── Pundah [3]=25 ke kiri
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Setelah pengulangan ketiga
    │ 05 ││ 10 ││ 25 ││ 30 ││ 15 │ ◁── Pindah [4]=15 ke kiri
    └────┘└────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Setelah pengulangan keempat
    │ 05 ││ 10 ││ 15 ││ 25 ││ 30 │ ◁── Telah berurutan
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/insertion.go

* Heap Sort

Program contoh ini mengimplementasikan fungsi yang melakukan heap sort
terhadap himpunan bilangan bulat.

- Lihat lebih lanjut di [[https://en.wikipedia.org/wiki/Heapsort][https://en.wikipedia.org/wiki/Heapsort]]

*Diagram*

Heap sort membagi masukan menjadi array yang terurut dan yang belum terurut.
Algoritma secara iteratif mengurangi wilayah yang belum terurut dengan
mengekstrak elemen terbesar darinya dan memasukkannya ke dalam array yang terurut.
Algoritma berjalan dalam dua fase.

    Fase I
    Bagi daftar menjadi dua dan kerjakan setengah dari depan dari daftar, memindahkan
    nilai terbesar yang kita temukan ke depan daftar, lalu nilai terbesar yang kedua.

    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Array Awal
    │ 63 ││ 16 │ | │ 40 ││ 71 ││ 73 │ ◁── Periksa [1]=16 < [4]=73 : Tukar
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Setelah pengulangan pertama
    │ 63 ││ 73 │ | │ 40 ││ 71 ││ 16 │ ◁── Periksa [0]=63 < [3]=71 : Tukar
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Setelah pengulangan kedua
    │ 73 ││ 71 │ | │ 40 ││ 63 ││ 16 │ ◁── Fase 1 selesai
    └────┘└────┘ | └────┘└────┘└────┘

    Fase II
    Ambil daftar dan mulai memindahkan angka keluar dan masukkan ke dalam daftar terurut baru.
    Ambil angka di posisi pertama dan pindahkan ke daftar baru yang akan berisi hasil pengurutan akhir.
    Kemudian, pindahkan kembali angka terbesar yang kita temukan ke depan daftar.

    ┌────┐┌────┐┌────┐┌────┐┌────┐ |  ◁── Array Awal
    │ 73 ││ 71 ││ 40 ││ 63 ││ 16 │ |
    └────┘└────┘└────┘└────┘└────┘ |
    ┌────┐┌────┐┌────┐┌────┐ | ┌────┐ ◁── Setelah pengulangan pertama
    │ 71 ││ 63 ││ 40 ││ 16 │ | │ 73 │ ◁── Pindahkan 73 keluar dan 71 kedepan
    └────┘└────┘└────┘└────┘ | └────┘
    ┌────┐┌────┐┌────┐ | ┌────┐┌────┐ ◁── Setelah pengulangan kedua
    │ 63 ││ 16 ││ 40 │ | │ 71 ││ 73 │ ◁── Pindahkan 71 keluar dan 63 kedepan
    └────┘└────┘└────┘ | └────┘└────┘
    ┌────┐┌────┐ | ┌────┐┌────┐┌────┐ ◁── Setelah pengulangan ketiga
    │ 40 ││ 16 │ | │ 63 ││ 71 ││ 73 │ ◁── Pindahkan 63 keluar dan 40 kedepan
    └────┘└────┘ | └────┘└────┘└────┘
    ┌────┐ | ┌────┐┌────┐┌────┐┌────┐ ◁── Setelah pengulangan keempat
    │ 16 │ | │ 40 ││ 63 ││ 71 ││ 73 │ ◁── Pindahkan 40 keluar dan 16 kedepan
    └────┘ | └────┘└────┘└────┘└────┘
     | ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Setelah pengulangan kelimat
     | │ 16 ││ 40 ││ 63 ││ 71 ││ 73 │ ◁── Pindahkan 16 keluar / Telah berurutan
     | └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/heap.go

* Quick Sort

Program contoh ini mengimplementasikan fungsi yang melakukan quick sort
terhadap himpunan bilangan bulat.

- Lihat lebih lanjut di [[https://en.wikipedia.org/wiki/Quicksort][https://en.wikipedia.org/wiki/Quicksort]]

*Diagram*

    Quicksort adalah algoritma divide-and-conquer. Ia bekerja dengan memilih elemen 'pivot'
    dari array dan mempartisi elemen-elemen lainnya ke dalam dua sub-array,
    tergantung pada apakah mereka kurang dari atau lebih besar dari pivot.

    -------------------------------------------------------------------
    Contoh 1
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Array Awal
    │ 45 ││ 39 ││ 37 ││ 15 ││ 41 │ ◁── Nilai Pivot = 41
    └────┘└────┘└────┘└────┘└────┘ ◁── Urutkan elemen index 0 sampai 4
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 39 ││ 37 ││ 15 ││ 41 ││ 45 │ ◁── Pengurutan pertama selesai
    └────┘└────┘└────┘└────┘└────┘

    Dua element terakhir telah berurutan, fokus pada tiga elemen pertama.

    ┌────┐┌────┐┌────┐
    │ 39 ││ 37 ││ 15 │ ◁── Nilai Pivot = 15
    └────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 15 ││ 37 ││ 39 ││ 41 ││ 45 │ ◁── Berurutan
    └────┘└────┘└────┘└────┘└────┘

    -------------------------------------------------------------------
    Contoh 2
    ┌────┐┌────┐┌────┐┌────┐┌────┐ ◁── Array Awal
    │ 34 ││ 55 ││ 59 ││ 73 ││ 09 │ ◁── Nilai Pivot = 09
    └────┘└────┘└────┘└────┘└────┘ ◁──  Urutkan elemen index 0 sampai 4
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 55 ││ 59 ││ 73 ││ 34 │ ◁── Pengurutan pertama selesai
    └────┘└────┘└────┘└────┘└────┘

    Elemen pertama telah berurutan, fokus pada 4 elemen terakhir.

    ┌────┐┌────┐┌────┐┌────┐
    │ 55 ││ 59 ││ 73 ││ 34 │ ◁── Nilai Pivot = 34
    └────┘└────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 59 ││ 73 ││ 55 │ ◁── Pengurutan kedua selesai
    └────┘└────┘└────┘└────┘└────┘

     Dua elemen pertama telah berurutan, fokus pada tiga elemen terakhir.

    ┌────┐┌────┐┌────┐
    │ 59 ││ 73 ││ 55 │ ◁── Nilai Pivot = 55
    └────┘└────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 55 ││ 73 ││ 59 │ ◁── Pengurutan ketiga selesai
    └────┘└────┘└────┘└────┘└────┘

    Tiga elemen pertama telah berurutan, fokus pada dua elemen terakhir.

    ┌────┐┌────┐ ◁── Nilai Pivot = 59
    │ 73 ││ 59 │ ◁──  Pengurutan ketiga selesai
    └────┘└────┘
    ┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 09 ││ 34 ││ 55 ││ 59 ││ 73 │ ◁── Berurutan
    └────┘└────┘└────┘└────┘└────┘

.play algorithms/sorting/quick.go
