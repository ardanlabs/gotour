Fungsi
Fungsi adalah inti dari go dan menyediakan mekanisme untuk mengelompokkan dan mengatur kode kita menjadi bagian-bagian fungsional yang terpisah dan berbeda.

* Fungsi

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Tonton Video]]
- Perlu bantuan finansial, Isi [[https://www.ardanlabs.com/scholarship/][Formulir Beasiswa]]

Fungsi adalah inti dari go dan menyediakan mekanisme untuk mengelompokkan
dan mengatur kode kita menjadi bagian-bagian fungsional yang terpisah dan berbeda. Mereka bisa
digunakan untuk menyediakan API ke package` yang kita buat dan merupakan komponen inti
konkurensi.

Fungsi di Go memainkan peran sentral dalam menyusun kode dan mempromosikan kejelasan,
kemudahan pemeliharaaan, dan efisiensi. Memahami cara mendeklarasikan, mendefinisikan, dan
penggunaan fungsi sangat penting untuk menulis program Go yang efektif.

** Ulasan Kode

- *Contoh* *1:* Mengembalikan beberapa nilai
- *Contoh* *2:* Pengidentifikasi kosong
- *Contoh* *3:* Deklarasi Ulang
- *Contoh* *4:* Fungsi Anonimus / Closure
- *Contoh* *5:* Pemulihan dari panic

.play functions/example1.go
.play functions/example2.go
.play functions/example3.go
.play functions/example4.go
.play functions/example5.go

Fungsi adalah blok dasar program dan digunakan untuk merangkum
dan mengatur kode untuk modularitas dan penggunaan kembali yang lebih baik. Fungsi adalah blok kode
yang melakukan tugas tertentu atau serangkaian tugas terkait. Berikut ini ringkasan dari fungsi di Go:

** Mendeklarasikan Fungsi

Untuk mendeklarasikan suatu fungsi di Go, Anda menggunakan kata kunci `func` diikuti dengan
nama fungsi, daftar parameter yang diapit tanda kurung, dan opsional
tipe pengembalian. Sintaks umumnya adalah:

   func functionName(parameter1 type, parameter2 type, ...) return_type {
       // Function body
   }

For example:

   func add(x int, y int) int {
       return x + y
   }

** Parameter dan Nilai Kembalian

Fungsi dapat mengambil nol atau lebih parameter, yang merupakan nilai yang diteruskan ke
dalam fungsi ketika dipanggil. Setiap parameter terdiri dari nama dan tipe. Di dalam
contoh di atas, `add` mengambil dua parameter integer, `x` dan `y`.

Fungsi dapat mengembalikan nilai nol atau satu (atau tidak sama sekali, dalam hal ini Anda dapat menghilangkannya
tipe kembalian). Pernyataan `return` digunakan untuk menentukan nilai yang akan dikembalikan.
Pada contoh di atas, `add` mengembalikan bilangan bulat.

Go memungkinkan fungsi mengembalikan banyak nilai. Ini berguna jika Anda
ingin mengembalikan lebih dari satu hasil dari suatu fungsi. Misalnya:

   func divide(x, y float64) (float64, error) {
       if y == 0 {
           return 0, errors.New("division by zero")
       }
       return x / y, nil
   }

Dalam contoh ini, fungsi `divide` mengembalikan floating-point dan sebuah error
(jika terjadi pembagian dengan nol).

Go memungkinkan Anda menentukan nama untuk nilai yang dikembalikan dalam suatu fungsi.
Nilai pengembalian yang diberi nama secara otomatis diinisialisasi dan dapat digunakan seperti biasa
variabel dalam fungsi. Mereka sangat berguna ketika berhadapan dengan
fungsi kompleks atau penanganan kesalahan. Misalnya:

   func divide(x, y float64) (result float64, err error) {
       if y == 0 {
           err = errors.New("division by zero")
           return
       }
       result = x / y
       return
   }

** Pemanggilan Fungsi

Untuk memanggil suatu fungsi di Go, Anda menggunakan nama fungsi yang diikuti dengan daftar argumen
diapit tanda kurung. Jika fungsi memiliki beberapa nilai kembalian, Anda dapat menangkapnya
mereka dalam variabel. Misalnya:

   sum := add(3, 5)            // Panggil fungsi `add` dan berikan hasilnya ke variable `sum`
   result, err := divide(8, 2) // Panggil fungsi `divide` dan tangkap hasil keluaran dan error


** Parameter pada Fungsi Variadik

Go mendukung fungsi variadik, yang memungkinkan Anda meneruskan sejumlah variabel
argumen ke suatu fungsi. Untuk menentukan parameter variadik, Anda menggunakan elipsis
(`...`) diikuti dengan tipe parameter. Misalnya:

   func calculateSum(nums ...int) int {
       sum := 0
       for _, num := range nums {
           sum += num
       }
       return sum
   }

Anda dapat memanggil fungsi ini dengan sejumlah bilangan bulat.

** Fungsi Anonimus

Go mendukung fungsi anonim, juga dikenal sebagai closure. Ini adalah fungsi
tanpa nama, dan mereka dapat ditugaskan ke variabel dan digunakan sebagai argumen
fungsi lainnya. Closure sering digunakan di Go untuk tugas-tugas seperti mendefinisikan fungsi yang sejajar
atau untuk pemrograman bersamaan menggunakan goroutine.

   add := func(x, y int) int {
       return x + y
   }

   result := add(3, 5)

** Fungsi sebagai Tipe

Di Go, fungsi juga bisa digunakan sebagai tipe. Ini memungkinkan Anda untuk mendefinisikan fungsi
yang mengambil fungsi lain sebagai argumen atau mengembalikannya sebagai hasil. Ini merupakan fitur yang baik
untuk mengimplementasikan fungsi high-order and callbacks.

   type MathFunc func(int, int) int

   func operate(x, y int, op MathFunc) int {
       return op(x, y)
   }

Anda kemudian dapat meneruskan fungsi sebagai argumen ke fungsi `operate`.

** Fungsi Defer dan Panic

Go menyediakan dua fungsi bawaan khusus yang disebut `defer` dan `panic` untuk penanganannya
situasi diluar kendali dan manajemen sumber daya. `defer` digunakan untuk menjadwalkan suatu fungsi
panggilan untuk dieksekusi tepat sebelum fungsi kembali, sementara `panic` digunakan untuk
memicu kesalahan saat run-time dan melepaskan the stack.

** Catatan

- Fungsi dapat mengembalikan banyak nilai dan sebagian besar mengembalikan nilai error.
- Nilai error harus selalu diperiksa sebagai bagian dari logika pemrograman.
- Pengidentifikasi kosong (_) dapat digunakan untuk mengabaikan nilai kembalian.
- Sintaks: func, receiver, identifier, [parameter(s)], [return(s)], code block.
- Parameter variadik, argumen variadik, dan pembeberan sebuah slice.
- Fungsi adalah tipe: Anda dapat menggunakan fungsi sebagai parameter, argumen, dan nilai kembalian.
- Defer digunakan untuk menjadwalkan pemanggilan fungsi di fungsi lain.
- Panic memicu kesalahan run-time dan melepaskan stack.
- Pengembalian nama kurang mudah dibaca dan tidak idiomatis

** Bacaan Tambahan

- [[https://golang.org/doc/effective_go.html#functions][Effective Go]]
- [[https://www.ardanlabs.com/blog/2013/10/functions-and-naked-returns-in-go.html][Functions and Naked returns in Go]]
- [[https://www.ardanlabs.com/blog/2013/06/understanding-defer-panic-and-recover.html][Understanding defer panics and recover]]

* Latihan

Gunakan templat ini sebagai titik awal untuk menyelesaikan latihan. Solusi telah disediakan.

** Latihan 1

*Bagian* *A:* Deklarasikan tipe struct untuk menyimpan informasi tentang pengguna. Deklarasikan
sebuah fungsi yang menciptakan nilai dan mengembalikan tipe pointer jenis ini dan nilai error.
Panggil fungsi ini dari main dan tampilkan nilainya.

*Bagian* *B:* Lakukan panggilan kedua ke fungsi Anda tetapi kali ini abaikan nilai keluarannya
dan cukup uji nilai error nya.

.play functions/exercise1.go
.play functions/answer1.go
