Konstanta
Salah satu fitur unik dari Go adalah bagaimana bahasa tersebut mengimplementasikan konstanta.

* Konstanta

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Tonton Video]]
- Perlu bantuan finansial, Isi [[https://www.ardanlabs.com/scholarship/][Formulir Beasiswa]]

Salah satu fitur unik dari Go adalah bagaimana bahasa tersebut mengimplementasikan konstanta. 
Aturan untuk konstanta dalam spesifikasi bahasa ini unik untuk Go. Mereka memberikan 
fleksibilitas yang dibutuhkan Go untuk membuat kode yang kita tulis mudah dibaca dan intuitif 
sambil tetap menjaga keamanan tipe data.

Konstanta bisa memiliki jenis atau tidak. Ketika sebuah konstanta tidak memiliki jenis, 
itu dianggap memiliki jenis tertentu. Jenis konstanta dapat dikonversi secara implisit oleh kompilator. 
Semua ini terjadi pada waktu kompilasi dan bukan pada waktu runtime.

** Ulasan Kode

- *Contoh* *1:* Deklarasi dan inisiasi konstanta		
- *Contoh* *2:* Sistem tipe paralel (Jenis) (hilang)
- *Contoh* *3:* iota			
- *Contoh* *4:* Konversi implisit

.play constants/example1.go
.play constants/example2.go
.play constants/example3.go
.play constants/example4.go

    const ui = 12345     // jenis: integer
    const uf = 3.141592  // jenis: floating-point

Konstanta numerik yang tidak mepunyai jenis memiliki presisi sebanyak 256 bit seperti yang dinyatakan 
dalam spesifikasinya. Mereka berdasarkan jenis.

    const ti int     = 12345     // jenis: int
    const tf float64 = 3.141592  // jenis: float64

Konstanta yang mempunyai jenis masih menggunakan jenis bawaan konstan, tetapi presisi mereka dibatasi.

    const myUint8 uint8 = 1000 // Error Kompilasi: konstan 1000 melampaui batas uint8

Ini tidak memungkinkan karena angka 1000 terlalu besar untuk disimpan dalam uint8.

    var answer = 3 * 0.333  // float64 = KindFloat(3) * KindFloat(0.333)

Konstanta aritmatika mendukung penggunaan jenis konstan yang berbeda. Promosi Jenis digunakan
untuk menangani skenario yang berbeda. Semuanya terjadi secara implisit. Variabel jawaban 
dalam contoh ini akan memiliki tipe float64 dan mewakili 0.999 dengan presisi 64 bit.

    const third = 1 / 3.0  // KindFloat = KindFloat(1) / KindFloat(3.0)

Konstanta ketiga akan berjenis pecahan dan mewakili 1/3 dengan presisi 256 bit.

    const zero = 1 / 3  // KindInt = KindInt(1) / KindInt(3)

Konstanta nol akan berjenis bilangan bulat dan diatur menjadi 0 karena pembagian 
bilangan bulat tidak memiliki sisa.

    const one int8 = 1
    const two = 2 * one  // int8(2) * int8(1)

Ini adalah contoh konstanta aritmatika antara konstanta yang memiliki jenis dan tidak. 
Dalam kasus ini, konstanta suatu tipe dipromosikan dibandingkan konstanta jenis. 
Kedua konstanta tersebut akan memiliki tipe int8 dan diatur menjadi 2.

    const maxInt = 9223372036854775807

Ini adalah nilai integer maksimum untuk integer 64 bit.

    const bigger = 9223372036854775808543522345

Konstanta yang lebih besar memiliki nilai yang jauh lebih besar dari integer 64 bit, 
tetapi dapat disimpan dalam konstanta jenis int karena konstanta jenis int tidak 
terbatas pada 64 bit presisi.

    const bigger int64 = 9223372036854775808543522345

Error Kompilator:

    constant 9223372036854775808543522345 overflows int64

Namun, jika yang lebih besar adalah konstanta tipe int64, ini tidak akan dikompilasi.

** IOTA

IOTA menyediakan dukungan untuk mengatur konstanta integer berturut-turut. Kemungkinan 
nama ini berasal dari fungsi integer ⍳ dari bahasa pemrograman APL. Dalam APL, 
fungsi ⍳ (yang diwakili dengan huruf kesembilan dalam alfabet Yunani, iota) digunakan untuk 
membuat larik berbasis nol dari integer berurutan yang naik dengan panjang yang ditentukan.

    const (
        A1 = iota  // 0 : Dimulai dari 0
        B1 = iota  // 1 : Ditambah 1
        C1 = iota  // 2 : Ditambah 1
    )
    fmt.Println(A1, B1, C1)

Keluaran:

    0 1 2

Kata kunci iota berfungsi dalam blok konstan dan dimulai dengan nilai 0. Kemudian 
untuk setiap konstan berikutnya yang dideklarasikan dalam blok, iota bertambah 1.

    const (
        A2 = iota  // 0 : Dimulai dari 0
        B2         // 1 : Ditambah 1
        C2         // 2 : Ditambah 1
    )
    fmt.Println(A2, B2, C2)

Keluaran:

    0 1 2

Anda tidak perlu mengulangi penggunaan kata kunci iota. Sifat berturut-turut 
dari konstanta bilangan bulat diasumsikan setelah diterapkan.

    const (
        A3 = iota + 1  // 1 : 0 + 1
        B3             // 2 : 1 + 1
        C3             // 3 : 2 + 1
    )
    fmt.Println(A3, B3, C3)

Keluaran:

    1 2 3

Jika Anda tidak ingin menerapkan pola matematika, Anda dapat melakukan 
beberapa perhitungan matematika dan perhitungan itu akan diterapkan kembali 
dengan nilai iota yang meningkat.

    const (
        Ldate= 1 << iota  //  1 : Geser 1 ke kiri 0.  0000 0001
        Ltime             //  2 : Geser 1 ke kiri 1.  0000 0010
        Lmicroseconds     //  4 : Geser 1 ke kiri 2.  0000 0100
        Llongfile         //  8 : Geser 1 ke kiri 3.  0000 1000
        Lshortfile        // 16 : Geser 1 ke kiri 4.  0001 0000
        LUTC              // 32 : Geser 1 ke kiri 5.  0010 0000
)

    fmt.Println(Ldate, Ltime, Lmicroseconds, Llongfile, Lshortfile, LUTC)

Keluaran:

    1 2 4 8 16 32

Anda dapat menggunakan fitur ini seperti yang dilakukan oleh package Log untuk mengatur flag. 
Dalam kasus ini, operasi bit diterapkan dengan meningkatkan nilai iota untuk menghitung nilai flag.

** Catatan

- Konstanta bukanlah variable.
- Konstanta hanya ada pada saat kompilasi.
- Konstan yang tidak memiliki jenis bisa dikonversi secara implisit, sedangkan konstan dan variabel berjenis tidak.
- Pikirkan tentang konstanta tak berjenis sebagai memiliki Jenis, bukan Tipe.
- Pelajari tentang konversi eksplisit dan implisit.
- Lihat kemampuan konstanta dan penggunaannya dalam pustaka standar.

** Bacaan Tambahan

- [[https://golang.org/ref/spec#Constants][Constants specification]]    
- [[https://blog.golang.org/constants][Constants]] - Rob Pike    
- [[https://www.ardanlabs.com/blog/2014/04/introduction-to-numeric-constants-in-go.html][Introduction To Numeric Constants In Go]] - William Kennedy
		
* Latihan

Gunakan templat sebagai titik awal untuk menyelesaikan latihan. Solusi telah disediakan.

** Latihan 1

*Bagian* *A:* Mendeklarasikan konstanta tak berjenis dan berjenis dan menampilkan nilainya.

*Bagian* *B:* Membagi dua konstanta literal ke dalam variabel berjenis dan menampilkan nilainya.

.play constants/exercise1.go
.play constants/answer1.go
