Variabel
Variabel adalah inti dari bahasa pemrograman dan memberikan kemampuan membaca dan menulis ke memori.

* Variabel

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Tonton Video]]
- Perlu bantuan finansial, Isi [[https://www.ardanlabs.com/scholarship/][Formulir Beasiswa]]

Variables are at the heart of the language and provide the ability to read from
and write to memory. In Go, access to memory is type safe. This means the compiler
takes type seriously and will not allow us to use variables outside the scope of
how they are declared.

Variabel adalah inti dari bahasa pemrograman serta memberikan kemampuan untuk membaca dan menulis ke memori.
Dalam bahasa pemrograman Go, akses ke memori bersifat `type safe`. Ini berarti kompilator (compiler) sangat
memperhatikan tipe data dan tidak mengizinkan kita untuk menggunakan variable di luar tipe data yang telah di deklasarikan

** Code Review
** Ulasan Kode

- *Example* *1*: Sample program that shows how to declare variables.
- *Contoh* *1*: Contoh program yang menunjukkan cara mendeklarasikan variabel

.play variables/example1.go

** Built-in Types
** Tipe Data Bawaan
Types provide integrity and readability by asking 2 questions:
Tipe data memberikan keutuhan dan kemudahaan pembacaan dengan menananyakan 2 pertanyaan:

- What is the amount of memory to allocate? (e.g. 1, 2, 4, 8 bytes)
- Berapa banyak memory yang harus disediakan? (contoh 1, 2, 4, 8 bytes)
- What does that memory represent? (e.g. int, uint, bool,..)
- Apa yang mewakili memori tersebut? (contoh: tipe data int, uint, bool dan sebagainya)

Types can be specific to a precision such as int32 or int64:
Tipe data dapat spesifik hingga tingkat presisi tertentu, seperti int32 atau int64:

- uint8 represents an unsigned integer with 1 byte of allocation
- uint8 mewakili bilangan bulat (tanpa tanda positif atau negatif) dengan alokasi 1 byte.
- int32 represents a signed integer with 4 bytes of allocation. When you declare a type
using a non-precision based type (unit, int) the size of the value is based on the
architecture being used to build the program:
- int32 mewakili bilangan bulat bertanda (signed integer) dengan alokasi 4 byte.
Ketika kamu mendeklarasikan tipe data tanpa presisi (uint atau int),
ukuran memori bergantung pada arsitektur yang digunakan untuk membangun program tersebut:

- 32 bit arch: int represents a signed int at 4 bytes of memory allocation
- Pada arsitektur 32 bit: tipe data int mewakili bilangan bulat bertanda dengan alokasi memori sebesar 4 byte.
- 64 bit arch: int represents a signed int at 8 bytes of memory allocation
- Pada arsitektur 64 bit: tipe data int mewakili bilangan bulat bertanda dengan alokasi memori sebesar 8 byte.

** Word Size
** Ukuran kata?

The word size represents the amount of memory allocation required to store integers
and pointers for a given architecture. For example:
Ukuran kata (word size) mewakili jumlah alokasi memori yang diperlukan
untuk menyimpan bilangan bulat (integers) dan pointer pada suatu arsitektur tertentu.
Sebagai contoh:

- 32 bit arch: word size is 4 bytes of memory allocation
- Pada arsitektur 32 bit: ukuran kata (word size) adalah alokasi memori sebesar 4 byte.
- 64 bit arch: word size is 8 bytes of memory allocation
- Pada arsitektur 64 bit: ukuran kata (word size) adalah alokasi memori sebesar 8 byte.

This is important because Go has internal data structures (maps, channels, slices,
interfaces, and functions) that store integers and pointers. The size of these data
structures will be based on the architecture being used to build the program.
Hal ini penting karena Go memiliki struktur data internal (maps, channel, slices, interface, dan functions)
yang menyimpan bilangan bulat dan pointer. Ukuran dari struktur data ini akan bergantung pada arsitektur
yang digunakan untuk membuat program.

In Go, the amount of memory allocated for a value of type int, a pointer, or a word
will always be the same on the same architecture.
Dalam bahasa pemrograman Go, jumlah memori yang dialokasikan untuk nilai tipe int, pointer, atau kata (word)
akan selalu sama pada arsitektur yang sama.

** Zero Value Concept
** Konsep Nilai Nol atau Bawaan
Every single value you construct in Go is initialized at least to its zero value state
unless you specify the initialization value at construction. The zero value is the setting
of every bit in every byte to zero.
Setiap nilai yang Anda buat dalam bahasa pemrograman Go diinisialisasi setidaknya ke keadaan nilai nolnya,
kecuali Anda menentukan nilai inisialisasi saat konstruksi.
Nilai nol adalah pengaturan dari setiap bit dalam setiap byte menjadi nol.

This is done for data integrity and it’s not free. It takes time to push electrons
through the machine to reset those bits, but you should always take integrity over
performance.
Ini dilakukan untuk menjaga integritas data dan tidak sembarangn.
Memerlukan waktu untuk mendorong elektron melalui mesin untuk
mengatur ulang bit-bit tersebut, tetapi Anda seharusnya selalu mengutamakan integritas daripada kinerja.

    Type               Zero Value
    Tipe data           Nilai Nol
    Boolean            false
    Integer            0
    Float              0
    Complex            0i
    String             "" (empty)
    Pointer            nil

** Declare and Initialize
** Mendeklarasikan dan Menginisialisasi
The keyword var can be used to construct values to their zero value state for all types.
Kata kunci var dapat digunakan untuk membuat nilai menjadi keadaan nilai nol (zero value) untuk semua jenis tipe data.

    var a int
    var b string
    var c float64
    var d bool

    fmt.Printf("var a int \t %T [%v]\n", a, a)
    fmt.Printf("var b string \t %T [%v]\n", b, b)
    fmt.Printf("var c float64 \t %T [%v]\n", c, c)
    fmt.Printf("var d bool \t %T [%v]\n\n", d, d)

Keluaran:

    var a int    	int [0]
    var b string 	string []
    var c float64	float64 [0]
    var d bool   	bool [false]

Strings use the UTF8 character set, but are really just a collection of bytes.
String menggunakan set karakter UTF8, tetapi sebenarnya hanya kumpulan byte.

A string is a two-word internal data structure in Go:
Sebuah string adalah struktur data internal berukuran dua kata (two-word) dalam Go:
- The first word represents a pointer to a backing array of bytes
- Kata pertama mewakili sebuah pointer ke sebuah array byte yang mendukung
- The second word represents the length or the number of bytes in the backing array
- Kata kedua mewakili panjang atau jumlah byte dalam array pendukung (backing array).
- If the string is set to its zero value state, then the first word is nil and the
second word is 0.
- Jika string diatur ke keadaan nilai nolnya, maka kata pertama adalah nil dan kata kedua adalah 0.

Using the short variable declaration operator, you can declare, construct, and
initialize a value all at the same time.
Dengan menggunakan operator deklarasi variabel singkat, Anda dapat mendeklarasikan, membuat, dan menginisialisasi
sebuah nilai sekaligus.

    aa := 10       // int [10]
    bb := "hello"  // string [hello]
    cc := 3.14159  // float64 [3.14159]
    dd := true     // bool [true]

    fmt.Printf("aa := 10 \t %T [%v]\n", aa, aa)
    fmt.Printf("bb := \"hello\" \t %T [%v]\n", bb, bb)
    fmt.Printf("cc := 3.14159 \t %T [%v]\n", cc, cc)
    fmt.Printf("dd := true \t %T [%v]\n\n", dd, dd)

Keluaran:

    aa := 10         int [10]
    bb := "hello"    string [hello]
    cc := 3.14159    float64 [3.14159]
    dd := true       bool [true]

** Conversion vs Casting

Go doesn't have casting, but conversion. Instead of telling the compiler to map a
set of bytes to a different representation, the bytes need to be copied to a new
memory location for the new representation.
Go tidak memiliki casting, tetapi hanya konversi. Alih-alih memberi tahu kompilator untuk memetakan satu set byte
ke representasi yang berbeda, byte-byte tersebut perlu disalin ke lokasi memori baru untuk representasi yang baru.

    aaa := int32(10)
    fmt.Printf("aaa := int32(10) %T [%v]\n", aaa, aaa)

    Output:
    aaa := int32(10) int32 [10]

Go does have a package in the standard library called unsafe if you need to perform
an actual casting operation. You should really avoid that and be honest with yourself
why you are considering using it. Performing a conversion provides the highest level
of integrity for these types of operations.
Go memang memiliki sebuah paket dalam perpustakaan standarnya yang disebut "unsafe"
jika Anda memerlukan melakukan operasi pengecoran (casting) yang sebenarnya.
Namun, sebaiknya Anda menghindari penggunaan paket "unsafe" ini
dan jujur kepada diri sendiri mengapa Anda mempertimbangkan penggunaannya.
Melakukan konversi memberikan tingkat integritas tertinggi untuk jenis operasi semacam ini,
sementara penggunaan "unsafe" dapat memperkenalkan risiko dan ketidakamanan dalam kode Anda.

** Notes
** Catatan

- The purpose of all programs and all parts of those programs is to transform data from one form to the other.
- Tujuan dari semua program dan semua bagian dari program tersebut adalah untuk mengubah data dari satu bentuk ke bentuk lain.
- Code primarily allocates, reads and writes to memory.
- Kode secara utama mengalokasikan, membaca, dan menulis ke memori.
- Understanding type is crucial to writing good code and understanding code.
- Memahami tipe data adalah kunci untuk menulis kode yang baik dan memahami kode.
- If you don't understand the data, you don't understand the problem.
- Jika Anda tidak memahami data, Anda tidak memahami masalahnya.
- You understand the problem better by understanding the data.
- Anda memahami masalah dengan lebih baik dengan memahami data.
- When variables are being declared to their zero value, use the keyword var.
- Ketika variabel dideklarasikan ke nilai nol (zero value) mereka, gunakan kata kunci var.
- When variables are being declared and initialized, use the short variable declaration operator.
- Ketika variabel dideklarasikan dan diinisialisasi, gunakan operator deklarasi variabel singkat.

** Extra Reading
** Bacaan Tambahan

- [[http://golang.org/ref/spec#Boolean_types][Built-In Types]]
- [[https://golang.org/doc/effective_go.html#variables][Variables]]
- [[https://www.ardanlabs.com/blog/2013/08/gustavos-ieee-754-brain-teaser.html][Gustavo's IEEE-754 Brain Teaser]] - William Kennedy
- [[https://www.youtube.com/watch?v=sFUSP8Au_PE][What's in a name]]
- [[http://arcanesentiment.blogspot.com/2015/01/a-brief-history-of-type.html][A brief history of “type”]] - Arcane Sentiment

* Exercises
* Latihan

Use the template as a starting point to complete the exercises. A possible solution is provided.
Gunakan templat ini sebagai titik awal untuk menyelesaikan latihan. Sebuah solusi disediakan.
** Exercise 1
** Latihan 1

*Part* *A:* Declare three variables that are initialized to their zero value and
three declared with a literal value. Declare variables of type string, int and bool.
Display the values of those variables.
*Bagian* *A* Mendeklarasikan tiga variabel yang diinisialisasi dengan nilai nol dan
tiga dideklarasikan dengan nilai literal. Mendeklarasikan variabel dengan tipe data string, int, dan bool.
Tampilkan nilai-nilai dari variabel-variabel tersebut.

*Part* *B:* Declare a new variable of type float32 and initialize the variable by
converting the literal value of Pi (3.14).
*Bagian* *B* Deklarasikan sebuah variabel baru dengan tipe float32 dan inisialisasikan variabel tersebut
dengan mengonversi nilai literal Pi (3.14).

.play variables/exercise1.go
.play variables/answer1.go
