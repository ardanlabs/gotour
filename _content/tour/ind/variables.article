Variabel
Variabel adalah inti dari bahasa pemrograman dan memberikan kemampuan membaca dan menulis ke memori.

* Variabel

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Tonton Video]]
- Perlu bantuan finansial, Isi [[https://www.ardanlabs.com/scholarship/][Formulir Beasiswa]]

Variabel adalah inti dari bahasa pemrograman serta memberikan kemampuan untuk membaca dan menulis ke memori.
Dalam bahasa pemrograman Go, akses ke memori bersifat "type safe". Ini berarti kompilator (compiler) sangat
memperhatikan tipe data dan tidak mengizinkan kita untuk menggunakan variable di luar tipe data yang telah dideklasarikan

** Ulasan Kode

- *Contoh* *1*: Contoh program yang menunjukkan cara mendeklarasikan variabel

.play variables/example1.go

** Tipe Data Bawaan
Tipe data memberikan integritas dan kemudahaan pembacaan dengan menananyakan 2 pertanyaan:

- Berapa banyak memori yang harus disediakan? (contoh: 1, 2, 4, 8 bytes)
- Apa yang mewakili memori tersebut? (contoh: tipe data int, uint, bool dan sebagainya)

Tipe data dapat spesifik hingga tingkat presisi tertentu, seperti int32 atau int64:

- uint8 mewakili bilangan bulat (tanpa tanda positif atau negatif) dengan alokasi 1 byte.
- int32 mewakili bilangan bulat bertanda (positif atau negatif) dengan alokasi 4 byte.
Ketika anda mendeklarasikan tipe data tanpa presisi (uint atau int),
ukuran memori bergantung pada arsitektur yang digunakan untuk membangun program tersebut:

- Pada arsitektur 32 bit: tipe data int mewakili bilangan bulat bertanda dengan alokasi memori sebesar 4 byte.
- Pada arsitektur 64 bit: tipe data int mewakili bilangan bulat bertanda dengan alokasi memori sebesar 8 byte.

** Satuan Word

Satuan word mewakili jumlah alokasi memori yang diperlukan
untuk menyimpan bilangan bulat (integers) dan pointer pada suatu arsitektur tertentu.
Sebagai contoh:

- Pada arsitektur 32 bit: satuan word mewakili 4 bytes dari alokasi memori
- Pada arsitektur 64 bit: satuan word mewakili 8 bytes dari alokasi memori

Hal ini penting karena bahasa pemrograman Go memiliki struktur data internal (maps, channel, slices, interface, dan functions)
yang menyimpan bilangan bulat dan pointer. Ukuran dari struktur data ini akan bergantung pada arsitektur
yang digunakan untuk membuat program.

Dalam bahasa pemrograman Go, jumlah memori yang dialokasikan untuk nilai tipe int, pointer, atau suatu kata
akan selalu sama pada arsitektur yang sama.

** Konsep Nilai Nol
Setiap nilai yang Anda buat dalam bahasa pemrograman Go diinisialisasi setidaknya ke keadaan nilai nolnya,
kecuali Anda menentukan nilai inisial saat pembuatannya.
Nilai nol adalah pengaturan dari setiap bit dalam setiap byte menjadi nol.

Ini dilakukan untuk menjaga integritas data dan ini tidak sembarangan.
Memerlukan waktu untuk menggerakkan elektron dalam komputer untuk
mengatur ulang bit-bit tersebut, tetapi Anda seharusnya selalu mengutamakan integritas daripada kinerja.

    Tipe data           Nilai Nol
    Boolean            false
    Integer            0
    Float              0
    Complex            0i
    String             "" (empty)
    Pointer            nil

** Mendeklarasikan dan Menginisialisasi
Kata kunci var dapat digunakan untuk membuat nilai menjadi keadaan nilai nol (zero value) untuk semua jenis tipe data.

    var a int
    var b string
    var c float64
    var d bool

    fmt.Printf("var a int \t %T [%v]\n", a, a)
    fmt.Printf("var b string \t %T [%v]\n", b, b)
    fmt.Printf("var c float64 \t %T [%v]\n", c, c)
    fmt.Printf("var d bool \t %T [%v]\n\n", d, d)

Keluaran:

    var a int    	int [0]
    var b string 	string []
    var c float64	float64 [0]
    var d bool   	bool [false]

String menggunakan set karakter UTF8, tetapi sebenarnya hanya kumpulan bytes.

Sebuah string adalah struktur berukuran dua satuan word secara internal dalam Go:

- Satuan word pertama mewakili sebuah pointer ke sebuah kumpulan byte
- Satuan word kedua mewakili panjang atau jumlah byte dari kumpulan byte tersebut.
- Jika string diatur ke keadaan nilai nolnya, maka satuan word pertama adalah nil dan yang kedua adalah 0.

Dengan menggunakan operator deklarasi variabel singkat, Anda dapat mendeklarasikan, membuat, dan menginisialisasi
sebuah nilai sekaligus.

    aa := 10       // int [10]
    bb := "hello"  // string [hello]
    cc := 3.14159  // float64 [3.14159]
    dd := true     // bool [true]

    fmt.Printf("aa := 10 \t %T [%v]\n", aa, aa)
    fmt.Printf("bb := \"hello\" \t %T [%v]\n", bb, bb)
    fmt.Printf("cc := 3.14159 \t %T [%v]\n", cc, cc)
    fmt.Printf("dd := true \t %T [%v]\n\n", dd, dd)

Keluaran:

    aa := 10         int [10]
    bb := "hello"    string [hello]
    cc := 3.14159    float64 [3.14159]
    dd := true       bool [true]

** Konversi vs Casting
Go tidak memiliki casting, tetapi hanya konversi. Alih-alih memberi tahu kompilator(compiler) untuk memetakan satu set byte
ke representasi yang berbeda, byte-byte tersebut perlu disalin ke lokasi memori baru untuk representasi yang baru.

    aaa := int32(10)
    fmt.Printf("aaa := int32(10) %T [%v]\n", aaa, aaa)

Keluaran:

    aaa := int32(10) int32 [10]

Go memang memiliki sebuah paket (kumpulan kode) dalam perpustakaan standarnya yang disebut "unsafe"
jika Anda memerlukan operasi casting yang sebenarnya.
Namun, sebaiknya Anda menghindarinya dan bertanya kenapa anda mempertimbangkannya.
Melakukan konversi memberikan tingkat integritas yang tinggi untuk jenis operasi semacam ini.

** Catatan

- Tujuan dari semua program dan semua bagian dari program tersebut adalah untuk mengubah data dari satu bentuk ke bentuk lain.
- Kode pada dasarnya mengalokasikan, membaca, dan menulis ke memori.
- Memahami tipe data adalah kunci untuk menulis dan memahami kode dengan baik.
- Jika Anda tidak memahami data, Anda tidak memahami masalahnya.
- Anda memahami masalah dengan lebih baik dengan memahami data.
- Ketika variabel dideklarasikan ke nilai nol (zero value) mereka, gunakan kata kunci var.
- Ketika variabel dideklarasikan dan diinisialisasi, gunakan operator deklarasi variabel singkat.

** Bacaan Tambahan

- [[http://golang.org/ref/spec#Boolean_types][Built-In Types]]
- [[https://golang.org/doc/effective_go.html#variables][Variables]]
- [[https://www.ardanlabs.com/blog/2013/08/gustavos-ieee-754-brain-teaser.html][Gustavo's IEEE-754 Brain Teaser]] - William Kennedy
- [[https://www.youtube.com/watch?v=sFUSP8Au_PE][What's in a name]]
- [[http://arcanesentiment.blogspot.com/2015/01/a-brief-history-of-type.html][A brief history of “type”]] - Arcane Sentiment

* Latihan

Gunakan templat ini sebagai titik awal untuk menyelesaikan latihan. Sebuah solusi disediakan.
** Latihan 1

*Bagian* *A:* Deklarasikan tiga variabel yang diinisialisasi dengan nilai nol dan
tiga lainnya dideklarasikan dengan nilai literal. Deklarasikan variabel dengan tipe data string, int, dan bool.
Tampilkan nilai dari variabel-variabel tersebut.

*Bagian* *B:* Deklarasikan sebuah variabel baru dengan tipe float32 dan inisialisasikan variabel tersebut
dengan mengonversi nilai dari Pi (3.14).

.play variables/exercise1.go
.play variables/answer1.go
