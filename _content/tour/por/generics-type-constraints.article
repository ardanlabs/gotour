Tipo Como Restrição(Constraint)
Este é um novo conceito em Go onde uma restrição pode ser baseada em um conjunto de tipos concretos.

* Genéricos - Tipo Como Restrição

Este é um novo conceito em Go onde uma restrição pode ser baseada em um conjunto de tipos concretos.
Isso só funciona para genéricos.

** Vídeo

Assista à palestra que dei sobre Genéricos que o guiará através de todos os
exemplos nesta seção do Tour.

.html generics-video.html

** Revisão de Código

- *Exemplo* *1*: Restrição baseada em tipo
- *Exemplo* *2*: Restrição de tipo predefinido "comparable" (comparável)
- *Exemplo* *3*: Mistura de restrições de tipo e comportamento

.play generics/type-constraints/example1.go
.play generics/type-constraints/example2.go
.play generics/type-constraints/example3.go

** Explicativo

Funções genéricas criam um novo tipo de restrição que não pode ser resolvida declarando
um conjunto de métodos de comportamento.

    func Add[T ???](v1 T, v2 T) T {
        return v1 + v2
    }

Aqui está uma função genérica que deseja aceitar dois valores de algum tipo T, somá-los
e então retornar a soma para quem chamou. Este é um problema interessante porque o compilador 
precisa restringir a chamada à função apenas para valores que podem ser usados em uma operação de adição. 
Atualmente não há um mecanismo para declarar este tipo de restrição.

A decisão foi continuar a usar a interface para declarar a restrição e adicionar algo novo.

    type addOnly interface {
        string | int | int8 | int16 | int32 | int64 | float64
    }

Você pode declarar uma interface que define um conjunto de tipos que formam a restrição. Para então
aplicar esta interface à função genérica.

    func Add[T addOnly](v1 T, v2 T) T {
        return v1 + v2
    }

Agora o compilador pode validar que o conjunto de tipos é compatível com as operações
que a função precisa realizar com valores daqueles tipos. Quando a interface está
usando os tipos built-in, as interfaces são reutilizáveis entre pacotes. Quando a lista
de tipos representa tipos definidos pelo usuário do pacote, você deve lembrar que essas
funções genéricas são limitadas aos tipos de pacotes e nada mais.

Interfaces declaradas com um conjunto de tipos não podem ser usadas em uma função polimórfica
tradicional. Isso não faria sentido de qualquer maneira, mas é algo que não parece
Go no sentido de que esta mudança na interface não é ortogonal.

Uma ideia é ter identificadores pré-declarados para restrições de operações comuns.

    func index[T comparable](list []T, find T) int {
        for i, v := range list {
            if v == find {
                return i
            }
        }
        
        return -1
    }

A restrição comparable é declarada pela linguagem e aplica uma restrição que
os tipos devem ser capazes de serem usados em uma declaração de comparação. Neste exemplo,
tanto v quanto find são variáveis do tipo T e estão sendo comparadas. Há uma ideia
que um pacote na biblioteca padrão poderia fornecer um conjunto comum de restrições também.

Não existem restrições para declarar uma interface que contenha tanto um conjunto de tipos 
quanto um conjunto de métodos que definem comportamentos.

    type matcher[T any] interface {
        type person, food
        match(v T) bool
    }
        
    func match[T matcher[T]](list []T, find T) int {
        for i, v := range list {
            if v.match(find) {
                return i
            }
        }
        
        return -1
    }

Uma interface genérica é declarada onde T é o tipo de valor a ser passado para um
método chamado match. A interface também restringe seu uso apenas a valores de tipo definido pelo usuário
person e food.

Quando você olha para a função match, não há uma necessidade óbvia de restringir a
função apenas aos tipos person e food. Se este for o caso, a função match
deveria ser uma função polimórfica tradicional, não uma função genérica. Se houvesse um
bom motivo, uma função genérica poderia ser usada para aplicar este tipo de restrição.

Como uma observação à parte, não tenho certeza se essa funcionalidade é necessária ou faz sentido. 
Isso é algo que a comunidade precisará descobrir com o tempo.

* Exercícios

Use o template como um ponto de partida para completar os exercícios. Uma possível solução é fornecida.

** Exercício 1

Implemente uma função genérica chamada copyfy que é restrita apenas a fazer
cópias de slices do tipo string ou int.

.play generics/type-constraints/exercise1.go 
.play generics/type-constraints/answer1.go
