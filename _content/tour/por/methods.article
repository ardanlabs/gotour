Métodos
Uma função é chamada de método quando essa função tem um receiver declarado.

* Métodos

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Assista ao Vídeo]]
- Precisa de Assistência Financeira, Use Nosso [[https://www.ardanlabs.com/scholarship/][Formulário de Bolsa de Estudos]]

Uma função é chamada de método quando essa função tem um receiver declarado. O
receiver é o parâmetro que é declarado entre a palavra-chave func e o nome da
função.

** Revisão de Código

- *Exemplo* *1:* Declaração e comportamento do receiver
- *Exemplo* *2:* Métodos em tipos nomeados
- *Exemplo* *3:* Variáveis de função/método
- *Exemplo* *4:* Tipos de função
- *Exemplo* *5:* Semântica de valor e ponteiro

.play methods/example1.go
.play methods/example2.go
.play methods/example3.go
.play methods/example4.go
.play methods/example5.go

** Declarações de Método

Existem dois tipos de receivers, receivers de valor para implementar a semântica
de valor e receivers de ponteiro para implementar a semântica de ponteiro.

    type user struct {
        name  string
        email string
    }

    func (u user) notify() {
        fmt.Printf("Sending User Email To %s<%s>\n", u.name, u.email)
    }

    func (u *user) changeEmail(email string) {
        u.email = email
        fmt.Printf("Changed User Email To %s\n", email)
    }

A função notify é implementada com um receiver de valor. Isso significa que o
método opera sob semântica de valor e operará em sua própria cópia do valor usado
para fazer a chamada.

A função changeEmail é implementada com um receiver de ponteiro. Isso significa
que o método opera sob semântica de ponteiro e operará com acesso compartilhado
ao valor usado para fazer a chamada.

Fora algumas exceções, um conjunto de métodos de um tipo não deve
conter uma mistura de receivers de valor e ponteiro. A consistência semântica
dos dados é extremamente importante e isso inclui a declaração de métodos.

** Chamadas de Método

Ao fazer uma chamada de método, o compilador não se importa se o valor usado
para fazer a chamada corresponde exatamente à semântica dos dados do receiver.
O compilador só quer um valor ou ponteiro do mesmo tipo.

    bill := user{"Bill", "bill@email.com"}
    bill.notify()
    bill.changeEmail("bill@hotmail.com")

Você pode ver que um valor do tipo user é construído e atribuído à variável
bill. No caso da chamada do notify, a variável bill corresponde ao tipo receiver
que é um receiver de valor. No caso da chamada do changeEmail, a variável bill
não corresponde ao tipo de receiver que é um receiver de ponteiro. Entretanto,
o compilador aceita a chamada do método e compartilha a variável bill com o
método. Go se ajustará para fazer a chamada.

Isso funciona da mesma forma quando a variável usada para fazer a chamada é uma
variável de ponteiro.

    bill := &user{"Bill", "bill@email.com"}
    bill.notify()
    bill.changeEmail("bill@hotmail.com")

Neste caso, a variável bill é uma variável de ponteiro para um valor do tipo user.
Mais uma vez, Go se ajusta para fazer a chamada de método ao chamar o método notify.

Se Go não se ajustasse, então isso é o que você teria que fazer para realizar as mesmas
chamadas de método.

    bill := user{"Bill", "bill@email.com"}
    (&bill).changeEmail("bill@hotmail.com")

    bill := &user{"Bill", "bill@email.com"}
    (*bill).notify()

Fico feliz que você não precise fazer isso para fazer chamadas de método em Go.

** Orientação de Semântica de Dados Para Tipos Internos

Como uma orientação, se os dados com os quais estou trabalhando forem um tipo
interno (slice, map, channel, function, interface), use a semântica de valor
para mover os dados pelo programa. Isso inclui declarar campos em um tipo.
No entanto, quando estou lendo e escrevendo, você precisa se lembrar que estou
usando a semântica de ponteiro.

    type IP []byte
    type IPMask []byte

Esse tipos são declarados no pacote net que faz parte da biblioteca padrão.
Eles são declarados com um underlying type que é uma slice de bytes. Por causa
disso, esses tipos seguem as guidelines de tipos internos.

    func (ip IP) Mask(mask IPMask) IP {
        if len(mask) == IPv6len && len(ip) == IPv4len && allFF(mask[:12]) {
            mask = mask[12:]
        }
        if len(mask) == IPv4len && len(ip) == IPv6len &&
            bytesEqual(ip[:12], v4InV6Prefix) {
            ip = ip[12:]
        }
        n := len(ip)
        if n != len(mask) {
            return nil
        }
        out := make(IP, n)
        for i := 0; i < n; i++ {
            out[i] = ip[i] & mask[i]
        }
        return out
    }

Com o método Mask, a semântica de valor está em jogo para o receiver, parâmetro e
para o argumento de retorno. Este método aceita sua própria cópia de um valor Mask,
ele modifica esse valor e então retorna uma cópia da mutação. Este método está usando
semântica de valor para mutação. Isso não é um acidente ou aleatório.

Uma função pode decidir quais entradas e saídas de dados são necessárias. O que
ela não pode decidir é a semântica dos dados sobre como os dados entram ou saem.
Os dados orientam essa decisão e a função deve estar em conformidade. É por isso
que Mask implementa a API de mutação utilizando semântica de valor. Isso deve
respeitar a forma como uma slice é projetada para ser movida pelo programa.

    func ipEmptyString(ip IP) string {
        if len(ip) == 0 {
            return ""
        }
        return ip.String()
    }

A função `ipEmptyString` também usa semântica de valor para entrada e saída.
Esta função aceita sua própria cópia de um valor IP e retorna um valor string. Não
há uso de semântica de ponteiro porque os dados ditam a semântica dos dados e não
a função.

Uma exceção ao uso da semântica de valor é quando você precisa compartilhar uma
slice ou map com uma função que executa unmarshaling ou decoding.

** Orientação de Semântica de Dados Para Tipos Struct

Como uma orientação, se os dados com os quais estou trabalhando são um tipo struct,
então você deve pensar sobre o que os dados representam para tomar uma decisão.
Uma boa regra geral é perguntar se a struct representa dados ou uma API. Se a struct
representa dados, use a semântica de valor. Se a struct representa uma API, use
a semântica de ponteiro.

    type Time struct {
        sec  int64
        nsec int32
        loc  *Location
    }

Aqui está a struct Time do pacote time. Se você considerar que Time representa
dados, a semântica de valor deve ser usada para essa struct.

Ao examinar uma base de código existente e desejar saber qual era a semântica de
dados escolhida, procure por uma factory function. O tipo de retorno da factory
function deve ditar a semântica de dados escolhida pelo desenvolvedor.

    func Now() Time {
        sec, nsec := now()
        return Time{sec + unixToInternal, nsec, Local}
    }

Now é a factory function para construir valores Time. Veja o retorno, está usando
semântica de valor. Isso indica que você deve usar semântica de valor para valores
Time, o que significa que cada função obtém sua própria cópia do valor Time e os
campos em uma struct devem ser declarados como valores do tipo Time.

    func (t Time) Add(d Duration) Time {
        t.sec += int64(d / 1e9)
        nsec := int32(t.nsec) + int32(d%1e9)
        if nsec >= 1e9 {
            t.sec++
            nsec -= 1e9
        } else if nsec < 0 {
            t.sec--
            nsec += 1e9
        }
        t.nsec = nsec
        return t
    }

Add é um método que precisa realizar uma operação de mutação. Se você olhar com
atenção, verá que a função semântica de valor para mutação. O método Add obtém
sua própria cópia do valor Time usado para fazer a chamada, ele modifica sua própria
cópia e retorna uma cópia para o chamador. Mais uma vez, esta é a maneira mais
segura de realizar uma operação de mutação.

    func div(t Time, d Duration) (qmod2 int, r Duration) {}

Aqui está outro exemplo onde a função div aceita um valor do tipo Time e Duration
(int64) e retorna valores do tipo int e Duration. Semântica de valor para o tipo
Time e para todos os tipos built-in. Duration tem um underlying type de int64.

    func (t *Time) UnmarshalBinary(data []byte) error {}
    func (t *Time) GobDecode(data []byte) error {}
    func (t *Time) UnmarshalJSON(data []byte) error {}
    func (t *Time) UnmarshalText(data []byte) error {}

Esses quatro métodos do pacote Time parecem quebrar as regras de consistência da 
semântica de dados. Eles estão usando semântica de ponteiro, por quê? Porque eles
estão implementando uma interface onde a assinatura do método está bloqueada. Como
a implementação requer uma mutação, a semântica de ponteiro é a única escolha.

Aqui está uma orientação: Se a semântica de valor estiver em jogo, você pode mudar
para a semântica de ponteiro para algumas funções, desde que não permita que os
dados na cadeia de chamadas restante voltem para a semântica de valor. Depois
de mudar para semântica de ponteiro, todas as chamadas futuras a partir desse
ponto precisarão seguir a semântica de ponteiro. Você nunca, jamais, pode mudar
de ponteiro para valor. Nunca é seguro fazer uma cópia de um valor para o qual
um ponteiro aponta.

    func Open(name string) (file *File, err error) {
        return OpenFile(name, O_RDONLY, 0)
    }

A função Open do pacote os mostra que ao usar um valor do tipo File, a semântica
de ponteiro está em jogo. Valores File precisam ser compartilhados e nunca devem
ser copiados.

    func (f *File) Chdir() error {
        if f == nil {
            return ErrInvalid
        }
        if e := syscall.Fchdir(f.fd); e != nil {
            return &PathError{"chdir", f.name, e}
        }
        return nil
    }

O método Chdir está usando a receiver de ponteiro, apesar disso esse método
não altera o valor de File. Isso ocorre porque os valores File precisam ser
compartilhados e não podem ser copiados.

    func epipecheck(file *File, e error) {
        if e == syscall.EPIPE {
            if atomic.AddInt32(&file.nepipe, 1) >= 10 {
                sigpipe()
            }
        } else {
            atomic.StoreInt32(&file.nepipe, 0)
        }
    }

A função epipecheck também aceita valores File usando semântica de ponteiro.

** Métodos São Apenas Funções

Métodos são, na verdade, apenas funções que fornecem um syntactic sugar para
fornecer a capacidade dos dados exibirem comportamento.

    type data struct {
        name string
        age  int
    }

    func (d data) displayName() {
        fmt.Println("My Name Is", d.name)
    }

    func (d *data) setAge(age int) {
        d.age = age
        fmt.Println(d.name, "Is Age", d.age)
    }

Um tipo e dois métodos são declarados. O método displayName está usando
semântica de valor e setAge está usando semântica de ponteiro.

Nota: Não implemente setters e getters em Go. Estas não são APIs com propósito
e nestes casos é melhor exportar esses campos.
    
    d := data{
        name: "Bill",
    }

    d.displayName()
    d.setAge(21)

Um valor do tipo data é construído e chamadas de métodos são feitas.

    data.displayName(d)
    (*data).setAge(&d, 21)

Uma vez que métodos são apenas funções com syntactic sugar, os métodos podem
ser executados como funções. Você pode ver que o receiver é realmente um parâmetro,
é o primeiro parâmetro. Quando você chama um método o compilador o converte em
uma chamada de função por baixo dos panos.

Nota: Não execute métodos dessa forma, mas você poderá ver esta sintaxe em
mensagens de ferramentas.

** Conheça o Comportamento do Código

Se você conhece a semântica dos dados em jogo, então você conhece o comportamento
do código. Se você conhece o comportamento do código, então conhece o custo do código.
Uma vez que sei o custo, estou fazendo engenharia.

Dado este tipo e conjunto de métodos.

    type data struct {
        name string
        age  int
    }

    func (d data) displayName() {
        fmt.Println("My Name Is", d.name)
    }

    func (d *data) setAge(age int) {
        d.age = age
        fmt.Println(d.name, "Is Age", d.age)
    }

Você pode escrever o seguinte código.

    func main() {
        d := data{
            name: "Bill",
        }

        f1 := d.displayName
        f1()
        d.name = "Joan"
        f1()
    }

Resultado:

    My Name Is Bill
    My Name Is Bill

Você começa construindo um valor do tipo Data atribuindo-o à variável d.
Então você pega o método displayName, vinculado a d, e atribui ele a uma variável
chamada f1. Isso não é uma chamada de método, mas uma atribuição que cria um nível
de indireção. Funções são valores em Go e pertencem ao conjunto de tipos internos.

Após a atribuição, você pode chamar o método indiretamente através do uso da
variável f1. Isso exibe o nome Bill. Então você altera os dados para que o nome
agora seja Joan, e chama o método mais uma vez através da variável f1. Você não
vê a mudança. Bill é o resultado mais uma vez. Então por que?

.image /tour/eng/static/img/m1.png

Isso tem a ver com a semântica que está em jogo. O método displayName está usando
um receiver de valor então a semântica de valor está em jogo.

    func (d data) displayName() {
        fmt.Println("My Name Is", d.name)
    }

Isso significa que a variável f1 mantém e opera sua própria cópia de d.
Então chamar o método através da variável f1, sempre usará a cópia e essa cópia
é protegida contra alterações. Isso é o que você deseja com a semântica de valor.

Agora você vai fazer a mesma coisa, mas com o método setAge.

    func main() {
        d := data{
            name: "Bill",
        }

        f2 := d.setAge
        f2(45)
        d.name = "Sammy"
        f2(45)
    }

Resultado:

    Bill Is Age 45
    Sammy Is Age 45

Desta vez o método setAge é atribuído à variável f2. Mais uma vez, o método
é executado indiretamente através da variável f2 passando 45 para a idade de Bill.
Então o nome de Bill é alterado para Sammy e a variável f2 é usada novamente para
fazer a chamada. Desta vez você vê que o nome mudou.

.image /tour/eng/static/img/m2.png

A função setAge está usando um receiver de ponteiro então setAge não opera na
sua própria cópia da variável d, mas está operando diretamente na variável d.
Portanto, f2 está operando com acesso compartilhado e você vê a mudança.

    func (d *data) setAge(age int) {
        d.age = age
        fmt.Println(d.name, "Is Age", d.age)
    }

Sem conhecer a semântica dos dados em jogo, você não saberá o comportamento do código.
Essa semântica de dados é real e afeta o comportamento.

** Notas

- Métodos são funções que declaram uma variável receiver.
- Receivers vinculam um método a um tipo e podem usar semântica de valor ou ponteiro.
- Semântica de valor significa que uma cópia do valor é passada através dos limites do programa.
- Semântica de ponteiro significa que uma cópia do endereço dos valores é passada através dos limites do programa.
- Atenha-se a uma única semântica para um determinado tipo e seja consistente.

** Citações

"Métodos são válidos quando é prático e razoável que um dado exponha uma capacidade." - William Kennedy

** Leitura Extra

- [[https://golang.org/doc/effective_go.html#methods][Methods]]    
- [[https://www.ardanlabs.com/blog/2014/05/methods-interfaces-and-embedded-types.html][Methods, Interfaces and Embedded Types in Go]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2018/01/escape-analysis-flaws.html][Escape-Analysis Flaws]] - William Kennedy  
		 
* Exercícios

Use o modelo como ponto de partida para completar os exercícios. Uma possível solução é fornecida.

** Exercício 1

Declare uma struct que representa um jogador de baseball. Inclua name, atBats e hits.
Declare um método que calcula a média de rebatidas de um jogador. A fórmula é Hits / AtBats.
Declare uma slice desse tipo e inicialize a slice com vários jogadores. Itere a slice
mostrando o nome dos jogadores e a média de rebatidas.

.play methods/exercise1.go
.play methods/answer1.go
