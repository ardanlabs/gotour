Slices
`Slices` são uma estrutura de dados incrivelmente importante em Go. Elas formam a base de como gerenciamos e manipulamos dados de forma flexível, eficiente e dinâmica. É muito benéfico para todos os programadores em Go aprenderem como `Slices` funcionam e como usá-los.

* Slices

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Assista ao Vídeo]]
- Precisa de Assistência Financeira, Use a Nossa [[https://www.ardanlabs.com/scholarship/][Formulário de Bolsa de Estudos]]

`Slices` são uma estrutura de dados incrivelmente importante em Go. Elas formam a base de como gerenciamos e manipulamos dados de forma flexível, eficiente e dinâmica. É muito benéfico para todos os programadores em Go aprenderem como `Slices` funcionam e como usá-los.

.image /tour/eng/static/img/sl1.png

** Revisão de Código

- *Exemplo* *1:* Declarar e Obter o comprimento
- *Exemplo* *2:* Tipos por Referência
- *Exemplo* *3:* Anexando slices
- *Exemplo* *4:* Obter slices de slices
- *Exemplo* *5:* Slices e Referências
- *Exemplo* *6:* Strings e slices
- *Exemplo* *7:* Funções Variádicas
- *Exemplo* *8:* Mecânica do Range
- *Exemplo* *9:* Travessias Eficientes
- *Exemplo* *10:* Slicing com Três Índices

.play slices/example1.go
.play slices/example2.go
.play slices/example3.go
.play slices/example4.go
.play slices/example5.go
.play slices/example6.go
.play slices/example7.go
.play slices/example8.go
.play slices/example9.go 
.play slices/example10.go

** Construção de Slice

A construção de uma slice pode ser feita de várias maneiras.

    // Slice of string set to its zero value state.
    var slice []string

    // Slice of string set to its empty state.
    slice := []string{}

    // Slice of string set with a length and capacity of 5.
    slice := make([]string, 5)

    // Slice of string set with a length of 5 and capacity of 8.
    slice := make([]string, 5, 8)

    // Slice of string set with values with a length and capacity of 5.
    slice := []string{"A", "B", "C", "D", "E"}

Você pode ver que a função embutida make me permite alocar previamente tanto o comprimento
quanto a capacidade para o `array` subjacente. Se o compilador conhece o tamanho em tempo de
compilação, o `array` subjacente pode ser construído na pilha.

** Slice: Comprimento vs Capacidade

O comprimento de um `Slice` representa o número de elementos que podem ser lidos e escritos.
A capacidade representa o número total de elementos que existem no array subjacente a partir da posição do ponteiro.

Devido a sintaxe, slices têm a aparência e a sensação de um `array`.

    slice := make([]string, 5)
    slice[0] = "Apple"
    slice[1] = "Orange"
    slice[2] = "Banana"
    slice[3] = "Grape"
    slice[4] = "Plum"

Você pode distinguir entre a construção de um `slice` e a de um `array`, pois um `array` possui um tamanho
conhecido em tempo de compilação, enquanto os `slices` não têm necessariamente essa informação.

Se você tentar acessar um elemento além do comprimento do slice, você receberá um erro em tempo de execução.

    slice := make([]string, 5)
    slice[5] = "Raspberry"

Erro de Compilador:

    Error: panic: runtime error: index out of range slice[5] = "Runtime error"

Neste exemplo, o comprimento do `slice` é 5 e estou tentando acessar o sexto elemento, que não existe.

** Diretriz Semântica de Dados para `Slices`

Como diretriz, se os dados com os quais estou trabalhando são um `slice`, então use a
semântica de valor para mover os dados ao redor do meu programa. Isso inclui declarar campos em um tipo.

    func Foo(data []byte) []byte

    type Foo struct {
        X []int
        Y []string
        Z []bool
    }

Isso se aplica a todas as estruturas de dados internas do Go (slices, maps, channels, interfaces e functions).

Uma razão para mudar para a semântica de ponteiro é se você precisar compartilhar o `slice` para uma operação
de `decoding ou unmarshal`. Usar ponteiros para esses tipos de operações é aceitável, mas documente
isso se não for óbvio.

** Layout de Memória Contígua

A ideia por trás do `slice` é ter um `array`, que é a estrutura de dados mais eficiente em
relação ao hardware. No entanto, ainda é necessário ter a capacidade de ser dinâmico e
eficiente com a quantidade de dados necessária em tempo de execução e crescimento futuro.

    func main() {
        slice := make([]string, 5, 8)
        slice[0] = "Apple"
        slice[1] = "Orange"
        slice[2] = "Banana"
        slice[3] = "Grape"
        slice[4] = "Plum"

        inspectSlice(slice)
    }

    func inspectSlice(slice []string) {
        fmt.Printf("Length[%d] Capacity[%d]\n", len(slice), cap(slice))
        for i := range slice {
            fmt.Printf("[%d] %p %s\n", i, &slice[i], slice[i])
        }
    }

Resultado:

    Length[5] Capacity[8]
    [0] 0xc00007e000 Apple
    [1] 0xc00007e010 Orange
    [2] 0xc00007e020 Banana
    [3] 0xc00007e030 Grape
    [4] 0xc00007e040 Plum

A função `inspectSlice` mostra como um `slice` tem um `array` subjacente contíguo com um passo previsível.
Também mostra como um `slice` tem um comprimento e uma capacidade que podem ser diferentes.
Observe como a função print itera apenas sobre o comprimento do `slice`.

** Anexando Slices

A linguagem fornece uma função built-in chamada append para adicionar valores a um slice existente.

    var data []string

    for record := 1; record <= 102400; record++ {
        data = append(data, fmt.Sprintf("Rec: %d", record))
    }

A função `append` funciona com um `slice` mesmo quando o `slice` é inicializado no seu
estado de `zero value`. O design da API do append é interessante porque utiliza a mutação
semântica de valor. O append obtém sua própria cópia de um valor do `slice`, realiza a mutação
em sua própria cópia e, em seguida, retorna uma cópia de volta para o chamador.

Por que a API é projetada dessa forma? Isso ocorre porque o idioma é usar semântica de valor para mover
um valor de `slice` ao redor de um programa. Isso deve ser respeitado mesmo com uma operação de mutação.
Além disso, a mutação semântica de valor é a maneira mais segura de realizar a mutação, uma vez que a
mutação é realizada na própria cópia dos dados da função, isoladamente.

Append sempre mantém um bloco contíguo de memória para o array subjacente da `slice`, mesmo após o crescimento.
Isso é importante para o hardware.

.image /tour/eng/static/img/sl2.png

Sempre que a função `append` é chamada, a função verifica se o comprimento e a capacidade do `slice` são
iguais ou não. Se forem iguais, significa que não há mais espaço no `array` subjacente para o novo valor.
Nesse caso, o `append` cria um novo `array` subjacente (duplicando ou crescendo em 25%) e depois copia os
valores do `array` antigo para o novo. Em seguida, o novo valor pode ser adicionado.

.image /tour/eng/static/img/sl3.png

Se os comprimentos e capacidades não forem iguais, isso significa que há uma capacidade extra disponível
para a operação de anexação. Um elemento é retirado da capacidade e adicionado ao comprimento do `slice`.
Isso torna a operação de anexação muito eficiente.

Quando o `array` subjacente tem 1024 elementos de capacidade ou menos, novos `arrays` subjacentes são construídos
dobrando o tamanho do `array` existente. Uma vez que o `array` subjacente cresce além de 1024 elementos,
o crescimento ocorre em 25%.

*NOTA:* *A* *forma *que* *função* *append* *aumenta* *a* *capacidade* *do* *array*
*subjacente* *mudou* *desde* *Go* *1.18.*

- [[https://tip.golang.org/doc/go1.18#runtime][https://tip.golang.org/doc/go1.18#runtime]]

** Slicing de Slices

`Slices` fornecem a capacidade de evitar cópias extras e alocações de `heap` do `array` subjacente
quando é necessário isolar certos elementos do `array` subjacente para diferentes operações.

A sintaxe de slicing` é representada pela notação de lista [a:b), o que significa incluir
elementos do índice a até b, mas não incluindo b.

    slice1 := []string{"A", "B", "C", "D", "E"}
    slice2 := slice1[2:4]

A variável slice2 é um novo valor de `slice` que está compartilhando o mesmo `array` subjacente que a
slice1 está usando. No entanto, slice2 só permite acessar os elementos nos índices 2 e 3 (C e D) do
array subjacente original do `slice`. O comprimento de slice2 é 2, não 5 como em slice1, e a capacidade é 3,
pois agora existem 3 elementos a partir dessa posição de ponteiro.

.image /tour/eng/static/img/sl4.png

Uma forma melhor de pensar sobre `slicing` é focar no comprimento usando esta notação [a:a+len],
onde a representa o índice a até a mais o comprimento. Isso ajudará a reduzir erros ao calcular novos `slices`.

Isso pode ser feito usando a função `inspect`.

    func inspectSlice(slice []string) {
        fmt.Printf("Length[%d] Capacity[%d]\n", len(slice), cap(slice))
        for i, s := range slice {
            fmt.Printf("[%d] %p %s\n",
                i,
                &slice[i],
                s)
        }
    }

Você pode ver isso em ação.

    slice1 := []string{"A", "B", "C", "D", "E"}
    slice2 := slice1[2:4]
    inspectSlice(slice1)
    inspectSlice(slice2)

Resultado:

    Length[5] Capacity[5]
    [0] 0xc00007e000 A
    [1] 0xc00007e010 B
    [2] 0xc00007e020 C
    [3] 0xc00007e030 D
    [4] 0xc00007e040 E
    Length[2] Capacity[3]
    [0] 0xc00007e020 C     <-- SAME AS INDEX 2 IN SLICE 1
    [1] 0xc00007e030 D     <-- SAME AS INDEX 3 IN SLICE 1

Observe como os dois `slices` diferentes estão compartilhando o mesmo `array` subjacente.
Isso pode ser visto comparando os endereços de memória.

A vantagem aqui é que não há alocações. O compilador conhece o tamanho do `array` subjacente
para a slice1 em tempo de compilação. Passar uma cópia do valor do `slice` para a função `inspectSlice`
mantém tudo na pilha.

** Mutação do Array Subjacente

Quando você usa slice2 para alterar o valor da `string` no índice 0, qualquer valor do `slice`
que esteja compartilhando o mesmo `array` subjacente (onde o endereço para aquele índice faz
parte do comprimento dessa `slice`) verá a alteração.

    slice1 := []string{"A", "B", "C", "D", "E"}
    slice2 := slice1[2:4]
    slice2[0] = "CHANGED"
    inspectSlice(slice1)
    inspectSlice(slice2)

Resultado:

    Length[5] Capacity[5]
    [0] 0xc00007e000 A
    [1] 0xc00007e010 B
    [2] 0xc00007e020 CHANGED
    [3] 0xc00007e030 D
    [4] 0xc00007e040 E
    Length[2] Capacity[3]
    [0] 0xc00007e020 CHANGED
    [1] 0xc00007e030 D

Você sempre deve estar ciente quando estiver modificando um valor em uma posição de índice
se o `array` subjacente está sendo compartilhado com outro `slice`. Isso é importante para garantir
que as alterações não afetem inesperadamente outras partes do seu código que dependem do mesmo `array` subjacente.

.image /tour/eng/static/img/sl5.png

E se você usar a função built-in `append` em vez disso?

    slice1 := []string{"A", "B", "C", "D", "E"}
    slice2 := slice1[2:4]
    slice2 = append(slice2, "CHANGED")
    inspectSlice(slice1)
    inspectSlice(slice2)

Resultado:

    Length[5] Capacity[5]
    [0] 0xc00007e000 A
    [1] 0xc00007e010 B
    [2] 0xc00007e020 C
    [3] 0xc00007e030 D
    [4] 0xc00007e040 CHANGED
    Length[3] Capacity[3]
    [0] 0xc00007e020 C
    [1] 0xc00007e030 D
    [2] 0xc00007e040 CHANGED

A função `append` cria o mesmo efeito colateral, entretanto oculto. Neste caso, trazer mais
comprimento da capacidade para slice2 fez com que o valor no endereço `0xc00007e040`
fosse alterado. Infelizmente, slice1 já tinha esse endereço como parte do seu comprimento.

.image /tour/eng/static/img/sl6.png

Uma maneira de evitar o efeito colateral é usar um `slice` de três índices ao construir slice2,
para que o comprimento e a capacidade sejam iguais a 2.

    slice1 := []string{"A", "B", "C", "D", "E"}
    slice2 := slice1[2:4:4]
    inspectSlice(slice1)
    inspectSlice(slice2)

Resultado:

    Length[5] Capacity[5]
    [0] 0xc00007e000 A
    [1] 0xc00007e010 B
    [2] 0xc00007e020 C
    [3] 0xc00007e030 D
    [4] 0xc00007e040 E
    Length[2] Capacity[2]
    [0] 0xc00007e020 C
    [1] 0xc00007e030 D

A sintaxe para um `slice` de três índices é [a:b:c], onde b e c devem ser os mesmos,
já que [a-b] define o comprimento e [a-c] define a capacidade. Agora, o comprimento e a
capacidade de slice2 são iguais.

Agora, você pode usar a função embutida append novamente, como antes.

    slice1 := []string{"A", "B", "C", "D", "E"}
    slice2 := slice1[2:4:4]
    slice2 = append(slice2, "CHANGED")
    inspectSlice(slice1)
    inspectSlice(slice2)

Resultado:

    Length[5] Capacity[5]
    [0] 0xc00007e000 A
    [1] 0xc00007e010 B
    [2] 0xc00007e020 C
    [3] 0xc00007e030 D
    [4] 0xc00007e040 E
    Length[3] Capacity[4]
    [0] 0xc000016080 C
    [1] 0xc000016090 D
    [2] 0xc0000160a0 CHANGED

Observe que após a chamada para `append`, slice2 possui um novo `array` subjacente.

.image /tour/eng/static/img/sl7.png

Isso pode ser visto ao comparar os endereços de cada `slice`. Neste caso, a mutação
em slice2 não causou um efeito colateral em slice1.

** Copiando Slices Manualmente

Existe uma função embutida chamada `copy` que permite a cópia superficial de `slices`.
Como uma `string` possui um `array` subjacente de bytes que são imutáveis, ela pode ser usada
como uma origem, mas nunca como um destino.

    slice1 := []string{"A", "B", "C", "D", "E"}
    slice3 := make([]string, len(slice1))
    copy(slice3, slice1)

    inspectSlice(slice1)
    inspectSlice(slice3)

Resultado:

    Length[5] Capacity[5]
    [0] 0xc00005c050 A
    [1] 0xc00005c060 B
    [2] 0xc00005c070 C
    [3] 0xc00005c080 D
    [4] 0xc00005c090 E
    Length[5] Capacity[5]
    [0] 0xc00005c0a0 A
    [1] 0xc00005c0b0 B
    [2] 0xc00005c0c0 C
    [3] 0xc00005c0d0 D
    [4] 0xc00005c0e0 E

Desde que o `slice` de destino tenha o tipo e o comprimento adequados, a função `built-in` `copy` pode realizar uma cópia rasa.

** Slices Usam a Mutação Semântica de Ponteiro

É importante lembrar que, mesmo ao usar semântica de valor para mover um `slice` ao redor do programa,
ao ler e escrever em um `slice`, você está usando semântica de ponteiro. Compartilhar elementos individuais
de um `slice` com diferentes partes do seu programa pode causar efeitos colaterais indesejados.

    // Construct a slice of 1 user, set a pointer to that user,
    // use the pointer to update likes.

    users := make([]user, 1)
    ptrUsr0 := &users[0]
    ptrUsr0.likes++

    for i := range users {
        fmt.Printf("User: %d Likes: %d\n", i, users[i].likes)
    }

Resultado:

    User: 0 Likes: 1

Um `slice` é usada para manter uma coleção de usuários. Em seguida, um ponteiro é
definido para o primeiro usuário e usado para atualizar os "likes". A saída mostra
que o uso do ponteiro está funcionando.

.image /tour/eng/static/img/sl8.png

Então, um novo usuário é adicionado à coleção e o ponteiro é usado novamente para adicionar um "like" ao primeiro usuário.

    // Append a new user to the collection. Use the pointer again
    // to update likes.

    users = append(users, user{})
    ptrUsr0.likes++

    for i := range users {
        fmt.Printf("User: %d Likes: %d\n", i, users[i].likes)
    }

Resultado:

    User: 0 Likes: 1
    User: 1 Likes: 0

No entanto, como a função `append` substituiu o `array` subjacente por um novo, o ponteiro
está atualizando o antigo `array` subjacente e os "likes" são perdidos. A saída mostra que
os "likes" para o primeiro usuário não aumentaram.

.image /tour/eng/static/img/sl9.png

É importante ter cuidado e saber se um `slice` será usado em uma operação de anexação durante
a execução de um programa. Você precisa considerar como compartilha o `slice`.
Compartilhar índices individuais pode não ser a melhor ideia. Compartilhar o valor inteiro do `slice`
também pode não funcionar quando a operação de anexação está em andamento. Provavelmente, usar um `slice`
como campo em uma estrutura (struct) e compartilhar o valor da estrutura é uma maneira melhor de abordar esse problema.

** Eficiência na Travessia Linear

A beleza de um `slice` está na sua capacidade de permitir a realização de travessias lineares
que são mecanicamente simpáticas, enquanto compartilha dados usando semântica de valor para minimizar alocações de `heap`.

    x := []byte{0x0A, 0x15, 0x0e, 0x28, 0x05, 0x96, 0x0b, 0xd0, 0x0}

    a := x[0]
    b := binary.LittleEndian.Uint16(x[1:3])
    c := binary.LittleEndian.Uint16(x[3:5])
    d := binary.LittleEndian.Uint32(x[5:9])

    println(a, b, c, d)

O código está realizando uma travessia linear criando valores de `slice` que leem
diferentes seções do array de bytes do início ao fim.

.image /tour/eng/static/img/sl10.png

Todos os dados neste código permanecem na pilha. Não são feitas cópias extras dos dados dentro do `slice` de `bytes`.

** Notas

- Os `slices` são como `arrays` dinâmicos com funcionalidades especiais e `built-in`.
- Existe uma diferença entre o comprimento e a capacidade de um `slice`, e cada um deles serve a um propósito.
- Os `slices` permitem múltiplas "visões" do mesmo `array` subjacente.
- Os `slices` podem crescer através do uso da função `bulit-in` append.

** Leitura Extra

- [[https://blog.golang.org/go-slices-usage-and-internals][Go Slices: usage and internals]] - Andrew Gerrand    
- [[https://blog.golang.org/strings][Strings, bytes, runes and characters in Go]] - Rob Pike    
- [[https://blog.golang.org/slices][Arrays, slices (and strings): The mechanics of 'append']] - Rob Pike        
- [[https://www.ardanlabs.com/blog/2013/08/understanding-slices-in-go-programming.html][Understanding Slices in Go Programming]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2013/08/collections-of-unknown-length-in-go.html][Collections Of Unknown Length in Go]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2013/09/iterating-over-slices-in-go.html][Iterating Over Slices In Go]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2013/09/slices-of-slices-of-slices-in-go.html][Slices of Slices of Slices in Go]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2013/12/three-index-slices-in-go-12.html][Three-Index Slices in Go 1.2]] - William Kennedy    
- [[https://github.com/golang/go/wiki/SliceTricks][SliceTricks]]    
- [[https://go-review.googlesource.com/c/go/+/347917][runtime: Make slice growth formula a bit smoother]] - Go Team 
			 
* Exercícios

Use o template como ponto de partida para completar os exercícios. Uma possível solução é fornecida.

** Exercício 1

*Parte* *A:* Declare um `slice` vazio de inteiros. Crie um `loop` que adiciona 10 valores ao `slice`.
Itere sobre o `slice` e exiba cada valor.

*Parte* *B:* Declare um `slice` de cinco `strings` e inicialize o `slice` com valores literais de `string`.
Exiba todos os elementos. Pegue um `slice` dos índices um e dois e exiba a posição do índice e o
valor de cada elemento no novo `slice`.

.play slices/exercise1.go		  
.play slices/answer1.go
