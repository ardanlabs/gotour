Interfaces
Interfaces estruturam e incentivam o design por composição em programas.

* Interfaces

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Assista ao Vídeo]]
- Precisa de Assistência Financeira, Use Nosso [[https://www.ardanlabs.com/scholarship/][Formulário de Bolsa de Estudos]]

Interfaces estruturam e incentivam o design por composição em programas. Elas permitem
e impõem divisões limpas entre componentes. A padronização das interfaces pode definir
expectativas claras e consistentes. Desacoplar significa reduzir as dependências entre
componentes e os tipos que eles usam. Isso leva à corretude, qualidade e facilidade de
manutenção.

** Revisão de Código

- *Exemplo* *1:* Código Repetitivo Que Precisa de Polimorfismo
- *Exemplo* *2:* Polimorfismo
- *Exemplo* *3:* Conjunto de Métodos
- *Exemplo* *4:* Endereço do Valor
- *Exemplo* *5:* Armazenamento Por Valor
- *Exemplo* *6:* Asserções de Tipo
- *Exemplo* *7:* Asserções Condicionais de Tipo
- *Exemplo* *8:* A Interface Vazia e Switches de Tipo
- *Exemplo* *9:* Armazenando Valores

.play interfaces/example1.go
.play interfaces/example2.go
.play interfaces/example3.go
.play interfaces/example4.go
.play interfaces/example5.go
.play interfaces/example6.go
.play interfaces/example7.go
.play interfaces/example8.go
.play interfaces/example9.go

** Semântica de Interface

Interfaces permitem agrupar dados concretos de acordo com o que os dados podem
fazer. Trata-se de focar no que os dados podem fazer e não no que os dados são.
As interfaces também ajudam meu código a se desacoplar de mudanças, solicitando
dados concretos baseado no que eles podem fazer. Não é limitado a um tipo de dado.

Você deve fazer o possível para entender quais alterações de dados estão por vir
e usar interfaces para desacoplar o seu programa dessas alterações. Interfaces
devem descrever comportamento e não estado. Elas devem ser verbos e não substantivos.

Interfaces generalizadas que focam no comportamento são as melhores. Interfaces com
mais de um método têm mais de um motivo para mudar. Interfaces baseadas em substantivos
tendem a ser menos reutilizáveis, são mais suscetíveis a mudanças e anulam o propósito
de uma interface. A incerteza sobre a mudança não é uma licença para adivinhar, mas
uma diretiva para PARAR e aprender mais. Você deve distinguir entre código que defende
contra fraudes vs que protege contra acidentes.

Use uma interface quando:

- Os usuários da API precisam fornecer detalhes de implementação.
- As APIs têm múltiplas implementações que precisam ser mantidas internamente.
- Partes da API que podem mudar foram identificadas e requerem desacoplamento.

Não use uma interface:
    
- Só para usar uma interface.
- Para generalizar um algoritmo.
- Quando os usuários declaram suas próprias interfaces.
- Se não estiver claro como a interface melhora o código.

** Interfaces não têm valor

A primeira coisa importante a entender é que um tipo interface declara um tipo sem valor.

    type reader interface {
        read(b []byte) (int, error)
    }

O tipo reader não é um tipo struct, mas um tipo interface. A sua declaração não
é baseada em estado, mas em comportamento. Tipos interface declaram um conjunto
de métodos de comportamento que os dados concretos devem exibir para satisfazer
a interface. Não há nada de concreto sobre os tipos interface, portanto eles não
têm valor.

    var r reader

Por não possuírem valor, a construção de uma variável (como r) é estranha porque
no nosso modelo de programação, r não existe, não tem valor. Não há nada no próprio
r que você possa manipular ou transformar. Este é um conceito crítico de entender.
Eu nunca trabalho com valores de interface, apenas com valores concretos. Uma
interface tem uma representação do compilador (tipo interno), mas em nosso modelo
de programação, interfaces não têm valor.

** Implementando Interfaces

Go é uma linguagem que é sobre convenção acima de configuração. Quando se trata
de um tipo concreto que implementa uma interface não é diferente.

    type reader interface {
        read(b []byte) (int, error)
    }

    type file struct {
        name string
    }

    func (file) read(b []byte) (int, error) {
        s := "<rss><channel><title>Going Go</title></channel></rss>"
        copy(b, s)
        return len(s), nil
    }

O código declara um tipo chamado file e então declara um método chamado read. Por
causa dessas duas declarações, você pode dizer o seguinte:

"O tipo concreto file agora implementa a interface reader usando semântica de valor"

Toda palavra dita é importante. Em Go, tudo o que você precisa fazer é declarar o
conjunto completo de métodos de comportamento definidos por uma interface para
implementar a interface. Neste caso, foi isso que eu fiz, uma vez que a interface
reader declara apenas um único ato de comportamento chamado read.

    type reader interface {
        read(b []byte) (int, error)
    }

    type pipe struct {
        name string
    }

    func (pipe) read(b []byte) (int, error) {
        s := `{name: "Bill", title: "developer"}`
        copy(b, s)
        return len(s), nil
    }

Este código declara um tipo chamado pipe e então declara um método chamado read.
Por causa dessas duas declarações, você pode dizer o seguinte:

"O tipo concreto piep agora implementa a interface reader usando semântica de valor"

Agora você tem dois tipos concretos que implementam a interface reader. Dois tipos
concretos, cada um com sua própria implementação. Um tipo está lendo arquivos do sistema
e outros da rede.

** Polimorfismo

Polimorfismo significa que um pedaço do código muda seu comportamento dependendo do
dado concreto no qual está operando. Isso foi dito por Tom Kurtz, que é o inventor de
BASIC. Essa é a definição que usaremos daqui para frente.

    // retrieve pode ler qualquer dispositivo e processar os dados.
    func retrieve(r reader) error {
        data := make([]byte, 100)

        len, err := r.read(data)
        if err != nil {
            return err
        }

        fmt.Println(string(data[:len]))
        return nil
    }

Dê uma olhada no tipo de dados que a função aceita. Ela quer um valor do tipo reader.
Isso é impossível, pois reader é uma interface e interfaces não têm valor.
Não se pode pedir por um valor reader, eles não existem.

Se a função não está pedindo por um valor reader, então pelo que a função está
pedindo? Ela está pedindo a única coisa que pode pedir: dados concretos.

A função retrieve é uma função polimórfica porque solicita dados concretos não
com base no que os dados são (tipo concreto), mas com base no que os dados podem
fazer (tipo interface).

    f := file{"data.json"}
    p := pipe{"cfg_service"}

    retrieve(f)
    retrieve(p)

Você pode construir dois valores concretos, um do tipo file e outro do tipo pipe.
Então você pode passar uma cópia de cada valor para a função polimórfica. Isso ocorre
porque cada um desses valores implementa o conjunto completo de métodos de comportamento
definido pela interface reader.

Quando o valor concreto de file é passado para retrieve, o valor é armazenado dentro
de um tipo interno de duas palavras que representa o valor da interface.

.image /tour/eng/static/img/i1.png

A segunda palavra do valor da interface aponta para o valor que está sendo armazenado.
Nesse caso, é uma cópia do valor de file, já que a semântica de valor está em jogo. A
primeira palavra aponta para uma estrutura de dados especial chamada iTable.

A iTable serve a 2 propósitos:

- Descreve o tipo do valor que está sendo armazenado. No meu caso, é um valor de file.
- Fornece ponteiros de função para a implementação concreta do conjunto de métodos do tipo de valor que está sendo armazenado.

Quando a chamada de read é feita no valor da interface, uma pesquisa na iTable é executada
para encontrar a implementação concreta do método read associado ao tipo.
Em seguida, a chamada do método é feita ao valor armazenado na segunda palavra.

Você pode dizer que retrieve é uma função polimórfica porque o valor concreto de pipe
pode ser passado para retrieve e agora a chamada para read feita para o valor da interface
muda seu comportamento. Desta vez, a chamada para read está lendo uma rede em ved de ler
um arquivo.

** Regras de Conjunto de Métodos

A implementação de uma interface usando semântica de ponteiro aplica algumas
restrições à conformidade da interface.

    type notifier interface {
        notify()
    }

    type user struct {
        name  string
        email string
    }

    func (u *user) notify() {
        fmt.Printf("Sending User Email To %s<%s>\n", u.name, u.email)
    }

    func sendNotification(n notifier) {
        n.notify()
    }

    func main() {
        u := user{"Bill", "bill@email.com"}
        sendNotification(u)
    }

A interface notifier é implementada pelo tipo user usando semântica de ponteiro.
Quando a semântica de valor é usada para fazer uma chamada polimórfica, a seguinte
mensagem do compilador é produzida.

    "cannot use u (type user) as type notifier in argument to sendNotification:
    user does not implement notifier (notify method has pointer receiver)"

Isso ocorre porque existe um conjunto especial de regras na especificação sobre
conjuntos de métodos. Essas regras definem quais métodos são anexados a valores
e ponteiros de um tipo. Elas existem para manter o maior nível de integridade no
meu programa.

Estas são as regras definidas na especificação:

- Para qualquer valor do tipo T, apenas os métodos implementados com um receiver de valor para esse tipo pertencem ao conjunto de métodos desse valor.
- Para qualquer endereço do tipo T, todos os métodos implementados para esse tipo pertencem ao conjunto de métodos desse valor.
      
Em outras palavras, ao trabalhar com um endereço (ponteiro), todos os métodos implementados
são anexados e disponíveis para serem chamados. Ao trabalhar com um valor, somente
os métodos implementados com receiver de valor são anexados e disponíveis para
serem chamados.

Na lição anterior sobre métodos, você foi capaz de chamar um método usando um
dado concreto, independente da semântica dos dados declarados pelo receptor.
Isso ocorre porque o compilador pode se ajustar para fazer a chamada. Neste caso,
um valor está sendo armazenado dentro de uma interface e os métodos devem existir.
Nenhum ajuste pode ser feito.

A questão agora é: Por que os métodos implementados com receivers de ponteiro
não podem ser anexados a valores do tipo T? Qual é o problema de integridade aqui?

Uma razão é porque você não pode garantir que todo valor do tipo T é endereçável.
Se um valor não tiver um endereço, ele não poderá ser compartilhado.

    type duration int

    func (d *duration) notify() {
            fmt.Println("Sending Notification in", *d)
    }

    func main() {
        duration(42).notify()
    }

Erro de Compilação:

    cannot call pointer method on duration(42)
    cannot take the address of duration(42)

Neste exemplo, o valor de 42 é uma constante do kind int. Mesmo que o valor seja
convertido para o tipo duration, ele não está sendo armazenado em uma variável.
Isso significa que o valor nunca está na stack ou na heap. Não há um endereço. Constantes
existem apenas em tempo de compilação.

A segunda razão é a razão maior. O compilador está informando que você não tem
permissão para usar semântica de valor se tiver optado por usar semântica de ponteiro.
Em outras palavras, você está sendo forçado a compartilhar o valor com a interface,
uma vez que não é seguro fazer uma cópia do valor para o qual o ponteiro aponta.
Se você escolheu implementar o método com semântica de ponteiro, você está afirmando
que um valor desse tipo não é seguro para ser copiado.

    func main() {
        u := user{"Bill", "bill@email.com"}
        sendNotification(&u)
    }

Para corrigir a mensagem do compilador, você deve usar a semântica de ponteiro
na chamada para a função polimórfica e compartilhar u. A resposta não é mudar
o método para usar a semântica de valor.

** Slice de Interface

Ao declarar uma slice de um tipo interface, você é capaz de agrupar diferentes
valores concretos com base no que eles podem fazer. É por isso que Go não precisa
do conceito de subtipagem. Não se trata de um DNA comum, trata-se de um comportamento
comum.

    type printer interface {
        print()
    }

    type canon struct {
        name string
    }

    func (c canon) print() {
        fmt.Printf("Printer Name: %s\n", c.name)
    }

    type epson struct {
        name string
    }

    func (e *epson) print() {
        fmt.Printf("Printer Name: %s\n", e.name)
    }

    func main() {
        c := canon{"PIXMA TR4520"}
        e := epson{"WorkForce Pro WF-3720"}

        printers := []printer{
            c,
            &e,
        }
        c.name = "PROGRAF PRO-1000"
        e.name = "Home XP-4100"

        for _, p := range printers {
            p.print()
        }
    }

Resultado:

    Printer Name: PIXMA TR4520
    Printer Name: Home XP-4100

O código mostra como uma slice do tipo interface printer me permite criar uma
coleção de diferentes tipos concretos de printer. Iterando a coleção e aproveitando
o polimorfismo, já que a chamada para p.print muda seu comportamento dependendo
do valor concreto para o qual o código está operando.

O exemplo também mostra como a escolha da semântica de dados muda o comportamento
do programa. Ao armazenar os dados usando semântica de valor, a alteração no valor
original não é vista. Isso ocorre porque uma cópia é armazenada dentro da interface.
Quando a semântica de ponteiro é usada, quaisquer alterações no valor original são vistas.

** Notas

- O conjunto de métodos de um valor inclui apenas os métodos implementados com um receiver de valor.
- O conjunto de métodos de um ponteiro inclui os métodos implementados com receivers de ponteiro e de valor.
- Métodos declarados com um receiver de ponteiro, implementam apenas a interface com valores de ponteiro.
- Métodos declarados com um receiver de valor, implementam a interface tanto com um receiver de valor quanto com um de ponteiro.
- As regras dos conjuntos de métodos se aplicam aos tipos interface.
- Interfaces são tipos de referência, não compartilhe com um ponteiro.
- É assim que criamos comportamento polimórfico em go.

** Citações

"Polimorfismo significa que você escreve um determinado programa e ele se comporta de maneira diferente dependendo dos dados em que opera." - Tom Kurtz (inventor of BASIC)

"A interface vazia não diz nada." - Rob Pike

"Design é a arte de organizar o código para funcionar hoje, e ser mutável para sempre." - Sandi Metz

"Uma abstração adequada desacopla o código para que cada alteração não ecoe por toda a base de código." - Ronna Steinburg

** Leitura Extra

- [[https://golang.org/doc/effective_go.html#interfaces][Interfaces]]    
- [[https://blog.golang.org/laws-of-reflection][The Laws of Reflection]] - Rob Pike    
- [[https://www.ardanlabs.com/blog/2014/05/methods-interfaces-and-embedded-types.html][Methods, Interfaces and Embedded Types in Go]] - William Kennedy    
- [[https://rakyll.org/interface-pollution/][Interface Pollution]] - JBD    
- [[https://bravenewgeek.com/abstraction-considered-harmful/][Abstraction Considered Harmful]] - Tyler Treat    
- [[https://www.ardanlabs.com/blog/2018/03/interface-values-are-valueless.html][Interface Values Are Valueless]] - William Kennedy    
- [[https://www.ardanlabs.com/blog/2017/07/interface-semantics.html][Interface Semantics]] - William Kennedy    
- [[https://www.hyrumslaw.com/][Hyrum's Law]] - Hyrum  
- [[https://www.youtube.com/watch?v=Pjz9WrXeOW0][Engineering Innovation - Why Constraints Are Critical]] - André Eriksson (MUST WATCH)

* Exercícios

Use o modelo como um ponto de partida para completar os exercícios. Uma possível solução é fornecida.

** Exercício 1

*Parte* *A:* Declare uma interface chamada speaker com um método chamado speak. Declare
uma struct chamada english que representa uma pessoa que fala inglês e declare uma struct
chamada chinese para alguém que fala chinês. Implemente a interface speaker para cada
struct usando receiver de valor e essas strings literais "Hello World" and "你好世界".
Declare uma variável do tipo speaker e atribua o endereço de um valor do tipo english
e chame o método. Faça isso novamente para o valor do tipo chinese.

*Parte* *B:* Adicione uma nova função chamada sayHello que aceita um valor do tipo speaker.
Implemente essa função para chamar o método speak no valor da interface. Em seguida, crie novos
valores de cada tipo e use a função.

.play interfaces/exercise1.go
.play interfaces/answer1.go
