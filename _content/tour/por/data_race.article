Data Race
Uma Data Race ocorre quando duas ou mais Goroutines tentam acessar a mesma localização de memória ao mesmo tempo,

* Data Race

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Assista ao vídeo]]
- Precisa de Assistência Financeira, Use Nosso [[https://www.ardanlabs.com/scholarship/][Formulário de Bolsa de Estudos]]

Uma Data Race ocorre quando duas ou mais Goroutines tentam acessar a mesma 
localização de memória ao mesmo tempo, sendo que pelo menos uma Goroutine está 
realizando uma escrita. Quando isso acontece, é impossível prever o resultado. Esse 
tipo de erro é difícil de encontrar porque causa problemas que sempre parecem aleatórios.

Esses ~8 minutes do Scott Meyers são ótimos para ouvir :

[[https://youtu.be/WDIkqP4JbkE?t=1809][CPU Caches and Why You Care 30:09-38:30]]

** Revisão de Código

- *Exemplo* *1:* Data Race
- *Exemplo* *2:* Incrementos Atômicos
- *Exemplo* *3:* Mutex
- *Exemplo* *4:* Mutexes de Leitura/Escrita
- *Exemplo* *5:* Map Data Race
- *Exemplo* *6:* Interface Baseada em Data Race

.play data_race/example1.go
.play data_race/example2.go     
.play data_race/example3.go
.play data_race/example4.go
.play data_race/example5.go
.play data_race/example6.go

** Exemplo de Data Race

Este é um ótimo exemplo de uma Data Race e de como elas podem 
ficar ocultas por anos e, eventualmente, aparecer em momentos estranhos 
e causar corrupção de dados.

    var counter int

    func main() {
        const grs = 2

        var wg sync.WaitGroup
        wg.Add(grs)

        for g := 0; g < grs; g++ {
            go func() {
                for i := 0; i < 2; i++ {
                    value := counter
                    value++
                    counter = value
                }
                wg.Done()
            }()
        }

        wg.Wait()
        fmt.Println("Counter:", counter)
    }

Este programa cria duas Goroutines que acessam a mesma variável do tipo integer, 
incrementando a variável duas vezes. As Goroutines realizam uma operação de leitura, 
modificação e escrita no estado compartilhado manualmente.

    var counter int

    func main() {
        . . .

        go func() {
            for i := 0; i < 2; i++ {
                value := counter
                value++
                counter = value
            }
            wg.Done()
        }()

        . . .
    }

Você pode ver o acesso ao estado compartilhado dentro do loop "for". Quando você compila 
e executa este programa, obtém a resposta correta de 4 a cada vez.

    $ ./example1
    Final Counter: 4

    $ ./example1
    Final Counter: 4

    $ ./example1
    Final Counter: 4

Como isso funciona?

    G1                            Shared State: 0                            G2
    ----------------------------------------------------------------------------
    Read:   0
    Modify: 1
    Write:  1                         Shared State: 1
    Context Switch 
                                                                      Read: 1
                                                                    Modify: 2
                                    Shared State: 2                  Write: 2
                                                               Context Switch 
    Read:   2
    Modify: 3
    Write:  3                         Shared State: 3
    Terminate
                                                                      Read: 3
                                                                    Modify: 4
                                    Shared State: 4                  Write: 4
                                                                    Terminate
    ----------------------------------------------------------------------------

As operações de leitura, modificação e escrita estão ocorrendo sem interrupções. 
Apenas porque estou obtendo a resposta correta não significa que não haja um problema. 
O que acontece se você adicionar uma declaração de log no meio da operação de leitura, 
modificação e escrita?

    var counter int

    func main() {
        . . .

        go func() {
            for i := 0; i < 2; i++ {
                value := counter
                value++
                log.Println("logging")     <-- Add Logging Here
                counter = value
            }
            wg.Done()
        }()

        . . .
    }

Se você executar esse programa, você não obterá mais o mesmo resultado de 4; agora 
você obterá a resposta de 2.

    $ ./example1
    Final Counter: 2

    $ ./example1
    Final Counter: 2

    $ ./example1
    Final Counter: 2


O que está acontecendo? Você está encontrando um bug de Data Race que existia 
antes, mas não estava ocorrendo. A chamada para o log agora está fazendo com que o 
scheduler faça uma troca de contexto entre as duas Goroutines em um momento 
inadequado.

    G1                                Shared State: 0                         G2
    ----------------------------------------------------------------------------
    Read:   0
    Modify: 1
    Context Switch
                                                                        Read:   0
                                                                        Modify: 1
                                                                   Context Switch 
    Write:  1                         Shared State: 1
    Read:   1
    Modify: 2
    Context Switch
                                    Shared State: 1                     Write:  1
                                                                        Read:   1
                                                                        Modify: 2
                                                                    Context Switch 
    Write:  2                         Shared State: 2
    Terminate
                                    Shared State: 2                     Write:  2
                                                                        Terminate
    ----------------------------------------------------------------------------

Após a operação de modificação, ocorre uma troca de contexto. As três operações não são 
mais ininterruptas, e a Goroutine 2 acaba com um valor local errado no momento em que 
conclui a operação de escrita. Você tem muita sorte de que isso esteja acontecendo todas 
as vezes e você possa vê-lo. Mas normalmente, uma Data Race como essa acontece 
"aleatoriamente" e é impossível saber disso até que seja tarde demais. Felizmente, o 
Go possui um detector de corrida para ajudar a encontrar corridas de dados.

** Detecção de Corrida

Existem várias maneiras de utilizar o detector de corrida. Você pode usá-lo com os comandos 
run, build e test. Se você usá-lo com o comando build, lembre-se de executar o programa. 
Dizem que um binário instrumentado pode tornar o programa mais lento em cerca de ~20%.


    $ go build -race
    $ ./example1

A opção -race é usada para instrumentar a compilação com o detector de corrida. 
Você provavelmente a usará mais com "go test", mas, para este exemplo, você está 
instrumentando o binário e, em seguida, executando-o.

    2021/02/01 17:30:52 logging
    2021/02/01 17:30:52 logging
    2021/02/01 17:30:52 logging
    ==================
    WARNING: DATA RACE
    Write at 0x000001278d88 by goroutine 8:
    main.main.func1()
        /data_race/example1/example1.go:41 +0xa6

    Previous read at 0x000001278d88 by goroutine 7:
    main.main.func1()
        /data_race/example1/example1.go:38 +0x4a

    Goroutine 8 (running) created at:
    main.main()
        /data_race/example1/example1.go:36 +0xaf

    Goroutine 7 (finished) created at:
    main.main()
        /data_race/example1/example1.go:36 +0xaf
    ==================
    2021/02/01 17:30:52 logging
    Final Counter: 2
    Found 1 data race(s)

Você pode ver que uma corrida foi detectada ao executar o programa. Isso aconteceria 
com ou sem a instrução de log inserida. Quando uma corrida é detectada, o programa 
entra em pânico e fornece esse rastreamento (trace). O rastreamento mostra onde houve 
acesso não sincronizado ao mesmo estado compartilhado, onde pelo menos um acesso foi uma operação de escrita.

Neste trace, uma Goroutine realizou uma escrita no endereço 0x000001278d88 na linha 41, 
e houve uma leitura não sincronizada no mesmo endereço por outra Goroutine na linha 38. 
Ambas as Goroutines foram criadas na linha 36.

    36 go func() {
    37     for i := 0; i < 2; i++ {
    38         value := counter
    39         value++
    40         log.Println("logging")
    41         counter = value
    42     }
    43     wg.Done()
    44 }()

Você pode claramente ver a leitura e escrita não sincronizadas. Como observação adicional, 
a operação "plus plus" (++) na linha 39 também seria uma Data Race se o código 
estivesse acessando a variável de contador. A operação "plus plus", por baixo, é uma operação 
de leitura, modificação e escrita , e o sistema operacional pode facilmente fazer uma troca 
de contexto no meio dela.

Então, como você pode corrigir o código para garantir que você remova a Data Race? 
Existem duas ferramentas que você pode usar, instruções atômicas e mutexes.

** Instruções Atômicas

Instruções atômicas fornecem sincronização no nível de hardware. Devido a isso, elas são 
limitadas a palavras e meias palavras de dados. Portanto, são ótimas para contadores ou 
mecanismos de troca rápida. A API WaitGroup utiliza instruções atômicas.

Quais alterações você precisa fazer para aplicar instruções atômicas ao código?

    var counter int32                             <-- CHANGED

    func main() {
        const grs = 2

        var wg sync.WaitGroup
        wg.Add(grs)

        for g := 0; g < grs; g++ {
            go func() {
                for i := 0; i < 2; i++ {
                    atomic.AddInt32(&counter, 1)  <-- CHANGED
                }
                wg.Done()
            }()
        }

        wg.Wait()
        fmt.Println("Counter:", counter)
    }

Você só precisa fazer algumas coisas. Primeiro, mude a variável de contador para ser 
um número integer baseado em precisão. Você pode ver isso no topo da listagem de código. 
As funções atômicas só funcionam com números integers baseados em precisão. Segundo, 
remova o código de leitura, modificação e escrita manual para uma chamada a `atomic.AddInt32`. 
Essa única chamada lida com tudo.

Todas as funções associadas ao pacote atômico recebem o endereço do estado compartilhado que 
deve ser sincronizado. A sincronização ocorre apenas no nível do endereço. Portanto, diferentes 
Goroutines chamando a mesma função, mas em um endereço diferente, não serão sincronizadas.

A API para instruções atômicas se parece com isso:

    func AddInt32(addr *int32, delta int32) (new int32)
    func AddInt64(addr *int64, delta int64) (new int64)
    func AddUint32(addr *uint32, delta uint32) (new uint32)
    func AddUint64(addr *uint64, delta uint64) (new uint64)
    func AddUintptr(addr *uintptr, delta uintptr) (new uintptr)

    func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool)
    func CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool)
    func CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)
    func CompareAndSwapUint32(addr *uint32, old, new uint32) (swapped bool)
    func CompareAndSwapUint64(addr *uint64, old, new uint64) (swapped bool)
    func CompareAndSwapUintptr(addr *uintptr, old, new uintptr) (swapped bool)

    func LoadInt32(addr *int32) (val int32)
    func LoadInt64(addr *int64) (val int64)
    func LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)
    func LoadUint32(addr *uint32) (val uint32)
    func LoadUint64(addr *uint64) (val uint64)
    func LoadUintptr(addr *uintptr) (val uintptr)

    func StoreInt32(addr *int32, val int32)
    func StoreInt64(addr *int64, val int64)
    func StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)
    func StoreUint32(addr *uint32, val uint32)
    func StoreUint64(addr *uint64, val uint64)
    func StoreUintptr(addr *uintptr, val uintptr)

    func SwapInt32(addr *int32, new int32) (old int32)
    func SwapInt64(addr *int64, new int64) (old int64)
    func SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer)
    func SwapUint32(addr *uint32, new uint32) (old uint32)
    func SwapUint64(addr *uint64, new uint64) (old uint64)
    func SwapUintptr(addr *uintptr, new uintptr) (old uintptr)

    type Value
        func (v *Value) Load() (x interface{})
        func (v *Value) Store(x interface{})

Você pode ver que o primeiro parâmetro é sempre o endereço de um número integer 
baseado em precisão ou um ponteiro. Também há um tipo chamado `Value` que fornece 
um valor síncrono com uma pequena API.

** Mutexes

Se você deseja manter as três linhas de código que tinha, então as instruções atômicas não 
vão funcionar. Nesse caso, o que você precisa é um mutex. Um mutex permite que você coloque 
um grupo de código em uma "caixa" para que apenas uma Goroutine por vez possa executar esse código.

    var counter int

    func main() {
        const grs = 2

        var wg sync.WaitGroup
        wg.Add(grs)

        var mu sync.Mutex                    <-- CHANGED

        for g := 0; g < grs; g++ {
            go func() {
                for i := 0; i < 2; i++ {
                    mu.Lock()                <-- CHANGED
                    {
                        value := counter
                        value++
                        counter = value
                    }
                    mu.Unlock()              <-- CHANGED
                }
                wg.Done()
            }()
        }

        wg.Wait()
        fmt.Println("Counter:", counter)
    }

Há várias alterações neste código em relação ao original. Você adicionou a construção da 
variável `mu` para ser um mutex configurado com seu valor zero. Em seguida, dentro do 
loop for, você adicionou chamadas para `Lock` e `Unlock` com um bloco de código artificial. 
Dentro do bloco de código, você tem o código que precisa ser sincronizado. O bloco de 
código é usado para melhorar a legibilidade.

Com este código em vigor, o scheduler permitirá que apenas uma Goroutine entre no bloco de 
código por vez. É importante entender que um mutex não é uma fila. A primeira Goroutine 
que chama `Lock` não é necessariamente a primeira a obter o bloqueio. Existe um algoritmo 
baseado em equidade, mas isso é feito de propósito para que as pessoas não usem mutexes 
como filas.

É importante lembrar que o `Lock` cria uma pressão de retorno, portanto, quanto mais tempo 
leva do `Lock` até o `Unlock`, maior a chance de Goroutines esperando sua vez. Se você 
esquecer de chamar o `Unlock`, todas as Goroutines esperando entrarão em deadlock. É por 
isso que é fundamental que a chamada para `Lock` e `Unlock` ocorra na mesma função. 
Certifique-se de fazer a sincronização mínima necessária no bloco de código, mas pelo menos 
o mínimo.

Este é um código muito ruim, onde alguém está tentando entrar e sair do `Lock` tão rapidamente 
que eles realmente perdem a sincronização, e o detector de corrida nem consegue descobrir o problema.

    var counter int

    func main() {
        const grs = 2

        var wg sync.WaitGroup
        wg.Add(grs)

        var mu sync.Mutex

        for g := 0; g < grs; g++ {
            go func() {
                for i := 0; i < 2; i++ {
                    var value int
                    mu.Lock()              <-- Bad Use Of Mutex
                    {
                        value = counter
                    }
                    mu.Unlock()

                    value++

                    mu.Lock()              <-- Bad Use Of Mutex
                    {
                        counter = value
                    }
                    mu.Unlock()
                }
                wg.Done()
            }()
        }

        wg.Wait()
        fmt.Println("Counter:", counter)
    }

Como diretriz geral, se você vir duas chamadas para `Lock` do mesmo mutex na mesma função, 
pare a revisão de código. Provavelmente, há um erro ou uma complicação excessiva. Neste 
caso, as chamadas para leitura e escrita estão sendo sincronizadas; no entanto, duas 
Goroutines podem chegar à linha de código `value++` com o mesmo valor. A corrida de 
dados ainda existe, e o detector de corrida não consegue encontrá-la.

** Mutexes de Leitura/Escrita

Existe um segundo tipo de mutex chamado mutex de leitura/escrita. Ele me permite separar 
os bloqueios em torno de leituras e escritas. Isso é importante, uma vez que a leitura 
de dados não representa uma ameaça, a menos que uma Goroutine esteja tentando escrever 
ao mesmo tempo. Portanto, esse tipo de mutex permite que várias Goroutines leiam a mesma 
memória ao mesmo tempo. Assim que um bloqueio de escrita é solicitado, as leituras não são 
mais permitidas, a escrita ocorre e, em seguida, as leituras podem ser retomadas.

    package main

    import (
        "fmt"
        "math/rand"
        "sync"
        "time"
    )

    var data []string
    var rwMutex sync.RWMutex

    func main() {
        var wg sync.WaitGroup
        wg.Add(1)

        go func() {
            for i := 0; i < 10; i++ {
                writer(i)
            }
            wg.Done()
        }()

        for i := 0; i < 8; i++ {
            go func(id int) {
                for {
                    reader(id)
                }
            }(i)
        }

        wg.Wait()
        fmt.Println("Program Complete")
    }

    func writer(i int) {
        rwMutex.Lock()
        {
            time.Sleep(time.Duration(rand.Intn(100)) * time.Millisecond)
            fmt.Println("****> : Performing Write")
            data = append(data, fmt.Sprintf("String: %d", i))
        }
        rwMutex.Unlock()
    }

    func reader(id int) {
        rwMutex.RLock()
        {
            time.Sleep(time.Duration(rand.Intn(10)) * time.Millisecond)
            fmt.Printf("%d : Performing Read : Length[%d]\n", id, len(data))
        }
        rwMutex.RUnlock()
    }

Você pode ver o uso de um mutex de leitura/escrita onde existem 8 Goroutines lendo o 
comprimento de um slice com um atraso de 10 milissegundos entre elas, e 1 Goroutine 
acordando dentro de 100 milissegundos para anexar um valor (escrever) no slice.

A chave está na implementação das funções de escrita e leitura. Observe como você usa 
`Lock` para o escritor e `RLock` para o leitor. Um dos maiores erros que você pode 
cometer é misturar chamadas de `Unlock` com a versão errada. Ter um `Lock` com um 
`RUnlock` nunca terminará bem.

    7 : Performing Read : Length[0]
    5 : Performing Read : Length[0]
    0 : Performing Read : Length[0]
    3 : Performing Read : Length[0]
    7 : Performing Read : Length[0]
    2 : Performing Read : Length[0]
    1 : Performing Read : Length[0]
    ****> : Performing Write
    0 : Performing Read : Length[1]
    5 : Performing Read : Length[1]
    3 : Performing Read : Length[1]
    6 : Performing Read : Length[1]
    7 : Performing Read : Length[1]
    4 : Performing Read : Length[1]
    1 : Performing Read : Length[1]
    2 : Performing Read : Length[1]
    ****> : Performing Write
    7 : Performing Read : Length[2]
    1 : Performing Read : Length[2]
    3 : Performing Read : Length[2]

A saída mostra como várias Goroutines estão lendo ao mesmo tempo, mas todas as leituras param quando a escrita ocorre.

** Notas

- As Goroutines precisam ser coordenadas e sincronizadas.
- Quando duas ou mais Goroutines tentam acessar o mesmo recurso, temos uma Data Race.
- Funções atômicas e mutexes podem fornecer o suporte de que precisamos.

** Coerência de Cache e Falso Compartilhamento

Este conteúdo é fornecido por Scott Meyers de sua palestra em 2014 na Dive.:

[[https://youtu.be/WDIkqP4JbkE?t=1809][CPU Caches and Why You Care (30:09-38:30)]]  
[[https://github.com/ardanlabs/gotraining/blob/master/topics/go/testing/benchmarks/falseshare/README.md][Code Example]]

.image /tour/eng/static/img/figure1_data_race.png

** Notas sobre Coerência de Cache e Falso Compartilhamento

- O acesso à memória por threads é importante.
- Se seu algoritmo não está escalando, procure por problemas de falso compartilhamento.

** Leitura Extra

- [[http://www.drdobbs.com/parallel/eliminate-false-sharing/217500206][Eliminate False Sharing]] - Herb Sutter    
- [[https://golang.org/ref/mem][The Go Memory Model]]    
- [[https://blog.golang.org/race-detector][Introducing the Go Race Detector]] - Dmitry Vyukov and Andrew Gerrand    
- [[https://www.ardanlabs.com/blog/2013/09/detecting-race-conditions-with-go.html][Detecting Race Conditions With Go]] - William Kennedy    
- [[https://golang.org/doc/articles/race_detector.html][Data Race Detector]]    

* exercícios

Use o template como um ponto de partida para completar os exercícios. Uma possível solução é fornecida.

** Exercício 1

Dado o programa a seguir, use o detector de corrida (race detector) para encontrar e corrigir a Data Race.

.play data_race/exercise1.go
.play data_race/answer1.go
