Channels
Channels permitem que goroutines se comuniquem entre si por meio do uso de semântica de sinais.

* Channels

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Assista ao vídeo]]
- Precisa de Assistência Financeira, Use Nosso [[https://www.ardanlabs.com/scholarship/][Formulário de Bolsa de Estudos]]

É importante pensar em um *channel* não como uma estrutura de dados, mas como um mecanismo
de sinalização. Isso está alinhado com a ideia de que você envia e recebe em um *channel*, não lê e escreve.
Se o problema à sua frente não pode ser resolvido com sinalização, se a palavra sinalização não está
sendo mencionada, você precisa questionar o uso de *channels*.

** Revisão de Código

- *Exemplo* *1:* Aguardar pelo resultado
- *Exemplo* *2:* Distribuir tarefas (Fan out)
- *Exemplo* *3:* Aguardar pela tarefa
- *Exemplo* *4:* Pooling (Agrupamento)
- *Exemplo* *5:* Semáforo de distribuição (Fan out semaphore)
- *Exemplo* *6:* Agrupamento de trabalho limitado
- *Exemplo* *7:* Descartar (Drop)
- *Exemplo* *8:* Cancelamento
- *Exemplo* *9:* Retentativas com limite de tempo
- *Exemplo* *10:* Cancelamento de canal

.play channels/example1.go
.play channels/example2.go
.play channels/example3.go
.play channels/example4.go
.play channels/example5.go
.play channels/example6.go
.play channels/example7.go
.play channels/example8.go
.play channels/example9.go
.play channels/example10.go

** Mecânica de Channels

O custo de ter a garantia no nível de sinalização é a latência desconhecida.
O remetente não saberá por quanto tempo ele precisa esperar que o destinatário
aceite o sinal. Ter que esperar pelo destinatário cria uma latência bloqueante.
Nesse caso, quantidades desconhecidas de latência de bloqueio. O remetente precisa esperar,
por um período de tempo desconhecido, até que o destinatário esteja disponível para receber o sinal.

Esperar pelo destinatário significa mecanicamente que a operação de recebimento ocorre antes
do envio. Com canais, o recebimento ocorre nanossegundos antes, mas ainda é antes.
Isso significa que o destinatário pega o sinal e depois se afasta, permitindo que o
remetente prossiga com uma garantia.

E se o processo não puder esperar por um período de tempo desconhecido?
E se esse tipo de latência não funcionar? Nesse caso, a garantia não pode estar no
nível de sinalização; ela precisa estar fora dele. A mecânica por trás disso é que o
envio agora ocorre antes do recebimento. O remetente pode realizar o sinal sem precisar
que o destinatário esteja disponível. Portanto, o remetente pode se afastar e não precisa esperar.
Eventualmente, espera-se que o destinatário apareça e pegue o sinal.

Isso reduz o custo de latência no envio, mas cria incerteza sobre os sinais sendo recebidos e,
portanto, sobre a detecção de problemas *upstream* com os destinatários. Isso pode fazer
com que o processo aceite trabalho que nunca é iniciado ou concluído.
Isso poderia eventualmente causar uma pressão massiva e fazer com que os sistemas travem.

A segunda coisa a se concentrar é se você precisa enviar dados com o sinal.
Se o sinal exigir a transmissão de dados, então a sinalização é uma relação 1 para 1
entre Goroutines. Se uma nova Goroutine também precisa receber o sinal, um segundo sinal
deve ser enviado.

Se os dados não precisarem ser transmitidos com o sinal, então o sinal pode ser uma
relação 1 para 1 ou 1 para muitos entre Goroutines. Sinalização sem dados é usada
principalmente para cancelamento ou desligamento. Isso é feito fechando o channel.

A terceira coisa a se concentrar é o estado do *channel*. Um *channel* pode estar em 1 de 3 estados.

Um *channel* pode estar em um estado nulo, construindo o *channel* para o seu estado de zero value.
Envios e recebimentos em canais neste estado serão bloqueados.
Isso é útil em situações onde você deseja implementar paradas de curto prazo no trabalho.

Um *channel* pode estar em um estado aberto usando a função integrada "make".
Envios e recebimentos em canais neste estado funcionarão sob as seguintes condições:

*Unbuffered* *Channels:*

- Garantias no nível de sinalização com o recebimento ocorrendo antes do envio.
As Goroutines de envio e recebimento precisam se encontrar no mesmo espaço e
tempo para que um sinal seja processado.

*Buffered* *Channels:*

- Garantias fora do nível de sinalização, com o envio ocorrendo antes do recebimento.
Se o buffer não estiver cheio, os envios podem ser concluídos, caso contrário, eles
bloqueiam. Se o buffer não estiver vazio, as recepções podem ser concluídas,
caso contrário, elas bloqueiam.

Um *channel* pode estar em um estado fechado usando a função integrada *close*.
Você não precisa fechar um *channel* para liberar memória, isso é para alterar o estado.
Enviar em um *channel* fechado causará um pânico, no entanto, receber em um *channel* fechado
retornará imediatamente.

Com todas essas informações, você pode se concentrar em padrões de canal.
A ênfase na sinalização é importante. A ideia é determinar se você precisa ou não de
uma garantia no nível de sinalização, com base nas preocupações com a latência. Se você
precisa ou não transmitir dados com o sinal, com base no tratamento de cancelamentos ou não.
Você deseja converter a sintaxe para essas semânticas.

** Orientação de design

- Aprenda sobre o [[https://github.com/ardanlabs/gotraining/blob/master/topics/go/#channel-design][Orientação de design]] para channels.

** Diagramas

*Garantia* *de* *Entrega* - (Guarantee Of Delivery)

A `Garantia de Entrega`, É baseada em uma única pergunta: "Eu preciso da
garantia de que o sinal enviado por uma determinada goroutine foi recebido?"

.image /tour/eng/static/img/guarantee_of_delivery.png

*Sinalização* *Com* *ou* *Sem* *Dados*

Quando você vai sinalizar `com` dados, existem três opções de configuração de
*channel* que você pode escolher, dependendo do tipo de `garantia` que você precisa.

.image /tour/eng/static/img/signaling_with_data.png

Ela permite que uma goroutine sinalize outra goroutine para cancelar o que estão fazendo
e seguir em frente. O cancelamento pode ser implementado usando canais tanto
`não bufferizados` quanto `bufferizados`.

.image /tour/eng/static/img/signaling_without_data.png

*Estado*

O comportamento de um canal é diretamente influenciado pelo seu `estado` atual.
O `estado` de um canal pode ser `nulo`, `aberto` ou `fechado`.

.image /tour/eng/static/img/state.png

** Leitura Extra

- [[https://www.ardanlabs.com/blog/2017/10/the-behavior-of-channels.html][The Behavior Of Channels]] - William Kennedy
- [[https://golang.org/ref/mem#tmp_7][Channel Communication]]
- [[https://blog.golang.org/share-memory-by-communicating][Share Memory By Communicating]] - Andrew Gerrand
- [[https://www.ardanlabs.com/blog/2014/02/the-nature-of-channels-in-go.html][The Nature Of Channels In Go]] - William Kennedy
- [[http://matt-welsh.blogspot.com/2010/07/retrospective-on-seda.html][A Retrospective on SEDA]] - Matt Welsh
- [[https://www.youtube.com/watch?v=KBZlN0izeiY][Understanding Channels]] - Kavya Joshi

** Buffer Bloat - 2011

Tenha cuidado ao usar buffers grandes com a ideia de reduzir a latência.

- Buffers grandes impedem a notificação oportuna da pressão de retorno.
- Eles prejudicam sua capacidade de reduzir a pressão de retorno de forma oportuna.
- Eles podem aumentar a latência, não reduzi-la.
- Use buffered channels para fornecer uma maneira de manter a continuidade.
- Não os use apenas para desempenho.
- Use-os para lidar com explosões de dados bem definidas.
- Use-os para lidar com problemas de velocidade da luz entre as transferências.

*Vídeos*

- [[https://www.youtube.com/watch?v=qbIozKVz73g][Bufferbloat: Dark Buffers in the Internet]]
- [[http://www.bufferbloat.net/projects/cerowrt/wiki/Bloat-videos][Buffer Bloat Videos]]

* Exercícios

Utilize o template como ponto de partida para concluir os exercícios. Uma possível solução é fornecida.

** Exercício 1

Escreva um programa no qual duas goroutines passem um inteiro de um lado para o outro dez vezes.
Exiba quando cada goroutine receber o inteiro. Incremente o inteiro a cada passagem.
Uma vez que o inteiro atingir o valor de dez, encerre o programa de forma limpa.

.play channels/exercise1.go 
.play channels/answer1.go

** Exercício 2

Escreva um programa que utilize um padrão de expansão (fan out) para gerar 100 números
aleatórios de forma concorrente. Cada goroutine deve gerar um único número aleatório e
retornar esse número para a goroutine principal por meio de um *buffered channel*. Defina o
tamanho do *buffered channel* de modo que nenhum envio bloqueie. Não aloque mais buffers do
que você precisa. A goroutine principal deve exibir cada número aleatório que ela recebe e,
em seguida, encerrar o programa.

.play channels/exercise2.go
.play channels/answer2.go

** Exercício 3

Escreva um programa que gere até 100 números aleatórios de forma concorrente.
Não envie todos os 100 valores, de modo que o número de envios/recebimentos seja desconhecido.

.play channels/exercise3.go
.play channels/answer3.go
 
** Exercício 4
Escreva um programa que gere até 100 números aleatórios de forma concorrente usando um
*worker pool*. Rejeite valores pares. Instrua os *workers* a encerrarem
quando 100 números ímpares forem coletados.

.play channels/exercise4.go 
.play channels/answer4.go
