Desacoplamento
A composição vai além dos detalhes mecânicos da incorporação de tipos e é mais do que apenas um paradigma.

* Desacoplamento

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Assista ao vídeo]]
- Precisa de Assistência Financeira, Use Nosso [[https://www.ardanlabs.com/scholarship/][Formulário de Bolsa de Estudos]]


A melhor maneira de aproveitar a incorporação é por meio do padrão de design de 
composição. É a chave para manter a estabilidade em seu software, permitindo a 
adaptação às mudanças nos dados e nas transformações que estão por vir.

** Revisão de Código

- *Exemplo* *1:* Composição de Struct
- *Exemplo* *2:* Desacoplamento com Interface
- *Exemplo* *3:* Composição de Interface
- *Exemplo* *4:* Desacoplamento com Composição de Interface
- *Exemplo* *5:* Remover Poluição de Interface
- *Exemplo* *6:* APIs Mais Precisa

.play composition/decoupling/example1.go
.play composition/decoupling/example2.go
.play composition/decoupling/example3.go
.play composition/decoupling/example4.go
.play composition/decoupling/example5.go
.play composition/decoupling/example6.go

** Mecânicas de Desacoplamento

A ideia é compor tipos maiores a partir de tipos menores e focar na composição 
de comportamento.

    type Xenia struct {
        Host    string
        Timeout time.Duration
    }

    func (*Xenia) Pull(d *Data) error {
        switch rand.Intn(10) {
        case 1, 9:
            return io.EOF
        case 5:
            return errors.New("Error reading data from Xenia")
        default:
            d.Line = "Data"
            fmt.Println("In:", d.Line)
            return nil
        }
    }

O tipo Xenia representa um sistema do qual você precisa extrair dados. A implementação 
não é importante. O que é importante é que o método Pull pode ter sucesso, falhar ou não 
ter nenhum dado para extrair.

    type Pillar struct {
        Host    string
        Timeout time.Duration
    }

    func (*Pillar) Store(d *Data) error {
        fmt.Println("Out:", d.Line)
        return nil
    }

O tipo Pillar representa um sistema no qual você precisa armazenar dados. O que é 
importante, mais uma vez, é que o método Store pode ter sucesso ou falhar.

Esses dois tipos representam uma camada primitiva de código que fornece o comportamento 
básico necessário para resolver o problema de negócios de extrair dados do Xenia e 
armazenar esses dados no Pillar.

    func Pull(x *Xenia, data []Data) (int, error) {
        for i := range data {
            if err := x.Pull(&data[i]); err != nil {
                return i, err
            }
        }

        return len(data), nil
    }

    func Store(p *Pillar, data []Data) (int, error) {
        for i := range data {
            if err := p.Store(&data[i]); err != nil {
                return i, err
            }
        }

        return len(data), nil
    }

A próxima camada de código é representada por estas duas funções, Pull e Store. Elas se 
baseiam na camada primitiva de código ao aceitar uma coleção de valores de dados para 
extrair ou armazenar nos sistemas correspondentes. Essas funções se concentram nos tipos 
concretos Xenia e Pillar, uma vez que são os sistemas com os quais o programa precisa 
trabalhar no momento.

    func Copy(sys *System, batch int) error {
        data := make([]Data, batch)

        for {
            i, err := Pull(&sys.Xenia, data)
            if i > 0 {
                if _, err := Store(&sys.Pillar, data[:i]); err != nil {
                    return err
                }
            }

            if err != nil {
                return err
            }
        }
    }

A função Copy é construída em cima das funções Pull e Store para mover todos os 
dados pendentes para cada execução. Se você observar o primeiro parâmetro de Copy, 
é um tipo chamado System.

    type System struct {
        Xenia
        Pillar
    }

A ideia inicial do tipo System é compor um sistema que sabe como realizar operações 
de Pull e Store. Neste caso, a composição da capacidade de Pull e Store do Xenia 
e do Pillar.

    func main() {
        sys := System{
            Xenia: Xenia{
                Host:    "localhost:8000",
                Timeout: time.Second,
            },
            Pillar: Pillar{
                Host:    "localhost:9000",
                Timeout: time.Second,
            },
        }

        if err := Copy(&sys, 3); err != io.EOF {
            fmt.Println(err)
        }
    }

Finalmente, a função principal pode ser escrita para construir um Xenia e um Pillar 
dentro da composição de um System. Em seguida, o System pode ser passado para a 
função Copy e os dados podem começar a fluir entre os dois sistemas.

Com todo esse código, agora você tem o meu primeiro rascunho de uma solução concreta 
para um problema concreto.

** Desacoplamento com Interface

O próximo passo é entender o que poderia mudar no programa. Neste caso, o que pode 
mudar são os próprios sistemas. Hoje pode ser Xenia e Pillar, amanhã pode ser Alice e Bob. 
Com esse conhecimento, você deseja desacoplar a solução concreta existente dessa mudança. 
Para fazer isso, você deseja transformar as funções concretas em funções polimórficas.

    func Pull(p Puller, data []Data) (int, error) {
        for i := range data {
            if err := p.Pull(&data[i]); err != nil {
                return i, err
            }
        }

        return len(data), nil
    }

    func Store(s Storer, data []Data) (int, error) {
        for i := range data {
            if err := s.Store(&data[i]); err != nil {
                return i, err
            }
        }

        return len(data), nil
    }

Atualmente, a função Pull aceita um valor Xenia e a função Store aceita um valor Pillar. No 
final das contas, não era Xenia e Pillar que eram importantes, mas sim um valor concreto que 
sabe como Pull e Store. Você pode transformar essas funções concretas em funções polimórficas 
ao solicitar dados com base no que elas podem fazer, em vez do que são.

    type Puller interface {
        Pull(d *Data) error
    }

    type Storer interface {
        Store(d *Data) error
    }

Essas duas interfaces descrevem o que dados concretos devem fazer, e são esses tipos que 
são substituídos na declaração das funções Pull e Store. Agora, essas funções são polimórficas. 
Quando Alice e Bob são declarados e implementados como um Puller e um Storer, eles podem ser 
passados para as funções.

Você ainda não terminou. A função Copy também precisa ser polimórfica.

    func Copy(ps PullStorer, batch int) error {
        data := make([]Data, batch)

        for {
            i, err := Pull(ps, data)
            if i > 0 {
                if _, err := Store(ps, data[:i]); err != nil {
                    return err
                }
            }

            if err != nil {
                return err
            }
        }
    }

A função Copy não está mais pedindo um valor System, mas sim qualquer valor concreto 
que saiba tanto como Pull quanto Store.

    type PullStorer interface {
        Puller
        Storer
    }

A interface PullStorer é declarada por meio do uso de composição. Ela é composta 
pelas interfaces Puller e Storer. Trabalhe na composição de interfaces maiores a 
partir das menores.

Observe como a variável PullStorer agora está sendo passada para as funções Pull e Store.
Como isso é possível quando as informações de tipo são diferentes?

    // func Pull(p Puller, data []Data) (int, error) {
    i, err := Pull(ps, data)

    // func Store(s Storer, data []Data) (int, error) {
    if _, err := Store(ps, data[:i]); err != nil {

Você sempre precisa lembrar que nunca está passando um valor de interface em seu programa, 
já que eles não existem e não têm valor. Você só pode passar dados concretos. Portanto, 
os dados concretos armazenados dentro da variável de interface ps é o que está sendo 
passado para Pull e Store. Não é verdade que o valor concreto armazenado dentro de ps 
deve saber como realizar as operações de Pull e Store?  

.image /tour/eng/static/img/comp1.png

Uma vez que um System é composto por um Xenia e um Pillar, o System implementa a 
interface PullStorer. Com essas alterações, você agora pode criar novos tipos 
concretos que implementam a interface PullStorer.
    type System1 struct {
        Xenia
        Pillar
    }

    type System2 struct {
        Alice
        Bob
    }

    type System3 struct {
        Xenia
        Bob
    }

    type System4 struct {
        Alice
        Pillar
    }

Quando você pensa mais sobre isso, declarar diferentes tipos de System para todas as 
combinações possíveis não é realista. Isso funcionará, mas a dificuldade de manutenção 
exige uma solução melhor.

** Composição de Interfaces

E se você decidisse compor o seu tipo de sistema concreto a partir de dois tipos de interface?

    type System struct {
        Puller
        Storer
    }

Esta é uma solução interessante. Isso permitiria que a aplicação injetasse o Puller ou 
Storer concreto no sistema no momento de inicialização da aplicação.

    func main() {
        sys := System{
            Puller: &Xenia{
                Host:    "localhost:8000",
                Timeout: time.Second,
            },
            Storer: &Pillar{
                Host:    "localhost:9000",
                Timeout: time.Second,
            },
        }

        if err := Copy(&sys, 3); err != io.EOF {
            fmt.Println(err)
        }
    }

Este tipo de sistema implementa a interface PullStorer para todas as combinações 
possíveis de tipos concretos.

.image /tour/eng/static/img/comp2.png

Com essa alteração, a aplicação está totalmente desacoplada das mudanças para um 
novo sistema que pode ser adicionado ao longo do tempo.

** Revisão de Precisão

A próxima pergunta a ser feita é se as funções polimórficas são tão precisas quanto 
poderiam ser de outra forma. Esta é uma parte do processo de engenharia que não pode 
ser ignorada. A resposta é não, podem ser feitas duas mudanças.

    func Copy(sys *System, batch int) error {

A função Copy não precisa mais ser polimórfica, uma vez que haverá apenas um tipo 
System. O tipo de interface PullStorer pode ser removido do programa. Lembre-se 
de que você moveu o polimorfismo para dentro do tipo quando utilizou a composição 
com os tipos de interface.

    func Copy(p Puller, s Storer, batch int) error {

Esta é outra alteração que pode ser feita na função Copy. Essa alteração torna 
a função mais precisa e polimórfica novamente. Agora, a função está solicitando 
exatamente o que precisa com base no que os dados concretos podem fazer.

.image /tour/eng/static/img/comp3.png

Com essa alteração, o tipo de struct System pode ser removido do programa também.

    func main() {
        x := Xenia{
            Host:    "localhost:8000",
            Timeout: time.Second,
        }

        p := Pillar{
            Host:    "localhost:9000",
            Timeout: time.Second,
        }

        if err := Copy(&x, &p, 3); err != io.EOF {
            fmt.Println(err)
        }
    }

Ao remover os tipos PullStorer e System, o programa se simplifica. A função main 
pode se concentrar na construção dos valores concretos de Puller e Storer 
necessários para mover os dados. O sistema de tipos e as APIs ficam mais precisos. 
Essa ideia de precisão vem de Edsger W. Dijkstra.

"O propósito da abstração não é ser vago, mas criar um novo nível semântico no qual se pode ser absolutamente preciso.". - Edsger W. Dijkstra

** Notas

- Isso vai muito além dos mecanismos de incorporação de tipos.
- Declare tipos e implemente fluxos de trabalho com a composição em mente.
- Compreenda primeiro o problema que você está tentando resolver. Isso significa compreender os dados.
- O objetivo é reduzir e minimizar mudanças em cascata em todo o seu software.
- Interfaces proporcionam a forma mais elevada de composição.
- Não agrupe tipos por um DNA comum, mas por um comportamento comum.
- Todos podem trabalhar juntos quando nos concentramos no que fazemos e não no que somos.

** Citações

"Uma boa API não é apenas fácil de usar, mas também difícil de usar de maneira inadequada." - JBD

"Você sempre pode incorporar, mas não pode decompor interfaces grandes depois que elas estão em uso. Mantenha as interfaces pequenas." - JBD

"Não projete com interfaces, descubra-as." - Rob Pike

"A duplicação é muito mais barata do que a abstração errada." - Sandi Metz

** Orientações de Design

Aprenda sobre as  [[https://github.com/ardanlabs/gotraining/blob/master/topics/go/#interface-and-composition-design][orientação de designs]] para composição.

** Leitura Extra

- [[https://programmingisterrible.com/post/176657481103/repeat-yourself-do-more-than-one-thing-and][Repeat yourself, do more than one thing, and rewrite everything]] - tef  
- [[https://golang.org/doc/effective_go.html#embedding][Embedding]]   
- [[https://www.ardanlabs.com/blog/2014/05/methods-interfaces-and-embedded-types.html][Methods, Interfaces and Embedding]] - William Kennedy  
- [[https://www.ardanlabs.com/blog/2015/09/composition-with-go.html][Composition In Go]] - William Kennedy  
- [[https://www.ardanlabs.com/blog/2016/10/reducing-type-hierarchies.html][Reducing Type Hierarchies]] - William Kennedy  
- [[https://www.ardanlabs.com/blog/2016/10/avoid-interface-pollution.html][Avoid Interface Pollution]] - William Kennedy 

* Exercícios

Use o template como um ponto de partida para completar os exercícios. Uma possível solução é fornecida.

** Exercício 1


Usando o template, declare um conjunto de tipos concretos que implementam o conjunto de tipos de interface 
pré-definidos. Em seguida, crie valores desses tipos e use-os para concluir um conjunto de tarefas pré-definidas.

.play composition/decoupling/exercise1.go
.play composition/decoupling/answer1.go
