Data Races
A data race is when two or more goroutines attempt to read and write to the same resource at the same time. Race conditions can create bugs that appear totally random or can never surface as they corrupt data.

* Data Races

A data race is when two or more goroutines attempt to read and write to the same resource at the same time. Race conditions can create bugs that appear totally random or can never surface as they corrupt data. Atomic functions and mutexes are a way to synchronize the access of shared resources between goroutines.

* Notes

- Goroutines need to be coordinated and synchronized.
- When two or more goroutines attempt to access the same resource, we have a data race.
- Atomic functions and mutexes can provide the support we need.

* Cache Coherency and False Sharing
This content is provided by Scott Meyers from his talk in 2014 at Dive:

[[https://youtu.be/WDIkqP4JbkE?t=1809][CPU Caches and Why You Care (30:09-38:30)]]  
[[https://github.com/ardanlabs/gotraining/blob/master/topics/go/testing/benchmarks/falseshare/README.md][Code Example]]

.image /tour/static/img/figure1_data_race.png

* Cache Coherency and False Sharing Notes

- Thread memory access matters.
- If your algorithm is not scaling look for false sharing problems.

* Links

- [[http://www.drdobbs.com/parallel/eliminate-false-sharing/217500206][Eliminate False Sharing]] - Herb Sutter    
- [[https://golang.org/ref/mem][The Go Memory Model]]    
- [[http://blog.golang.org/race-detector][Introducing the Go Race Detector]] - Dmitry Vyukov and Andrew Gerrand    
- [[https://www.ardanlabs.com/blog/2013/09/detecting-race-conditions-with-go.html][Detecting Race Conditions With Go]] - William Kennedy    
- [[https://golang.org/doc/articles/race_detector.html][Data Race Detector]]    

* Diagram

View of Data Race in Example1.

.image /tour/static/img/data_race.png

* Code Review I

- *Example* *1:* Data Race
.play data_race/example1/example1.go
     

- *Example* *2:* Atomic Increments
.play data_race/example2/example2.go
     

- *Example* *3:* Mutex
.play data_race/example3/example3.go
    
* Code Review II

- *Example* *4:* Read/Write Mutex
.play data_race/example4/example4.go
     

- *Example* *5:* Map Data Race
.play data_race/example5/example5.go
     

* Advanced Code Review

- *Example* *1:* Interface Based Race Condition
.play data_race/advanced/example1/example1.go
 

* Exercises

Exercise 1

Given the following program, use the race detector to find and correct the data race.

.play data_race/exercises/template1/template1.go

* Answer
.play data_race/exercises/exercise1/exercise1.go
 

All material is licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache License Version 2.0, January 2004]].
